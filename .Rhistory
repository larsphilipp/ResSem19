html_doc
html_table(html_doc)[[1]][1:5, 1:4]
html_nodes(html_doc, xpath = "/html/body/div[3]/div[1]/div[2]/div[2]/div[17]/div")
query = list(
t="ARCX:SPY",
region="usa",
culture="en-US",
ops="clear",
s="0P00001MK8",
y="5",
ndec="2",
ep="true",
freq="m",
annlz="true",
comparisonRemove="false"
)
query
View(rc_html)
View(rc_html)
install.packages("RSelenium")
library(RSelenium)
# start the Selenium server
rD <- rsDriver(verbose = FALSE)
# assign the client to a new variable, visit a webpage
myclient <- rD$client
# assign the client to a new variable, visit a webpage
myclient <- rD$client
myclient
myclient <- rD$client
# start the Selenium server
rD <- rsDriver(verbose = FALSE)
# assign the client to a new variable, visit a webpage
myclient <- rD$client
# start browsing
myclient$navigate("http://www.r-project.org")
myclient <- rD$client
myclient
myclient$navigate("http://www.r-project.org")
# start browsing
myclient$navigate("https://www.r-project.org")
# start browsing
myclient$navigate("https://www.r-project.org/")
# install.packages("RSelenium")
library(RSelenium)
# start the Selenium server
rD <- rsDriver(verbose = FALSE)
# install package (if necessary)
# install.packages("jsonlite")
# load package
library(jsonlite)
# read the file
myproject <- fromJSON("myproject.json")
# install package (if necessary)
# install.packages("jsonlite")
# load package
library(jsonlite)
# read the file
myproject <- fromJSON("myproject.json")
load("~/MBF Unisg/Web Mining/Problem Set 2/myproject.json")
# load package
library(jsonlite)
# read the file
myproject <- fromJSON("myproject.json")
# install package (if necessary)
install.packages("jsonlite")
# load package
library(jsonlite)
# read the file
myproject <- fromJSON("C:\Users\Lars Stauffenegger\Documents\MBF Unisg\Web Mining\Problem Set 2\myproject.json")
install.packages("jsonlite")
# load package
library(jsonlite)
# read the file
myproject <- fromJSON("C:\Users\Lars Stauffenegger\Documents\MBF Unisg\Web Mining\Problem Set 2\myproject.json")
# read the file
myproject <- fromJSON("C:/Users/Lars Stauffenegger/Documents/MBF Unisg/Web Mining/Problem Set 2/myproject.json")
View(myproject)
View(myproject)
str(myproject)
myproject$firstName <- 'Lars'
myproject$lastName <- 'Stauffenegger'
str(myproject)
myproject$Matr-Nr. (student id number) <- '013-059-183'
myproject$Matr-Nr. <- '013-059-183'
myproject$"Matr-Nr. (student id number)" <- '013-059-183'
str(myproject)
curl -v --request POST
--header "Content-Type: application/x-www-form-urlencoded;charset=UTF-8"
--header "Accept: application/json"
--header "Authorization: Basic NGM4MTY3Y2QtZDcyMi00ZWRmLTkyYzItNDk3NjQyZTY4ZDdkOmMwam0zNGVjNmswYWhtN2U4ZzkwbDQyMWZsMTI="
-d "grant_type=client_credentials&scope=openid profile api.sgmarkets-execution-structured-products.v1"  https://sso.sgmarkets.com/sgconnect/oauth2/access_token
library(httr)
library(httr)
Token_URL <- https://sso.sgmarkets.com/sgconnect/oauth2/access_token
POST(url = Token_URL,
add_headers(Accept = "application/json",
Authorization = "Basic NGM4MTY3Y2QtZDcyMi00ZWRmLTkyYzItNDk3NjQyZTY4ZDdkOmMwam0zNGVjNmswYWhtN2U4ZzkwbDQyMWZsMTI=",
"Content-Type" = "application/x-www-form-urlencoded;charset=UTF-8"),
body = "grant_type=client_credentials&scope=openid profile api.sgmarkets-execution-structured-products.v1")
Token_URL <- https://sso.sgmarkets.com/sgconnect/oauth2/access_token
Token_URL = https://sso.sgmarkets.com/sgconnect/oauth2/access_token
Token_URL <- "https://sso.sgmarkets.com/sgconnect/oauth2/access_token"
POST(url = Token_URL,
add_headers(Accept = "application/json",
Authorization = "Basic NGM4MTY3Y2QtZDcyMi00ZWRmLTkyYzItNDk3NjQyZTY4ZDdkOmMwam0zNGVjNmswYWhtN2U4ZzkwbDQyMWZsMTI=",
"Content-Type" = "application/x-www-form-urlencoded;charset=UTF-8"),
body = "grant_type=client_credentials&scope=openid profile api.sgmarkets-execution-structured-products.v1")
library(httr)
Token_URL <- "https://sso.sgmarkets.com/sgconnect/oauth2/access_token"
Bearer_Answer= POST(url = Token_URL,
add_headers(Accept = "application/json",
Authorization = "Basic NGM4MTY3Y2QtZDcyMi00ZWRmLTkyYzItNDk3NjQyZTY4ZDdkOmMwam0zNGVjNmswYWhtN2U4ZzkwbDQyMWZsMTI=",
"Content-Type" = "application/x-www-form-urlencoded;charset=UTF-8"),
body = "grant_type=client_credentials&scope=openid profile api.sgmarkets-execution-structured-products.v1",
verbose=true)
Bearer_Answer= POST(url = Token_URL,
add_headers(Accept = "application/json",
Authorization = "Basic NGM4MTY3Y2QtZDcyMi00ZWRmLTkyYzItNDk3NjQyZTY4ZDdkOmMwam0zNGVjNmswYWhtN2U4ZzkwbDQyMWZsMTI=",
"Content-Type" = "application/x-www-form-urlencoded;charset=UTF-8"),
body = "grant_type=client_credentials&scope=openid profile api.sgmarkets-execution-structured-products.v1",
verbose = TRUE)
Bearer_Answer <- POST(url = Token_URL,
add_headers(Accept = "application/json",
Authorization = "Basic NGM4MTY3Y2QtZDcyMi00ZWRmLTkyYzItNDk3NjQyZTY4ZDdkOmMwam0zNGVjNmswYWhtN2U4ZzkwbDQyMWZsMTI=",
"Content-Type" = "application/x-www-form-urlencoded;charset=UTF-8"),
body = "grant_type=client_credentials&scope=openid profile api.sgmarkets-execution-structured-products.v1",
verbose = TRUE)
library(jsonlite)
Bearer_Answer <- POST(url = Token_URL,
add_headers(Accept = "application/json",
Authorization = "Basic NGM4MTY3Y2QtZDcyMi00ZWRmLTkyYzItNDk3NjQyZTY4ZDdkOmMwam0zNGVjNmswYWhtN2U4ZzkwbDQyMWZsMTI=",
"Content-Type" = "application/x-www-form-urlencoded;charset=UTF-8"),
body = "grant_type=client_credentials&scope=openid profile api.sgmarkets-execution-structured-products.v1",
verbose = TRUE)
Bearer_Answer <- POST(url = Token_URL,
add_headers(Accept = "application/json",
Authorization = "Basic NGM4MTY3Y2QtZDcyMi00ZWRmLTkyYzItNDk3NjQyZTY4ZDdkOmMwam0zNGVjNmswYWhtN2U4ZzkwbDQyMWZsMTI=",
"Content-Type" = "application/x-www-form-urlencoded;charset=UTF-8"),
body = "grant_type=client_credentials&scope=openid profile api.sgmarkets-execution-structured-products.v1",
verbose = (data_in = TRUE, info = TRUE,
ssl = TRUE))
Bearer_Answer <- POST(url = Token_URL,
add_headers(Accept = "application/json",
Authorization = "Basic NGM4MTY3Y2QtZDcyMi00ZWRmLTkyYzItNDk3NjQyZTY4ZDdkOmMwam0zNGVjNmswYWhtN2U4ZzkwbDQyMWZsMTI=",
"Content-Type" = "application/x-www-form-urlencoded;charset=UTF-8"),
body = "grant_type=client_credentials&scope=openid profile api.sgmarkets-execution-structured-products.v1",
verbose = (data_in = TRUE, info = TRUE, ssl = TRUE))
Bearer_Answer <- POST(url = Token_URL,
add_headers(Accept = "application/json",
Authorization = "Basic NGM4MTY3Y2QtZDcyMi00ZWRmLTkyYzItNDk3NjQyZTY4ZDdkOmMwam0zNGVjNmswYWhtN2U4ZzkwbDQyMWZsMTI=",
"Content-Type" = "application/x-www-form-urlencoded;charset=UTF-8"),
body = "grant_type=client_credentials&scope=openid profile api.sgmarkets-execution-structured-products.v1",
verbose(data_in = TRUE, info = TRUE, ssl = TRUE))
Bearer_Answer <- POST(url = Token_URL,
add_headers(Accept = "application/json",
Authorization = "Basic NGM4MTY3Y2QtZDcyMi00ZWRmLTkyYzItNDk3NjQyZTY4ZDdkOmMwam0zNGVjNmswYWhtN2U4ZzkwbDQyMWZsMTI=",
"Content-Type" = "application/x-www-form-urlencoded;charset=UTF-8"),
body = "grant_type=client_credentials&scope=openid profile api.sgmarkets-execution-structured-products.v1",
verbose(data_in = TRUE)
Bearer_Answer <- POST(url = Token_URL,
add_headers(Accept = "application/json",
Authorization = "Basic NGM4MTY3Y2QtZDcyMi00ZWRmLTkyYzItNDk3NjQyZTY4ZDdkOmMwam0zNGVjNmswYWhtN2U4ZzkwbDQyMWZsMTI=",
"Content-Type" = "application/x-www-form-urlencoded;charset=UTF-8"),
body = "grant_type=client_credentials&scope=openid profile api.sgmarkets-execution-structured-products.v1",
verbose(data_in = TRUE))
Bearer_Answer <- POST(url = Token_URL,
add_headers(Accept = "application/json",
Authorization = "Basic NGM4MTY3Y2QtZDcyMi00ZWRmLTkyYzItNDk3NjQyZTY4ZDdkOmMwam0zNGVjNmswYWhtN2U4ZzkwbDQyMWZsMTI=",
"Content-Type" = "application/x-www-form-urlencoded;charset=UTF-8"),
body = "grant_type=client_credentials&scope=openid profile api.sgmarkets-execution-structured-products.v1",
verbose(data_in = TRUE))
Bearer_Answer
install.packages("curl")
install.packages("curl")
install.packages("curl")
library(httr)
library(jsonlite)
Token_URL <- "https://sso.sgmarkets.com/sgconnect/oauth2/access_token"
Bearer_Answer <- POST(url = Token_URL,
add_headers(Accept = "application/json",
Authorization = "Basic NGM4MTY3Y2QtZDcyMi00ZWRmLTkyYzItNDk3NjQyZTY4ZDdkOmMwam0zNGVjNmswYWhtN2U4ZzkwbDQyMWZsMTI=",
"Content-Type" = "application/x-www-form-urlencoded;charset=UTF-8"),
body = "grant_type=client_credentials&scope=openid profile api.sgmarkets-execution-structured-products.v1",
verbose(data_in = TRUE))
, info = TRUE, ssl = TRUE))
Bearer_Answer <- POST(url = Token_URL,
add_headers(Accept = "application/json",
Authorization = "Basic NGM4MTY3Y2QtZDcyMi00ZWRmLTkyYzItNDk3NjQyZTY4ZDdkOmMwam0zNGVjNmswYWhtN2U4ZzkwbDQyMWZsMTI=",
"Content-Type" = "application/x-www-form-urlencoded;charset=UTF-8"),
body = "grant_type=client_credentials&scope=openid profile api.sgmarkets-execution-structured-products.v1",
verbose(data_in = TRUE))
install.packages("httr")
install.packages("httr")
Bearer_Answer <- POST(url = Token_URL,
add_headers(Accept = "application/json",
Authorization = "Basic NGM4MTY3Y2QtZDcyMi00ZWRmLTkyYzItNDk3NjQyZTY4ZDdkOmMwam0zNGVjNmswYWhtN2U4ZzkwbDQyMWZsMTI=",
"Content-Type" = "application/x-www-form-urlencoded;charset=UTF-8"),
body = "grant_type=client_credentials&scope=openid profile api.sgmarkets-execution-structured-products.v1",
verbose(data_in = TRUE))
Bearer_Answer <- httr::POST(url = Token_URL,
add_headers(Accept = "application/json",
Authorization = "Basic NGM4MTY3Y2QtZDcyMi00ZWRmLTkyYzItNDk3NjQyZTY4ZDdkOmMwam0zNGVjNmswYWhtN2U4ZzkwbDQyMWZsMTI=",
"Content-Type" = "application/x-www-form-urlencoded;charset=UTF-8"),
body = "grant_type=client_credentials&scope=openid profile api.sgmarkets-execution-structured-products.v1",
verbose(data_in = TRUE))
Bearer_Answer <- httr::POST(url = Token_URL,
add_headers(Accept = "application/json",
Authorization = "Basic NGM4MTY3Y2QtZDcyMi00ZWRmLTkyYzItNDk3NjQyZTY4ZDdkOmMwam0zNGVjNmswYWhtN2U4ZzkwbDQyMWZsMTI=",
"Content-Type" = "application/x-www-form-urlencoded;charset=UTF-8"),
body = "grant_type=client_credentials&scope=openid profile api.sgmarkets-execution-structured-products.v1",
verbose())
library(httr)
library(jsonlite)
Token_URL <- "https://sso.sgmarkets.com/sgconnect/oauth2/access_token"
Bearer_Answer <- httr::POST(url = Token_URL,
add_headers(Accept = "application/json",
Authorization = "Basic NGM4MTY3Y2QtZDcyMi00ZWRmLTkyYzItNDk3NjQyZTY4ZDdkOmMwam0zNGVjNmswYWhtN2U4ZzkwbDQyMWZsMTI=",
"Content-Type" = "application/x-www-form-urlencoded;charset=UTF-8"),
body = "grant_type=client_credentials&scope=openid profile api.sgmarkets-execution-structured-products.v1",
verbose())
library(httr)
library(jsonlite)
Token_URL <- "https://sso.sgmarkets.com/sgconnect/oauth2/access_token"
Bearer_Answer <- httr::POST(url = Token_URL,
add_headers(Accept = "application/json",
Authorization = "Basic NGM4MTY3Y2QtZDcyMi00ZWRmLTkyYzItNDk3NjQyZTY4ZDdkOmMwam0zNGVjNmswYWhtN2U4ZzkwbDQyMWZsMTI=",
"Content-Type" = "application/x-www-form-urlencoded;charset=UTF-8"),
body = "grant_type=client_credentials&scope=openid profile api.sgmarkets-execution-structured-products.v1",
verbose(data_in = TRUE))
Bearer_Answer
Bearer_Answer <- POST(url = Token_URL,
add_headers(Accept = "application/json",
Authorization = "Basic NGM4MTY3Y2QtZDcyMi00ZWRmLTkyYzItNDk3NjQyZTY4ZDdkOmMwam0zNGVjNmswYWhtN2U4ZzkwbDQyMWZsMTI=",
"Content-Type" = "application/x-www-form-urlencoded;charset=UTF-8"),
body = "grant_type=client_credentials&scope=openid profile api.sgmarkets-execution-structured-products.v1",
verbose(data_in = TRUE))
Bearer_Answer <- POST(url = Token_URL,
add_headers("Accept" = "application/json",
Authorization = "Basic NGM4MTY3Y2QtZDcyMi00ZWRmLTkyYzItNDk3NjQyZTY4ZDdkOmMwam0zNGVjNmswYWhtN2U4ZzkwbDQyMWZsMTI=",
"Content-Type" = "application/x-www-form-urlencoded;charset=UTF-8"),
body = "grant_type=client_credentials&scope=openid profile api.sgmarkets-execution-structured-products.v1",
verbose(data_in = TRUE))
Bearer_Answer <- POST(url = Token_URL,
add_headers("Accept" = "application/json",
"Authorization" = "Basic NGM4MTY3Y2QtZDcyMi00ZWRmLTkyYzItNDk3NjQyZTY4ZDdkOmMwam0zNGVjNmswYWhtN2U4ZzkwbDQyMWZsMTI=",
"Content-Type" = "application/x-www-form-urlencoded;charset=UTF-8"),
body = "grant_type=client_credentials&scope=openid profile api.sgmarkets-execution-structured-products.v1",
verbose(data_in = TRUE))
Bearer_Answer <- jsonlite::fromJSON(POST(url = Token_URL,
add_headers("Accept" = "application/json",
"Authorization" = "Basic NGM4MTY3Y2QtZDcyMi00ZWRmLTkyYzItNDk3NjQyZTY4ZDdkOmMwam0zNGVjNmswYWhtN2U4ZzkwbDQyMWZsMTI=",
"Content-Type" = "application/x-www-form-urlencoded;charset=UTF-8"),
body = "grant_type=client_credentials&scope=openid profile api.sgmarkets-execution-structured-products.v1",
verbose(data_in = TRUE)))
curl_version
curl
cont <- POST(url = Token_URL,
add_headers("Accept" = "application/json",
"Authorization" = "Basic NGM4MTY3Y2QtZDcyMi00ZWRmLTkyYzItNDk3NjQyZTY4ZDdkOmMwam0zNGVjNmswYWhtN2U4ZzkwbDQyMWZsMTI=",
"Content-Type" = "application/x-www-form-urlencoded;charset=UTF-8"),
body = "grant_type=client_credentials&scope=openid profile api.sgmarkets-execution-structured-products.v1",
verbose(data_in = TRUE))
Answer_RCurl <- RCurl::postURL(Token_URL
library(curlconverter)
, info = TRUE, ssl = TRUE))
install.packages("curlconverter")
library(RCurl)
postForm("http://www.datasciencetoolkit.org/text2people", a="Archbishop Huxley")
postForm("http://www.datasciencetoolkit.org/text2people", a="Archbishop Huxley")
library(libcurl)
install.packages("libcurl")
library(RCurl)
install.packages("rcurl")
yes
Yes
install.packages("RCurl")
library(RCurl)
postForm("http://www.datasciencetoolkit.org/text2people", a="Archbishop Huxley")
Answer_RCurl <- RCurl::postURL(Token_URL)
Answer_RCurl <- RCurl::postForm(Token_URL)
headers <- list('Authorization' = 'Basic NGM4MTY3Y2QtZDcyMi00ZWRmLTkyYzItNDk3NjQyZTY4ZDdkOmMwam0zNGVjNmswYWhtN2U4ZzkwbDQyMWZsMTI=','Accept' = 'application/json', 'Content-Type' = 'application/x-www-form-urlencoded', 'charset' = 'UTF-8')
bearer_resp <- postForm(Token_URL, .opts=list(postfields="grant_type=client_credentials&scope=openid profile api.sgmarkets-execution-structured-products.v1", httpheader=headers))
headers <- list('Authorization' = 'Basic NGM4MTY3Y2QtZDcyMi00ZWRmLTkyYzItNDk3NjQyZTY4ZDdkOmMwam0zNGVjNmswYWhtN2U4ZzkwbDQyMWZsMTI=','Accept' = 'application/json', 'Content-Type' = 'application/x-www-form-urlencoded', 'charset' = 'UTF-8')
bearer_resp <- postForm(Token_URL, .opts=list(postfields='grant_type=client_credentials&scope=openid profile api.sgmarkets-execution-structured-products.v1', httpheader=headers))
### RCURL
# save the url of the request in an object (same as -X POST in the curl request)
options(RCurlOptions = list(cainfo=system.file("CurlSSL", "cacert.pem", package = "RCurl")))# headers (same as -H)
bearer_resp <- postForm(Token_URL, .opts=list(postfields='grant_type=client_credentials&scope=openid profile api.sgmarkets-execution-structured-products.v1', httpheader=headers,curlOptions(ssl.verifypeer=TRUE, verbose=TRUE))
bearer_resp <- postForm(Token_URL, .opts=list(postfields='grant_type=client_credentials&scope=openid profile api.sgmarkets-execution-structured-products.v1', httpheader=headers,curlOptions(ssl.verifypeer=TRUE, verbose=TRUE)))
bearer_resp <- postForm(Token_URL, .opts=list(postfields='grant_type=client_credentials&scope=openid profile api.sgmarkets-execution-structured-products.v1', httpheader=headers, RCurl::curlOptions(ssl.verifypeer=TRUE, verbose=TRUE)))
cont <- POST(url = Token_URL,
add_headers("Accept" = "application/json",
"Authorization" = "Basic NGM4MTY3Y2QtZDcyMi00ZWRmLTkyYzItNDk3NjQyZTY4ZDdkOmMwam0zNGVjNmswYWhtN2U4ZzkwbDQyMWZsMTI=",
"Content-Type" = "application/x-www-form-urlencoded;charset=UTF-8"),
body = "grant_type=client_credentials&scope=openid profile api.sgmarkets-execution-structured-products.v1",
config = httr::config(ssl.verifypeer=TRUE),
verbose(data_in = TRUE))
bearer_resp <- postForm(Token_URL, .opts=list(postfields='grant_type=client_credentials&scope=openid profile api.sgmarkets-execution-structured-products.v1', httpheader=headers, RCurl::curlOptions(ssl.verifypeer=TRUE, verbose=TRUE)))
bearer_resp <- postForm(Token_URL, .opts=list(postfields='grant_type=client_credentials&scope=openid profile api.sgmarkets-execution-structured-products.v1', httpheader=headers, RCurlOptions(ssl.verifypeer=TRUE, verbose=TRUE)))
bearer_resp <- postForm(Token_URL, .opts=list(postfields='grant_type=client_credentials&scope=openid profile api.sgmarkets-execution-structured-products.v1', httpheader=headers, curlOptions(ssl.verifypeer=TRUE, verbose=TRUE)))
cont <- POST(url = Token_URL,
add_headers("Accept" = "application/json",
"Authorization" = "Basic NGM4MTY3Y2QtZDcyMi00ZWRmLTkyYzItNDk3NjQyZTY4ZDdkOmMwam0zNGVjNmswYWhtN2U4ZzkwbDQyMWZsMTI=",
'Content-Type' = "application/x-www-form-urlencoded;charset=UTF-8"),
body = "grant_type=client_credentials&scope=openid profile api.sgmarkets-execution-structured-products.v1",
config = httr::config(ssl.verifypeer=TRUE),
verbose(data_in = TRUE))
cont <- POST(url = Token_URL,
add_headers("Accept" = "application/json",
"Authorization" = "Basic NGM4MTY3Y2QtZDcyMi00ZWRmLTkyYzItNDk3NjQyZTY4ZDdkOmMwam0zNGVjNmswYWhtN2U4ZzkwbDQyMWZsMTI=",
'Content-Type' = "application/x-www-form-urlencoded;charset=UTF-8"),
body = "grant_type=client_credentials&scope=openid profile api.sgmarkets-execution-structured-products.v1",
#config = httr::config(ssl.verifypeer=TRUE),
verbose(data_in = TRUE))
cont <- POST(url = Token_URL,
add_headers("Accept" = "application/json",
"Authorization" = "Basic NGM4MTY3Y2QtZDcyMi00ZWRmLTkyYzItNDk3NjQyZTY4ZDdkOmMwam0zNGVjNmswYWhtN2U4ZzkwbDQyMWZsMTI=",
`Content-Type` = "application/x-www-form-urlencoded;charset=UTF-8"),
body = "grant_type=client_credentials&scope=openid profile api.sgmarkets-execution-structured-products.v1",
#config = httr::config(ssl.verifypeer=TRUE),
verbose(data_in = TRUE))
cont <- POST(url = Token_URL,
add_headers("Accept" = "application/xml",
"Authorization" = "Basic NGM4MTY3Y2QtZDcyMi00ZWRmLTkyYzItNDk3NjQyZTY4ZDdkOmMwam0zNGVjNmswYWhtN2U4ZzkwbDQyMWZsMTI=",
`Content-Type` = "application/x-www-form-urlencoded;charset=UTF-8"),
body = "grant_type=client_credentials&scope=openid profile api.sgmarkets-execution-structured-products.v1",
#config = httr::config(ssl.verifypeer=TRUE),
verbose(data_in = TRUE))
curl_fetch_memory(url, handle = new_handle())
install.packages("curl")
install.packages("curl")
library(curl)
curl_fetch_memory(url, handle = new_handle())
h <- new_handle()
handle_setheaders(h, .list = list(Accept = "application/json", "Content-Type": "application/x-www-form-urlencoded;charset=UTF-8", Authorization = "Basic NGM4MTY3Y2QtZDcyMi00ZWRmLTkyYzItNDk3NjQyZTY4ZDdkOmMwam0zNGVjNmswYWhtN2U4ZzkwbDQyMWZsMTI="))
handle_setheaders(h, .list = list(Accept = "application/json", 'Content-Type': "application/x-www-form-urlencoded;charset=UTF-8", Authorization = "Basic NGM4MTY3Y2QtZDcyMi00ZWRmLTkyYzItNDk3NjQyZTY4ZDdkOmMwam0zNGVjNmswYWhtN2U4ZzkwbDQyMWZsMTI="))
handle_setheaders(h, .list = list(Accept = "application/json", 'Content-Type': "application/x-www-form-urlencoded", Charset = "UTF-8", Authorization = "Basic NGM4MTY3Y2QtZDcyMi00ZWRmLTkyYzItNDk3NjQyZTY4ZDdkOmMwam0zNGVjNmswYWhtN2U4ZzkwbDQyMWZsMTI="))
handle_setheaders(h,
"Accept" = "application/json",
"Content-Type": "application/x-www-form-urlencoded",
"Charset" = "UTF-8",
"Authorization" = "Basic NGM4MTY3Y2QtZDcyMi00ZWRmLTkyYzItNDk3NjQyZTY4ZDdkOmMwam0zNGVjNmswYWhtN2U4ZzkwbDQyMWZsMTI=")
handle_setheaders(h,
"Accept" = "application/json",
'Content-Type': 'application/x-www-form-urlencoded',
"Charset" = "UTF-8",
"Authorization" = "Basic NGM4MTY3Y2QtZDcyMi00ZWRmLTkyYzItNDk3NjQyZTY4ZDdkOmMwam0zNGVjNmswYWhtN2U4ZzkwbDQyMWZsMTI=")
financial market data for the research seminar in Financial Economics
# installing packages
library(PerformanceAnalytics)
library(AER)
library(C50)
library(Hmisc)
library(jtools)
library(huxtable)
library(zoo)
library(ggplot2)
library(psych)
library(xtable)
# setting working directory
getwd()
setwd("C:/Users/Lars Stauffenegger/Documents/MBF Unisg/Research Seminar/ResSem19")
#setwd("/Users/julianwossner/Desktop/MBF/Vorlesungen_2._Semester/Research_Seminar_Financial_Economics/Daten/ResSem19")
#setwd("C:/Users/LST/Documents/Uni/Research Seminar/ResSem19")
# Data Import --------------------------------------
# Index Data
dataind04 <- read.csv2("Indices from 04.csv", header = TRUE , sep = ";") #reading in data
dataind04 <- transform(dataind04, Date = as.Date(Date, format = "%Y-%m-%d") ,SNBSD = as.numeric(as.character(SNBSD)), SMI = as.numeric(as.character(SMI)),
SPIEX = as.numeric(as.character(SPIEX)), SMI.Mid = as.numeric(as.character(SMI.Mid)), CHF.USD = as.numeric(as.character(CHF.USD)), CHF.EUR = as.numeric(as.character(CHF.EUR))) # Converting numbers into numeric format and date column to date format
dataind04 <- dataind04[-c(1:196),]
# SNB Data
dataind08 <- read.csv2("Data_for_import_Indices_from_08.csv", header = TRUE , sep = ";") #reading in data
## Data Cleaning --------------------------------------
# Transforming the columns of the data frame into numeric
dataind08 <- transform(dataind08, Date = as.Date(Date, format = "%Y-%m-%d") ,SMI = as.numeric(as.character(SMI)), SDofDomBanks = as.numeric(as.character(SDofDomBanks)),
SPIEX = as.numeric(as.character(SPIEX)), SMIMid = as.numeric(as.character(SMIMid)), Gov10yr = as.numeric(as.character(Gov10yr)),
Gov3yr = as.numeric(as.character(Gov3yr)), Libor3M_CHF = as.numeric(as.character(Libor3M_CHF)), CHFUSD = as.numeric(as.character(CHFUSD)),
CHFEUR = as.numeric(as.character(CHFEUR))) # Converting numbers into numeric format and date column to date format
dataind08[is.na(dataind08)] <- 0 # Replacing NA with 0, NA indruduced due to #DIV/0! Entry in excel.
str(dataind08)
## Return calculations --------------
# Stock data
RetSMI <-  diff(log(dataind08$SMI)) # Weekly returns of the SMI
RetSPIEX <- diff(log(dataind08$SPIEX)) # Weekly returns of the SPIEX
RetSMIMid <- diff(log(dataind08$SMIMid)) # Weekly returns of the SMIMid
RetCHFEUR <- diff(log(dataind08$CHFEUR)) # Weekly returns of the SMIMid
# SNB Data
ChgSDdomBanks <- diff(dataind08$SDofDomBanks)/dataind08$SDofDomBanks[-length(dataind08$SDofDomBanks)] # Sight deposits of dom. Banks
# Creating Returns data set
dataret <- dataind08[-1,]
dataret <- cbind(dataret, RetSMI, RetSPIEX, RetSMIMid, ChgSDdomBanks, RetCHFEUR) # adding percent changes to the data set
# Inclusions
SMIdata    <- dataret[,-c(3,5,12,13,15)]   # Includes SMI as only stock indice
SPIEXdata  <- dataret[,-c(4,5,11,13,15)] # Includes SPI Extra as only stock indice
SMIMdata   <- dataret[,-c(3,4,11,12,15)]  # Includes the SMI Mid as only stock indice
#CHFEURdata <- dataret[,-c(3,5,12,13)] # including SMI
#CHFEURdata <- dataret[,-c(3,4,11,12)] # including SMIM
CHFEURdata <- dataret # including SMI and SMIM
## Classification: Up / Down --------------------------------------
# SMI data
SMIdata$SMIdir <- as.factor(ifelse(SMIdata$RetSMI > 0, "up", ifelse(SMIdata$RetSMI < 0, "down", "no change" ))) # Including a column with up, down factors
SMIdata$SDdomBanksdir <- as.factor(ifelse(SMIdata$ChgSDdomBanks > 0, "up", ifelse(SMIdata$ChgSDdomBanks < 0, "down", "no change" )))
SMIdata$SMI.FC <- as.factor(ifelse(SMIdata$RetSMI > 0, "up", ifelse(SMIdata$RetSMI < 0, "down", "no change" ))) # Reproduce the column SMIM.Dir
SMIdata$SMI.FC[1:574] <- SMIdata$SMI.FC[2:575] # Lag the series to produce forecasts
SMIdata <-SMIdata[-575,] # delete the last row
# SPIEX data
SPIEXdata$SPIEXdir <- as.factor(ifelse(SPIEXdata$RetSPIEX > 0, "up", ifelse(SPIEXdata$RetSPIEX < 0, "down", "no change" ))) # Including a column with up, down factors
SPIEXdata$SDdomBanksdir <- as.factor(ifelse(SPIEXdata$ChgSDdomBanks > 0, "up", ifelse(SPIEXdata$ChgSDdomBanks < 0, "down", "no change" )))
SPIEXdata$SPIEX.FC <- as.factor(ifelse(SPIEXdata$RetSPIEX > 0, "up", ifelse(SPIEXdata$RetSPIEX < 0, "down", "no change" ))) # Reproduce the column SMIM.Dir
SPIEXdata$SPIEX.FC[1:574] <- SPIEXdata$SPIEX.FC[2:575] # Lag the series to produce forecasts
SPIEXdata <-SPIEXdata[-575,] # delete the last row
# SMImid data
SMIMdata$SMIMdir <- as.factor(ifelse(SMIMdata$RetSMIMid > 0, "up", ifelse(SMIMdata$RetSMIMid < 0, "down", "no change" ))) # Including a column with up, down factors
SMIMdata$SDdomBanksdir <- as.factor(ifelse(SMIMdata$ChgSDdomBanks > 0, "up", ifelse(SMIMdata$ChgSDdomBanks < 0, "down", "no change" )))
SMIMdata$SMIM.FC <- as.factor(ifelse(SMIMdata$RetSMIMid > 0, "up", ifelse(SMIMdata$RetSMIMid < 0, "down", "no change" ))) # Reproduce the column SMIM.Dir
SMIMdata$SMIM.FC[1:574] <- SMIMdata$SMIM.FC[2:575] # Lag the series to produce forecasts
SMIMdata <-SMIMdata[-575,] # delete the last row
# CHFEUR data
CHFEURdata$SMIdir <- as.factor(ifelse(CHFEURdata$RetSMI > 0, "up", ifelse(CHFEURdata$RetSMI < 0, "down", "no change" ))) # Including a column with up, down factors
CHFEURdata$SMIMdir <- as.factor(ifelse(CHFEURdata$RetSMIM > 0, "up", ifelse(CHFEURdata$RetSMIM < 0, "down", "no change" ))) # Including a column with up, down factors
CHFEURdata$SPIEXdir <- as.factor(ifelse(CHFEURdata$RetSPIEX > 0, "up", ifelse(CHFEURdata$RetSPIEX < 0, "down", "no change" ))) # Including a column with up, down factors
CHFEURdata$SDdomBanksdir <- as.factor(ifelse(CHFEURdata$ChgSDdomBanks > 0, "up", ifelse(CHFEURdata$ChgSDdomBanks < 0, "down", "no change" )))
CHFEURdata$CHFEURdir <- as.factor(ifelse(CHFEURdata$RetCHFEUR > 0, "up", ifelse(CHFEURdata$RetCHFEUR < 0, "down", "no change" ))) # Including a column with up, down factors
CHFEURdata$CHFEURprev <- CHFEURdata$CHFEUR # CHFEURdata$CHFEURdir
CHFEURdata$CHFEURprev[2:575] <- CHFEURdata$CHFEUR[1:574] # CHFEURdata$CHFEURdir[1:574]
CHFEURdata$CHFEURnext <- CHFEURdata$CHFEURdir
CHFEURdata$CHFEURnext[1:574] <- CHFEURdata$CHFEURdir[2:575] # CHFEURdata$CHFEURdir[1:574]
CHFEURdata <-CHFEURdata[2:556,] # delete the last row
PreCapPeriod.CHFEUR <- CHFEURdata[1:185,-1] # Data set from 2008 - 02 - 08 to 2011 - 08 - 26 (PreCapPeriod phase)
CapPeriod.CHFEUR <- CHFEURdata[186:362,-1] # Data set from 2011 - 09 - 02 to 2015 - 01 - 15 (CapPeriod phase)
PostCapPeriod.CHFEUR <- CHFEURdata[363:555,-1]
# Sampling Object ------------------------------------
Sampling Object --------------------------------------------------
samplingC5 <- function(inputData, dependentVariable, trainShare) {
sumVariableImportance = setNames(data.frame(matrix(ncol = length(names(inputData)), nrow = 1)), names(inputData))
boostTrain = vector()
boostTest = vector()
for (i in 1:100) {
model <- C5.0(inputData, dependentVariable,
rules = TRUE, trials = 10,
control = C5.0Control(sample=trainShare))
#summary(model)
# parsing Boost Error Value
output <- strsplit(model[["output"]], "\n")[[1]]
boostRow <- grep("^boost\t", output)
boostTrain[i] <- gsub(".*\\(|\\).*", "", output[(boostRow[1])])
boostTest[i] <- gsub(".*\\(|\\).*", "", output[(boostRow[2])])
#print(boostTrain[i])
# parsing Variable Importance
variableImportance <- C5imp(model)
for (var in model[["predictors"]]) {
sumVariableImportance[i,var] = variableImportance[var,]
}
}
orderOfImportance <- sort(colMeans(sumVariableImportance), decreasing = TRUE)
boostTrain <- as.numeric(sub("%", "", boostTrain[!is.na(boostTrain)]))
boostTest  <- as.numeric(sub("%", "", boostTest[!is.na(boostTest)]))
meanBoostTrain <- mean(boostTrain)
meanBoostTest  <- mean(boostTest)
results <- c(trainError = meanBoostTrain, testError = meanBoostTest, varImp = orderOfImportance)
attr(results, "class") <- "samplingC5"
results
}
# -----------------------------------------------------------------
## This week is forecasted us
# -----------------------------------------------------------------
## This week is forecasted using current data and last weeks chfeur
# -> ok results for looking at the exchange rate as a pattern of current
# (same point in time) financial market parameters and itself(lag 1)
trainShare <- 0.7
samplingCapPeriodCHFEUR <- samplingC5(CapPeriod.CHFEUR[-c(9,14,19)], CapPeriod.CHFEUR$CHFEURdir, trainShare)
print(samplingCapPeriodCHFEUR)
samplingCapCHFEURSMI <- samplingC5(CapPeriod.CHFEUR[-c(2,11,17,4,12,16,9,14,19,21)], CapPeriod.CHFEUR$CHFEURdir, trainShare)
print(samplingCapCHFEURSMI)
samplingPostCHFEURSMI <- samplingC5(PostCapPeriod.CHFEUR[-c(2,11,17,4,12,16,9,14,19,21)], PostCapPeriod.CHFEUR$CHFEURdir, trainShare)
print(samplingPostCHFEURSMI)
samplingPreCHFEURSMIM <- samplingC5(PreCapPeriod.CHFEUR[-c(2,11,17,3,10,15,9,14,19,21)], PreCapPeriod.CHFEUR$CHFEURdir, trainShare)
print(samplingPreCHFEURSMIM)
samplingCapCHFEURSMIM <- samplingC5(CapPeriod.CHFEUR[-c(2,11,17,3,10,15,9,14,19,21)], CapPeriod.CHFEUR$CHFEURdir, trainShare)
print(samplingCapCHFEURSMIM)
samplingPostCHFEURSMIM <- samplingC5(PostCapPeriod.CHFEUR[-c(2,11,17,3,10,15,9,14,19,21)], PostCapPeriod.CHFEUR$CHFEURdir, trainShare)
print(samplingPostCHFEURSMIM)
samplingPreCHFEURSPIEX <- samplingC5(PreCapPeriod.CHFEUR[-c(3,10,15,4,12,16,9,14,19,21)], PreCapPeriod.CHFEUR$CHFEURdir, trainShare)
print(samplingPreCHFEURSPIEX)
samplingCapPeriodCHFEURSPIEX <- samplingC5(CapPeriod.CHFEUR[-c(3,10,15,4,12,16,9,14,19,21)], CapPeriod.CHFEUR$CHFEURdir, trainShare)
print(samplingCapPeriodCHFEURSPIEX)
samplingPostCHFEURSPIEX <- samplingC5(PostCapPeriod.CHFEUR[-c(3,10,15,4,12,16,9,14,19,21)], PostCapPeriod.CHFEUR$CHFEURdir, trainShare)
print(samplingPostCHFEURSPIEX)
samplingPreCHFEURSMI <- samplingC5(PreCapPeriod.CHFEUR[-c(2,11,17,4,12,16,9,14,19,21)], PreCapPeriod.CHFEUR$CHFEURdir, trainShare)
print(samplingPreCHFEURSMI)
samplingCapCHFEURSMI <- samplingC5(CapPeriod.CHFEUR[-c(2,11,17,4,12,16,9,14,19,21)], CapPeriod.CHFEUR$CHFEURdir, trainShare)
print(samplingCapCHFEURSMI)
samplingPostCHFEURSMI <- samplingC5(PostCapPeriod.CHFEUR[-c(2,11,17,4,12,16,9,14,19,21)], PostCapPeriod.CHFEUR$CHFEURdir, trainShare)
print(samplingPostCHFEURSMI)
samplingPreCHFEURSMI <- samplingC5(PreCapPeriod.CHFEUR[-c(2,11,17,4,12,16,20,21)], PreCapPeriod.CHFEUR$CHFEURnext, trainShare)
print(samplingPreCHFEURSMI)
samplingCapCHFEURSMI <- samplingC5(CapPeriod.CHFEUR[-c(2,11,17,4,12,16,20,21)], CapPeriod.CHFEUR$CHFEURnext, trainShare)
print(samplingCapCHFEURSMI)
samplingPostCHFEURSMI <- samplingC5(PostCapPeriod.CHFEUR[-c(2,11,17,4,12,16,20,21)], PostCapPeriod.CHFEUR$CHFEURnext, trainShare)
print(samplingPostCHFEURSMI)
samplingPreCHFEURSMIM <- samplingC5(PreCapPeriod.CHFEUR[-c(2,11,17,3,10,15,9,14,19,21)], PreCapPeriod.CHFEUR$CHFEURdir, trainShare)
print(samplingPreCHFEURSMIM)
samplingCapCHFEURSMIM <- samplingC5(CapPeriod.CHFEUR[-c(2,11,17,3,10,15,9,14,19,21)], CapPeriod.CHFEUR$CHFEURdir, trainShare)
print(samplingCapCHFEURSMIM)
samplingPostCHFEURSMIM <- samplingC5(PostCapPeriod.CHFEUR[-c(2,11,17,3,10,15,9,14,19,21)], PostCapPeriod.CHFEUR$CHFEURdir, trainShare)
print(samplingPostCHFEURSMIM)
samplingPreCHFEURSPIEX <- samplingC5(PreCapPeriod.CHFEUR[-c(3,10,15,4,12,16,9,14,19,20,21)], PreCapPeriod.CHFEUR$CHFEURnext, trainShare)
print(samplingPreCHFEURSPIEX)
samplingCapPeriodCHFEURSPIEX <- samplingC5(CapPeriod.CHFEUR[-c(3,10,15,4,12,16,9,14,19,20)], CapPeriod.CHFEUR$CHFEURnext, trainShare)
print(samplingCapPeriodCHFEURSPIEX)
samplingPostCHFEURSPIEX <- samplingC5(PostCapPeriod.CHFEUR[-c(3,10,15,4,12,16,9,14,19,20)], PostCapPeriod.CHFEUR$CHFEURnext, trainShare)
print(samplingPostCHFEURSPIEX)
