chart.Histogram(Returns5050, main = "50/50", methods = c("add.density"), xlim = c(-0.2, 0.2))
chart.Histogram(TVret, main = "Target Volatility", methods = c("add.density", "add.normal"), xlim =  c(-0.20, 0.20))
chart.Histogram(SP500returns, main = "SP500", methods = c("add.density", "add.normal"), xlim = c(-0.2, 0.2))
chart.Histogram(Returns5050, main = "50/50", methods = c("add.density", "add.normal"), xlim = c(-0.2, 0.2))
dev.off()
chart.Histogram(TVret, main = "Target Volatility", methods = c("add.density", "add.normal"), xlim =  c(-0.20, 0.20))
chart.Histogram(SP500returns, main = "SP500", methods = c("add.density", "add.normal"), xlim = c(-0.2, 0.2))
chart.Histogram(SP500returns, main = "SP500", methods = c("add.density", "add.normal"), xlim = c(-0.2, 0.2))
chart.Histogram(Returns5050, main = "50/50", methods = c("add.density", "add.normal"), xlim = c(-0.2, 0.2))
chart.Histogram(TVret, main = "Target Volatility", methods = c("add.density", "add.normal"))
chart.Histogram(SP500returns, main = "SP500", methods = c("add.density", "add.normal"))
chart.Histogram(TVret, main = "Target Volatility", methods = c("add.density", "add.normal"), xlim = c(-0.2, 0.2, by = 0.5))
?xlim
chart.Histogram(TVret, main = "Target Volatility", methods = c("add.density", "add.normal"), xlim = c(-0.2, 0.2))
chart.Histogram(SP500returns, main = "SP500", methods = c("add.density", "add.normal"))
chart.Histogram(SP500returns, main = "SP500", methods = c("add.density", "add.normal"))
chart.Histogram(Returns5050, main = "50/50", methods = c("add.density", "add.normal"))
chart.Histogram(TVret, main = "Target Volatility", methods = c("add.density", "add.normal"), xlim = c(-0.2, 0.2))
chart.Histogram(TVret, main = "Target Volatility", methods = c("add.density"), xlim = c(-0.2, 0.2))
chart.Histogram(SP500returns, main = "SP500", methods = c("add.density"))
chart.Histogram(Returns5050, main = "50/50", methods = c("add.density"))
chart.Histogram(TVret, main = "Target Volatility", methods = c("add.density"), xlim = c(-0.2, 0.2))
chart.Histogram(SP500returns, main = "SP500", methods = c("add.density"), xlim = c(-0.2, 0.2))
chart.Histogram(Returns5050, main = "50/50", methods = c("add.density"), xlim = c(-0.2, 0.2))
chart.Histogram(TVret, main = "Target Volatility", methods = c("add.density"), xlim = c(-0.2, 0.2))
chart.Histogram(SP500returns, main = "SP500", methods = c("add.density"), xlim = c(-0.2, 0.2))
chart.Histogram(Returns5050, main = "50/50", methods = c("add.density"), xlim = c(-0.2, 0.2))
chart.Histogram(TVret, main = "Target Volatility", methods = c("add.density"), xlim = c(-0.2, 0.2))
chart.Histogram(SP500returns, main = "SP500", methods = c("add.density"), xlim = c(-0.2, 0.2))
chart.Histogram(Returns5050, main = "50/50", methods = c("add.density"), xlim = c(-0.2, 0.2))
chart.relativePerformance(TVret, SP500returns)
s
charts.relativePerformance(TVret, SP500returns)
charts.RelativePerformance(TVret, SP500returns)
chart.RelativePerformance(TVret, SP500returns)
chart.RelativePerformance(Returns)
table.DownsideRisk(Returns)
table.AnnualizedReturns(Returns)
charts.PerformanceSummary(Returns, main = "Performance Graphs") # Create a performance summary graph
charts.RollingPerformance(Returns) # Create a rolling performance summary graph
#############Installing relevant packages ####################
library(PortfolioAnalytics)
library(zoo)
library(tseries)
library(rvest)
library(ROI)
library(ROI.plugin.quadprog)
library(nloptr)
library(ROI.plugin.alabama)
library(ROI.plugin.ecos)
library(ROI.plugin.glpk)
library(ROI.plugin.ipop)
library(ROI.models.miplib)
library(ROI.plugin.msbinlp)
library(ROI.plugin.nloptr)
library(ROI.plugin.optimx)
library(ROI.plugin.neos)
library(ROI.plugin.scs)
library(ROI.plugin.qpoases)
library(quantmod)
library(roll)
############ Benchmark data #########################
############### Downloading universe S&P 500 ############################
# Getting all tickers of the S&P 500 constituents
url <- "https://en.wikipedia.org/wiki/List_of_S%26P_500_companies"
SP500ticker <- url %>%
read_html() %>%
html_nodes(xpath='//*[@id="mw-content-text"]/div/table[1]') %>%
html_table()
SP500ticker <- SP500ticker[[1]]
SP500ticker <- SP500ticker[,2]
ticker.list <- c("MMM", "AMGN", "AXP", "AAPL", "CSCO", "CBS", "KO", "CL", "XOM", "GS", "GE", "K",
"JNJ", "JPM", "NOC", "PFE", "ORCL", "VZ", "WMT", "C")
Pricedata <- get.hist.quote(instrument=ticker.list[1], start="2000-01-01",
end= Sys.Date(), quote="AdjClose",
provider="yahoo", origin="1970-01-01",
compression="d", retclass="zoo")
for (ticker in ticker.list[2:length(ticker.list)]) {
tmp <- get.hist.quote(instrument=ticker, start="2000-01-01",
end= Sys.Date(), quote="AdjClose",
provider="yahoo", origin="1970-01-01",
compression="d", retclass="zoo")
Pricedata <- merge.zoo(Pricedata,tmp)
}
colnames(Pricedata) <- ticker.list
head(Pricedata)
# Calculating the log returns of the series
logret <- diff(log(Pricedata))
logret <- logret[!is.na(apply(logret,1,sum)),]
# Defining the log return series for optimization
logretTraining <- logret[1:250]
# Defining the log return series for backtesting
logretTest <- logret[251:nrow(logret)]
### Timeseries starts at 19.11.2013
####################################### Defining portfolios and calculating returns for buy and hold strategies #############################
############################# Creating 1/n portfolio ##########################################################
Nweight <- NA
for(i in 1:length(ticker.list)) {
Nweight[i] <- 1/length(ticker.list)
}
Nret <- Return.portfolio(logretTest, weights = Nweight)
############################## Creating Minimum Variance Portfolio of the universe #############################
portf.minvar <- portfolio.spec(assets=ticker.list)
portf.minvar <- add.constraint(portfolio=portf.minvar,type = "weight_sum", min_sum = 0.99, max_sum = 1.01)
portf.minvar <- add.constraint(portfolio=portf.minvar, type= "long_only")
portf.minvar <- add.objective(portfolio=portf.minvar, type="risk", name="StdDev")
portf.minvar
opt.MinVar <- optimize.portfolio(R=logretTraining, portfolio= portf.minvar,
optimize_method="ROI",trace=TRUE)
opt.MinVar$weights
minVarRet <- Return.portfolio(logretTest, weights = opt.MinVar$weights)
########################### Maximum Sharpe ratio portfolio #########################################################
portf.maxsharpe <- portfolio.spec(assets=ticker.list)
portf.maxsharpe <- add.constraint(portfolio=portf.maxsharpe, type = "weight_sum",min_sum = 0.99, max_sum = 1.01)
portf.maxsharpe <- add.constraint(portfolio=portf.maxsharpe, type="long_only")
portf.maxsharpe <- add.objective(portfolio=portf.maxsharpe, type="return", name="mean")
portf.maxsharpe <- add.objective(portfolio=portf.maxsharpe, type="risk", name="StdDev")
maxSRportf <- optimize.portfolio(R=logretTraining, portfolio=portf.maxsharpe,
optimize_method="ROI",
maxSR=TRUE, trace=TRUE)
maxSRportf$weights
# Calculating returns of the maximum sharpe ratio portfolio
maxSRret <- Return.portfolio(logretTest, weights = maxSRportf$weights) # Calculating returns of Max. Sharpe portfolio
############################ Risk Parity Portfolio #########################################################
# objective function
eval_f <- function(w,cov.mat,vol.target) {
vol <- sqrt(as.numeric(t(w) %*% cov.mat %*% w))
marginal.contribution <- cov.mat %*% w / vol
return( sum((vol/length(w) - w * marginal.contribution)^2) )
}
# numerical gradient approximation for solver
eval_grad_f <- function(w,cov.mat,vol.target) {
out <- w
for (i in 0:length(w)) {
up <- dn <- w
up[i] <- up[i]+.0001
dn[i] <- dn[i]-.0001
out[i] = (eval_f(up,cov.mat=cov.mat,vol.target=vol.target) - eval_f(dn,cov.mat=cov.mat,vol.target=vol.target))/.0002
}
return(out)
}
Riskparity <- function(returns){
std <- apply(logretTraining,2,sd)
cov.mat <- cov(logretTraining)
x0 <- 1/std/sum(1/std)
RPportf <- nloptr( x0=x0,
eval_f=eval_f,
eval_grad_f=eval_grad_f,
eval_g_eq=function(w,cov.mat,vol.target) { sum(w) - 1 },
eval_jac_g_eq=function(w,cov.mat,vol.target) { rep(1,length(std)) },
lb=rep(0,length(std)),ub=rep(1,length(std)),
opts = list("algorithm"="NLOPT_LD_SLSQP","print_level" = 3,"xtol_rel"=1.0e-8,"maxeval" = 1000),
cov.mat = cov.mat,vol.target=.2 )
}
RPportf <- Riskparity(logretTraining)
# total contributions to risk are equal
RPportf$solution * cov.mat %*% RPportf$solution
# total portfolio risk
sum(RPportf$solution * cov.mat %*% RPportf$solution)
# Calculating returns of the RP portfolio
RPweights <- RPportf$solution
RPret <- Return.portfolio(logretTest, weights = RPweights)
############## Creating plot for the static portfolios ########################################################
Portfolioreturns <- merge.xts(Nret, minVarRet, maxSRret, RPret) # Combining the returns timeseries of the different portfolios
colnames(Portfolioreturns) <- c("1/N","MinVar", "MaxSR", "RiskParity")
charts.PerformanceSummary(Portfolioreturns)
# Mean returns
mean_static <- apply(Portfolioreturns, 2, FUN = mean)
mean_static
# Realized standard deviations
sd_static <- apply(Portfolioreturns, 2, FUN = sd)
sd_static
############################# Creating dynamic portfolio strategies and backtesting #############################
frequency <- "quarters" # Rebalancing frequency
training <- 250 # Training period
############################ Minimum Variance #######################################
MinVar_dynamic <- optimize.portfolio.rebalancing(logret, portf.minvar, optimize_method = "ROI",
training_period = training, rolling_window = 90, rebalance_on = frequency,
traceDE = 0)
MinVar_dynamic_ret <- summary(MinVar_dynamic)$portfolio_returns
######################### Maximum Sharpe ratio ######################################
MaxSR_dynamic <- optimize.portfolio.rebalancing(logret, portf.maxsharpe, optimize_method = "ROI",
training_period = training, rebalance_on = frequency, rolling_window = 90, search_size = 5000,
traceDE = 0)
MaxSR_dynamic_ret <- summary(MaxSR_dynamic)$portfolio_returns
Portfolioreturns_dynamic <- merge.xts(MinVar_dynamic_ret, MaxSR_dynamic_ret)
colnames(Portfolioreturns_dynamic) <- c("MinVar", "MaxSR")
charts.PerformanceSummary(Portfolioreturns_dynamic)
charts.RollingPerformance(Portfolioreturns_dynamic)
###################### Risk parity ##################################################
RP_dynamic_ret <- Return.portfolio(logret, weights = Riskparity)
Riskparity <- function(returns, width, by){
ep <- endpoints(logret, "quarters")
std <- period.apply(logret, INDEX = ep, FUN = sd)
cov.mat <- rollapply(returns,2, FUN = cov, width = width, by = by)
x0 <- 1/std/sum(1/std)
RPportf <- nloptr( x0=x0,
eval_f=eval_f,
eval_grad_f=eval_grad_f,
eval_g_eq=function(w,cov.mat,vol.target) { sum(w) - 1 },
eval_jac_g_eq=function(w,cov.mat,vol.target) { rep(1,length(std)) },
lb=rep(0,length(std)),ub=rep(1,length(std)),
opts = list("algorithm"="NLOPT_LD_SLSQP","print_level" = 3,"xtol_rel"=1.0e-8,"maxeval" = 1000),
cov.mat = cov.mat,vol.target=.2 )
}
riskparity = Riskparity(logret)
std <- period.apply(logret, INDEX = ep, FUN = sd)
cov.mat <- roll_cov(logret, width = ep)
############## SP500 data ####################################################################
SP500 <- get.hist.quote(instrument= "SPY", start="2000-01-01",
end= Sys.Date(), quote="AdjClose",
provider="yahoo", origin="1970-01-01",
compression="w", retclass="zoo") # Downloading weekly data for the SP500 index
SP500ret <- diff(log(SP500)) # Calculating log returns
colnames(SP500) <- "SP500" # Naming the columns
targetvolweights <- function(target, returns, rebalancing_period, leverage){
# This function calculates the weights of the target volatility portfolio.
# Arguments:
# target:                   Annual target volatility level
# returns:                  xts object containing the returns of the risky portfolio
# rebalancing period:       Periods a rebalancing should take place ("days", "weeks", "months", "quarters", "years")
#
# Output:
# weights:                  An xts object containing the weights and the respective dates of the rebalancing
ep <- endpoints(returns, rebalancing_period)
target <- target/sqrt(252)
vola <- period.apply(returns, INDEX = ep ,FUN = sd)
weights <- as.zoo(target/vola)
if (leverage == 0)  {
weights[weights > 1] <- 1 # Long only restriction
} else {
}
weights
}
weightsrisky <- as.xts(targetvolweights(0.2, SP500ret, "quarters", leverage = 0)) # Weights in the risky asset
weightsrf <- 1-weightsrisky # Respective weights in the money market account
weightsPF <- merge.xts(weightsrisky, weightsrf) # Creating a Timeseries with the weights
colnames(weightsPF) <- c("SP500", "Money Market") # Naming columns.
SP500returns <- SP500ret[-c(1:12),] # Creating SP500 returns vector for the risky asset
Moneymarket <- as.zoo(0.00) # Defining the return vector for the money market
Portfret <- merge.zoo(SP500ret, Moneymarket)[-1,] # Merge the returns of the SP500 and the money market
colnames(Portfret) <- c("SP500", "Money Market") # Naming the columns
Portfret <- na.fill(Portfret,0) # Fill the NAs with 0
TVret <- Return.portfolio(Portfret, weights=weightsPF) # Calculating the rebalancing strategy returns of the Portfolio
colnames(TVret) <- "Target Volatility" # Naming column
Returns5050 <- SP500returns * 0.5
Returns <- merge.xts(TVret, SP500returns, Returns5050) # Create time series object with the return series of the 3 portfolios
colnames(Returns) <- c("Target Volatility", "SP500", "50/50") # Naming columns
charts.PerformanceSummary(Returns, main = "Performance Graphs") # Create a performance summary graph
charts.RollingPerformance(Returns) # Create a rolling performance summary graph
# Titel:        C5.0 Decision Tree Analysis: Effect of SNB Policy on SMI Mid (2011 - 2018)
# Course:       Financial Economics Reserach Seminar
# Institute:    University of St. Gallen
# Authors:      Julian Woessner, Lars Stauffenegger
# Date:         March 2019
# Version:      5.1
# Description:  This File contains the statistical analysis of the monetary and
#               financial market data for the research seminar in Financial Economics
# installing packages
library(PerformanceAnalytics)
library(AER)
library(C50)
library(Hmisc)
library(jtools)
library(huxtable)
library(zoo)
library(ggplot2)
library(psych)
# setting working directory
getwd()
#setwd("C:/Users/Lars Stauffenegger/Documents/MBF Unisg/Research Seminar/ResSem19")
setwd("/Users/julianwossner/Desktop/MBF/Vorlesungen_2._Semester/Research_Seminar_Financial_Economics/Daten/ResSem19")
#setwd("C:/Users/LST/Documents/Uni/Research Seminar/ResSem19")
# Data Import --------------------------------------
# Index Data
dataind04 <- read.csv2("Indices from 04.csv", header = TRUE , sep = ";") #reading in data
dataind04 <- transform(dataind04, Date = as.Date(Date, format = "%Y-%m-%d") ,SNBSD = as.numeric(as.character(SNBSD)), SMI = as.numeric(as.character(SMI)),
SPIEX = as.numeric(as.character(SPIEX)), SMI.Mid = as.numeric(as.character(SMI.Mid)), CHF.USD = as.numeric(as.character(CHF.USD)), CHF.EUR = as.numeric(as.character(CHF.EUR))) # Converting numbers into numeric format and date column to date format
dataind04 <- dataind04[-c(1:196),]
# SNB Data
dataind08 <- read.csv2("Data_for_import_Indices_from_08.csv", header = TRUE , sep = ";") #reading in data
## Data Cleaning --------------------------------------
# Transforming the columns of the data frame into numeric
dataind08 <- transform(dataind08, Date = as.Date(Date, format = "%Y-%m-%d") ,SMI = as.numeric(as.character(SMI)), SDofDomBanks = as.numeric(as.character(SDofDomBanks)),
SPIEX = as.numeric(as.character(SPIEX)), SMIMid = as.numeric(as.character(SMIMid)), Gov10yr = as.numeric(as.character(Gov10yr)),
Gov3yr = as.numeric(as.character(Gov3yr)), Libor3M_CHF = as.numeric(as.character(Libor3M_CHF)), CHFUSD = as.numeric(as.character(CHFUSD)),
CHFEUR = as.numeric(as.character(CHFEUR))) # Converting numbers into numeric format and date column to date format
dataind08[is.na(dataind08)] <- 0 # Replacing NA with 0, NA indruduced due to #DIV/0! Entry in excel.
str(dataind08)
## Return calculations --------------
# Stock data
RetSMI <-  diff(log(dataind08$SMI)) # Weekly returns of the SMI
RetSPIEX <- diff(log(dataind08$SPIEX)) # Weekly returns of the SPIEX
RetSMIMid <- diff(log(dataind08$SMIMid)) # Weekly returns of the SMIMid
# SNB Data
ChgSDdomBanks <- diff(dataind08$SDofDomBanks)/dataind08$SDofDomBanks[-length(dataind08$SDofDomBanks)] # Sight deposits of dom. Banks
# Creating Returns data set
dataret <- dataind08[-1,]
dataret <- cbind(dataret, RetSMI, RetSPIEX, RetSMIMid, ChgSDdomBanks)
# Inclusions
SMIdata <- dataret[,-c(3,5,12,13)]  # Includes SMI as only stock indice
SPIEXdata <- dataret[,-c(4,5,11,13)] # Includes SPI Extra as only stock indice
SMIMdata <- dataret[, -c(3,4,11,12)] # Includes the SMI Mid as only stock indice
## Classification: Up / Down --------------------------------------
# SMI data
SMIdata$SMIdir <- as.factor(ifelse(SMIdata$RetSMI > 0, "up", ifelse(SMIdata$RetSMI < 0, "down", "no change" ))) # Including a column with up, down factors
SMIdata$SDdomBanksdir <- as.factor(ifelse(SMIdata$ChgSDdomBanks > 0, "up", ifelse(SMIdata$ChgSDdomBanks < 0, "down", "no change" )))
SMIdata$SMI.FC <- as.factor(ifelse(SMIdata$RetSMI > 0, "up", ifelse(SMIdata$RetSMI < 0, "down", "no change" ))) # Reproduce the column SMIM.Dir
SMIdata$SMI.FC[1:574] <- SMIdata$SMI.FC[2:575] # Lag the series to produce forecasts
SMIdata <-SMIdata[-575,] # delete the last row
# SPIEX data
SPIEXdata$SPIEXdir <- as.factor(ifelse(SPIEXdata$RetSPIEX > 0, "up", ifelse(SPIEXdata$RetSPIEX < 0, "down", "no change" ))) # Including a column with up, down factors
SPIEXdata$SDdomBanksdir <- as.factor(ifelse(SPIEXdata$ChgSDdomBanks > 0, "up", ifelse(SPIEXdata$ChgSDdomBanks < 0, "down", "no change" )))
SPIEXdata$SPIEX.FC <- as.factor(ifelse(SPIEXdata$RetSPIEX > 0, "up", ifelse(SPIEXdata$RetSPIEX < 0, "down", "no change" ))) # Reproduce the column SMIM.Dir
SPIEXdata$SPIEX.FC[1:574] <- SPIEXdata$SPIEX.FC[2:575] # Lag the series to produce forecasts
SPIEXdata <-SPIEXdata[-575,] # delete the last row
# SMImid data
SMIMdata$SMIdir <- as.factor(ifelse(SMIMdata$RetSMIMid > 0, "up", ifelse(SMIMdata$RetSMIMid < 0, "down", "no change" ))) # Including a column with up, down factors
SMIMdata$SDdomBanksdir <- as.factor(ifelse(SMIMdata$ChgSDdomBanks > 0, "up", ifelse(SMIMdata$ChgSDdomBanks < 0, "down", "no change" )))
SMIMdata$SMIM.FC <- as.factor(ifelse(SMIMdata$RetSMIMid > 0, "up", ifelse(SMIMdata$RetSMIMid < 0, "down", "no change" ))) # Reproduce the column SMIM.Dir
SMIMdata$SMIM.FC[1:574] <- SMIMdata$SMIM.FC[2:575] # Lag the series to produce forecasts
SMIMdata <-SMIMdata[-575,] # delete the last row
## Plotting and descriptive statistics --------------------------------------
# Indices
pdf("plot_SD_ExchangeRate.pdf", height = 20, width = 15)
par(mfrow = c(5,1))
plot(dataind04$Date, dataind04$SNBSD,  type = "l", xlab = "Date", ylab = "Index", main = "SNB Sight Deposits (in Mio. CHF)") # SNB Sight Deposits
plot(dataind04$Date, dataind04$CHF.EUR,  type = "l", xlab = "Date", ylab = "Index", main = "CHF/EUR Exchange rate") # CHF/EUR Exchange rate
plot(dataind04$Date, dataind04$SMI, type = "l", xlab = "Date", ylab = "Index", main = "SMI") # SMI
plot(dataind04$Date, dataind04$SPIEX,  type = "l", xlab = "Date", ylab = "Index", main = "SPI Extra") # SPI Extra
plot(dataind04$Date, dataind04$SMI.Mid,  type = "l", xlab = "Date", ylab = "Index", main = "SMI Mid") # SMI Mid
dev.off()
# Descriptive statistics
# All Variables
DataWoDates <- dataret[,-1] # Delete the Date column
# PreCap period
descr.PreCap <- describe(DataWoDates[1:186,])
mean(DataWoDates[1:186,]$RetSMI)
mean(DataWoDates[1:186,]$RetSPIEX)
mean(DataWoDates[1:186,]$RetSMIMid)
min(DataWoDates[1:186,]$Libor3M_CHF)
min(DataWoDates[1:186,]$ChgSDdomBanks)
# Cap period
descr.Cap <- describe(DataWoDates[187:363,])
mean(DataWoDates[187:363,]$RetSMI)
mean(DataWoDates[187:363,]$RetSPIEX)
mean(DataWoDates[187:363,]$RetSMIMid)
mean(DataWoDates[187:363,]$ChgSDdomBanks)
# PostCap period
descr.PostCap <- describe(DataWoDates[364:575,])
mean(DataWoDates[364:575,]$RetSMI)
mean(DataWoDates[364:575,]$RetSPIEX)
mean(DataWoDates[364:575,]$RetSMIMid)
mean(DataWoDates[364:575,]$ChgSDdomBanks)
## Correlations --------------------------------------
# Indices & SNB Sight Deposits
cor.ind <- cor(dataind04[,-1], method = "spearman")
Cor <- cor(DataWoDates, method = "spearman") # calculate the Correlation Matrix Spearman
# PreCapPeriods
PreCapPeriod.cor <- cor(DataWoDates[1:186,], method = "spearman")
# During CapPeriods
CapPeriod.cor <- cor(DataWoDates[187:363, ], method = "spearman")
# PostCapPeriod CapPeriods
PostCapPeriod.cor <- cor(DataWoDates[364:575,], method = "spearman")
## Data extention & C50 algorithm --------------------------------------
# Using C5.0 algorithm
# SMI Stock indice --------------------------------------
# Defining the Periods for the three stock indices
# Three Periods: Before, During and Post Cap (row 363 is the 16th of Jan, i.e. 1 day after the removal of the Cap, row 187 is the 2nd september, i.e. 4 days before the introduction of the cap)
PreCapPeriod.SMI <- SMIdata[1:186,-1] # Data set from 2008 - 02 - 08 to 2011 - 08 - 26 (PreCapPeriod phase)
CapPeriod.SMI <- SMIdata[187:363,-1] # Data set from 2011 - 09 - 02 to 2015 - 01 - 15 (CapPeriod phase)
PostCapPeriod.SMI <- SMIdata[364:575,-1] # Data set from 2015 - 01 - 22 to 2019 - 02 - 22 (PostCapPeriod CapPeriod phase)
# Implement the model for the PreCap, CapPeriod phase and the PostCapPeriod
# CapPeriod phase to see how much more the SNB variables are used to define rules
# PreCapPeriod Model describing SMI Forecast (column 10)
PreCapPeriod.SMI.model <- C5.0(PreCapPeriod.SMI[-12], PreCapPeriod.SMI$SMI.FC, rules = TRUE, trials = 100)
PreCapPeriod.SMI.model
summary(PreCapPeriod.SMI.model) # SDdomBanksdir 9.14%
# CapPeriod Model describing SMI Forecast (column 10)
CapPeriod.SMI.model <- C5.0(CapPeriod.SMI[-12], CapPeriod.SMI$SMI.FC, rules = TRUE, trials = 100)
CapPeriod.SMI.model
summary(CapPeriod.SMI.model) # 100% SDdomBanksdir, 41.24% ChgSDdomBanks
# PostCapPeriod Model describing SMI Forecast (column 10)
PostCapPeriod.SMI.model <- C5.0(PostCapPeriod.SMI[-12], PostCapPeriod.SMI$SMI.FC, rules = TRUE, trials = 100)
PostCapPeriod.SMI.model
summary(PostCapPeriod.SMI.model) # 6.6% SDdomBanksdir
# SPI Extra Stock indice --------------------------------
# Defining the Periods for the three stock indices
# Three Periods: Before, During and Post Cap (row 363 is the 16th of Jan, i.e. 1 day after the removal of the Cap, row 187 is the 2nd september, i.e. 4 days before the introduction of the cap)
PreCapPeriod.SPIEX <- SPIEXdata[1:186,-1] # Data set from 2008 - 02 - 08 to 2011 - 08 - 26 (PreCapPeriod phase)
CapPeriod.SPIEX <- SPIEXdata[187:363,-1] # Data set from 2011 - 09 - 02 to 2015 - 01 - 15 (CapPeriod phase)
PostCapPeriod.SPIEX <- SPIEXdata[364:575,-1] # Data set from 2015 - 01 - 22 to 2019 - 02 - 22 (PostCapPeriod CapPeriod phase)
# Implement the model for the PreCap, CapPeriod phase and the PostCapPeriod
# CapPeriod phase to see how much more the SNB variables are used to define rules
# PreCapPeriod Model describing SMI Forecast (column 10)
PreCapPeriod.SPIEX.model <- C5.0(PreCapPeriod.SPIEX[-12], PreCapPeriod.SPIEX$SPIEX.FC, rules = TRUE, trials = 100)
PreCapPeriod.SPIEX.model
summary(PreCapPeriod.SPIEX.model) # 54.84% SDdomBanksdir, 52.15% ChgSDdomBanks
# CapPeriod Model describing SMI Forecast (column 10)
CapPeriod.SPIEX.model <- C5.0(CapPeriod.SPIEX[-12], CapPeriod.SPIEX$SPIEX.FC, rules = TRUE)
CapPeriod.SPIEX.model
summary(CapPeriod.SPIEX.model) # 48.59% ChgSDdomBanks, 2.82% SDdomBanksdir
# PostCapPeriod Model describing SMI Forecast (column 10)
PostCapPeriod.SPIEX.model <- C5.0(PostCapPeriod.SPIEX[-12], PostCapPeriod.SPIEX$SPIEX.FC,rules = TRUE, trials = 100)
PostCapPeriod.SPIEX.model
summary(PostCapPeriod.SPIEX.model) # No usage of SNB data
# SMI Mid Stock indice --------------------------------
# Defining the Periods for the three stock indices
# Three Periods: Before, During and Post Cap (row 363 is the 16th of Jan, i.e. 1 day after the removal of the Cap, row 187 is the 2nd september, i.e. 4 days before the introduction of the cap)
PreCapPeriod.SMIM <- SMIMdata[1:188,-1] # Data set from 2008 - 02 - 08 to 2011 - 08 - 26 (PreCapPeriod phase)
CapPeriod.SMIM <- SMIMdata[187:363,-1] # Data set from 2011 - 09 - 02 to 2015 - 01 - 15 (CapPeriod phase)
PostCapPeriod.SMIM <- SMIMdata[364:575,-1] # Data set from 2015 - 01 - 22 to 2019 - 02 - 22 (PostCapPeriod CapPeriod phase)
# Implement the model for the PreCap, CapPeriod phase and the PostCapPeriod
# CapPeriod phase to see how much more the SNB variables are used to define rules
# PreCapPeriod Model describing SMI Forecast (column 10)
PreCapPeriod.SMIM.model <- C5.0(PreCapPeriod.SMIM[-12], PreCapPeriod.SMIM$SMIM.FC, rules = TRUE, trials = 100)
PreCapPeriod.SMIM.model
summary(PreCapPeriod.SMIM.model) # 14.52% SDdomBanksdir
# CapPeriod Model describing SMI Forecast (column 10)
CapPeriod.SMIM.model <- C5.0(CapPeriod.SMIM[-12], CapPeriod.SMIM$SMIM.FC, rules = TRUE, trials = 100)
CapPeriod.SMIM.model
summary(CapPeriod.SMIM.model) # 50.28% SDdomBanksdir, 2.82% ChgSDdomBanks
# PostCapPeriod Model describing SMI Forecast (column 10)
PostCapPeriod.SMIM.model <- C5.0(PostCapPeriod.SMIM[-12], PostCapPeriod.SMIM$SMIM.FC,rules = TRUE, trials = 100)
PostCapPeriod.SMIM.model
summary(PostCapPeriod.SMIM.model) # 14.15% ChgSDdomBanks, 11.32% SDdomBanksdir
# SMI Stock indice --------------------------------------
# Defining the Periods for the three stock indices
# Three Periods: Before, During and Post Cap (row 363 is the 16th of Jan, i.e. 1 day after the removal of the Cap, row 187 is the 2nd september, i.e. 4 days before the introduction of the cap)
PreCapPeriod.SMI <- SMIdata[1:186,-1] # Data set from 2008 - 02 - 08 to 2011 - 08 - 26 (PreCapPeriod phase)
CapPeriod.SMI <- SMIdata[187:363,-1] # Data set from 2011 - 09 - 02 to 2015 - 01 - 15 (CapPeriod phase)
PostCapPeriod.SMI <- SMIdata[364:575,-1] # Data set from 2015 - 01 - 22 to 2019 - 02 - 22 (PostCapPeriod CapPeriod phase)
# PreCapPeriod Model describing SMI Forecast (column 12)
PreCapPeriod.SMI.model <- C5.0(PreCapPeriod.SMI[-12], PreCapPeriod.SMI$SMI.FC, rules = TRUE, trials = 100)
PreCapPeriod.SMI.model
summary(PreCapPeriod.SMI.model) # SDdomBanksdir 9.14%
# CapPeriod Model describing SMI Forecast (column 12)
CapPeriod.SMI.model <- C5.0(CapPeriod.SMI[-12], CapPeriod.SMI$SMI.FC, rules = TRUE, trials = 100)
CapPeriod.SMI.model
summary(CapPeriod.SMI.model) # 100% SDdomBanksdir, 41.24% ChgSDdomBanks
# PostCapPeriod Model describing SMI Forecast (column 12)
PostCapPeriod.SMI.model <- C5.0(PostCapPeriod.SMI[-12], PostCapPeriod.SMI$SMI.FC, rules = TRUE, trials = 100)
PostCapPeriod.SMI.model
summary(PostCapPeriod.SMI.model) # 6.6% SDdomBanksdir
# SPI Extra Stock indice --------------------------------
# Defining the Periods for the three stock indices
# Three Periods: Before, During and Post Cap (row 363 is the 16th of Jan, i.e. 1 day after the removal of the Cap, row 187 is the 2nd september, i.e. 4 days before the introduction of the cap)
PreCapPeriod.SPIEX <- SPIEXdata[1:186,-1] # Data set from 2008 - 02 - 08 to 2011 - 08 - 26 (PreCapPeriod phase)
CapPeriod.SPIEX <- SPIEXdata[187:363,-1] # Data set from 2011 - 09 - 02 to 2015 - 01 - 15 (CapPeriod phase)
PostCapPeriod.SPIEX <- SPIEXdata[364:575,-1] # Data set from 2015 - 01 - 22 to 2019 - 02 - 22 (PostCapPeriod CapPeriod phase)
# PreCapPeriod Model describing SMI Forecast (column 12)
PreCapPeriod.SPIEX.model <- C5.0(PreCapPeriod.SPIEX[-12], PreCapPeriod.SPIEX$SPIEX.FC, rules = TRUE, trials = 100)
PreCapPeriod.SPIEX.model
summary(PreCapPeriod.SPIEX.model) # 54.84% SDdomBanksdir, 52.15% ChgSDdomBanks
summary(PreCapPeriod.SPIEX.model) # 52.15% ChgSDdomBanks, 17.20% SDdomBanksdir, 2.69% SDofDomBanks
# CapPeriod Model describing SMI Forecast (column 12)
CapPeriod.SPIEX.model <- C5.0(CapPeriod.SPIEX[-12], CapPeriod.SPIEX$SPIEX.FC, rules = TRUE)
CapPeriod.SPIEX.model
summary(CapPeriod.SPIEX.model) # 48.59% ChgSDdomBanks, 2.82% SDdomBanksdir
summary(CapPeriod.SPIEX.model) # 48.59% ChgSDdomBanks, 2.82% SDdomBanksdir
# PostCapPeriod Model describing SMI Forecast (column 12)
PostCapPeriod.SPIEX.model <- C5.0(PostCapPeriod.SPIEX[-12], PostCapPeriod.SPIEX$SPIEX.FC,rules = TRUE, trials = 100)
PostCapPeriod.SPIEX.model
summary(PostCapPeriod.SPIEX.model) # No usage of SNB data
# SMI Mid Stock indice --------------------------------
# Defining the Periods for the three stock indices
# Three Periods: Before, During and Post Cap (row 363 is the 16th of Jan, i.e. 1 day after the removal of the Cap, row 187 is the 2nd september, i.e. 4 days before the introduction of the cap)
PreCapPeriod.SMIM <- SMIMdata[1:188,-1] # Data set from 2008 - 02 - 08 to 2011 - 08 - 26 (PreCapPeriod phase)
CapPeriod.SMIM <- SMIMdata[187:363,-1] # Data set from 2011 - 09 - 02 to 2015 - 01 - 15 (CapPeriod phase)
PostCapPeriod.SMIM <- SMIMdata[364:575,-1] # Data set from 2015 - 01 - 22 to 2019 - 02 - 22 (PostCapPeriod CapPeriod phase)
# PreCapPeriod Model describing SMI Forecast (column 12)
PreCapPeriod.SMIM.model <- C5.0(PreCapPeriod.SMIM[-12], PreCapPeriod.SMIM$SMIM.FC, rules = TRUE, trials = 100)
PreCapPeriod.SMIM.model
summary(PreCapPeriod.SMIM.model) # 14.52% SDdomBanksdir
# PreCapPeriod Model describing SMI Forecast (column 12)
PreCapPeriod.SMIM.model <- C5.0(PreCapPeriod.SMIM[-12], PreCapPeriod.SMIM$SMIM.FC, rules = TRUE, trials = 100)
PreCapPeriod.SMIM.model
summary(PreCapPeriod.SMIM.model) # 14.52% SDdomBanksdir
# CapPeriod Model describing SMI Forecast (column 12)
CapPeriod.SMIM.model <- C5.0(CapPeriod.SMIM[-12], CapPeriod.SMIM$SMIM.FC, rules = TRUE, trials = 100)
CapPeriod.SMIM.model
summary(CapPeriod.SMIM.model) # 50.28% SDdomBanksdir, 2.82% ChgSDdomBanks
summary(PreCapPeriod.SMIM.model) # 14.52% SDdomBanksdir
# PreCapPeriod Model describing SMI Forecast (column 12)
PreCapPeriod.SMIM.model <- C5.0(PreCapPeriod.SMIM[-12], PreCapPeriod.SMIM$SMIM.FC, rules = TRUE)
PreCapPeriod.SMIM.model
summary(PreCapPeriod.SMIM.model) # 14.52% SDdomBanksdir
# SMI Mid Stock indice --------------------------------
# Defining the Periods for the three stock indices
# Three Periods: Before, During and Post Cap (row 363 is the 16th of Jan, i.e. 1 day after the removal of the Cap, row 187 is the 2nd september, i.e. 4 days before the introduction of the cap)
PreCapPeriod.SMIM <- SMIMdata[1:188,-1] # Data set from 2008 - 02 - 08 to 2011 - 08 - 26 (PreCapPeriod phase)
# SMI Mid Stock indice --------------------------------
# Defining the Periods for the three stock indices
# Three Periods: Before, During and Post Cap (row 363 is the 16th of Jan, i.e. 1 day after the removal of the Cap, row 187 is the 2nd september, i.e. 4 days before the introduction of the cap)
PreCapPeriod.SMIM <- SMIMdata[1:186,-1] # Data set from 2008 - 02 - 08 to 2011 - 08 - 26 (PreCapPeriod phase)
CapPeriod.SMIM <- SMIMdata[187:363,-1] # Data set from 2011 - 09 - 02 to 2015 - 01 - 15 (CapPeriod phase)
PostCapPeriod.SMIM <- SMIMdata[364:575,-1] # Data set from 2015 - 01 - 22 to 2019 - 02 - 22 (PostCapPeriod CapPeriod phase)
# PreCapPeriod Model describing SMI Forecast (column 12)
PreCapPeriod.SMIM.model <- C5.0(PreCapPeriod.SMIM[-12], PreCapPeriod.SMIM$SMIM.FC, rules = TRUE)
PreCapPeriod.SMIM.model
summary(PreCapPeriod.SMIM.model) # 14.52% SDdomBanksdir
# CapPeriod Model describing SMI Forecast (column 12)
CapPeriod.SMIM.model <- C5.0(CapPeriod.SMIM[-12], CapPeriod.SMIM$SMIM.FC, rules = TRUE, trials = 100)
CapPeriod.SMIM.model
summary(CapPeriod.SMIM.model) # 48.02% SDdomBanksdir, 2.82% ChgSDdomBanks
# PostCapPeriod Model describing SMI Forecast (column 12)
PostCapPeriod.SMIM.model <- C5.0(PostCapPeriod.SMIM[-12], PostCapPeriod.SMIM$SMIM.FC,rules = TRUE, trials = 100)
PostCapPeriod.SMIM.model
# PostCapPeriod Model describing SMI mid Forecast (column 12)
PostCapPeriod.SMIM.model <- C5.0(PostCapPeriod.SMIM[-12], PostCapPeriod.SMIM$SMIM.FC,rules = TRUE, trials = 100)
PostCapPeriod.SMIM.model
summary(PostCapPeriod.SMIM.model) # 14.15% ChgSDdomBanks, 11.32% SDdomBanksdir
