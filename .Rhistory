intervention  <- subset(inputData, CHFEURprev > interventionThreshold)
noIntervention <- subset(inputData, CHFEURprev <= interventionThreshold)
}
else
{
intervention  <- subset(inputData, CHFEUR > interventionThreshold)
noIntervention <- subset(inputData, CHFEUR <= interventionThreshold)
}
}
# Variable to be determined by C5.0
interventionTarget <- intervention[,dependentVariable]
noInterventionTarget <- noIntervention[,dependentVariable]
# Remove target variable from input set
intervention[,dependentVariable]   <- NULL
noIntervention[,dependentVariable] <- NULL
# Remove Chaange of Side deposits
intervention[,"ChgSDdomBanks"]   <- NULL
noIntervention[,"ChgSDdomBanks"] <- NULL
if (sampleSize == 0)
{
# Run C5.0
interventionResults <- C5.0(intervention, interventionTarget,
rules = TRUE, trials = 100)
noInterventionResults <- C5.0(noIntervention, noInterventionTarget,
rules = TRUE, trials = 100)
print(summary(interventionResults))
print(summary(noInterventionResults))
}
else
{
# Run C5.0 Sampling
interventionResults   <- samplingC5(intervention,interventionTarget, sampleSize, typeOfImportance)
noInterventionResults <- samplingC5(noIntervention, noInterventionTarget, sampleSize, typeOfImportance)
welchSDDir <- t.test(interventionResults$ImpSDDir, noInterventionResults$ImpSDDir)
}
# Output of Object
results <- c(Int = interventionResults, NoInt = noInterventionResults, WelchSDDirPValue = WelchSDDir.p.value)
attr(results, "class") <- "interventionC5"
results
}
# Intervention
InterventionCurrentSMI_Fx1.20 <- interventionC5(allData[currentSMIColumns], dependentVariable, 0.8333, sampleSize, "FX", typeOfImportance)
welchSDDir
View(welchSDDir)
View(welchSDDir)
welchSDDir$p.value
interventionC5 <- function(inputData, dependentVariable, interventionThreshold, sampleSize, typeOfThreshold, typeOfImportance){
# Data set for Intervention & no Intervention weeks
if (typeOfThreshold == "relativeSD")
{
intervention  <- subset(inputData, abs(ChgSDdomBanks) > interventionThreshold)
noIntervention <- subset(inputData, abs(ChgSDdomBanks) <= interventionThreshold)
}
if (typeOfThreshold == "nominalSD")
{
intervention  <- subset(inputData, abs(ChgSDdomBanks*SDofDomBanks/(1+ChgSDdomBanks)) > interventionThreshold)
noIntervention <- subset(inputData, abs(ChgSDdomBanks*SDofDomBanks/(1+ChgSDdomBanks)) <= interventionThreshold)
}
if (typeOfThreshold == "FX")
{
if (dependentVariable == "CHFEURdir")
{
intervention  <- subset(inputData, CHFEURprev > interventionThreshold)
noIntervention <- subset(inputData, CHFEURprev <= interventionThreshold)
}
else
{
intervention  <- subset(inputData, CHFEUR > interventionThreshold)
noIntervention <- subset(inputData, CHFEUR <= interventionThreshold)
}
}
# Variable to be determined by C5.0
interventionTarget <- intervention[,dependentVariable]
noInterventionTarget <- noIntervention[,dependentVariable]
# Remove target variable from input set
intervention[,dependentVariable]   <- NULL
noIntervention[,dependentVariable] <- NULL
# Remove Chaange of Side deposits
intervention[,"ChgSDdomBanks"]   <- NULL
noIntervention[,"ChgSDdomBanks"] <- NULL
if (sampleSize == 0)
{
# Run C5.0
interventionResults <- C5.0(intervention, interventionTarget,
rules = TRUE, trials = 100)
noInterventionResults <- C5.0(noIntervention, noInterventionTarget,
rules = TRUE, trials = 100)
print(summary(interventionResults))
print(summary(noInterventionResults))
}
else
{
# Run C5.0 Sampling
interventionResults   <- samplingC5(intervention,interventionTarget, sampleSize, typeOfImportance)
noInterventionResults <- samplingC5(noIntervention, noInterventionTarget, sampleSize, typeOfImportance)
welchSDDir <- t.test(interventionResults$ImpSDDir, noInterventionResults$ImpSDDir)
}
# Output of Object
results <- c(Int = interventionResults, NoInt = noInterventionResults, WelchSDDirPValue = welchSDDir$p.value)
attr(results, "class") <- "interventionC5"
results
}
# Intervention
InterventionCurrentSMI_Fx1.20 <- interventionC5(allData[currentSMIColumns], dependentVariable, 0.8333, sampleSize, "FX", typeOfImportance)
InterventionCurrentSMI_Fx1.20
samplingC5 <- function(independentVariables, targetVariable, sampleSize, typeOfImportance) {
sumVariableImportance = setNames(data.frame(matrix(ncol = length(names(independentVariables)), nrow = 1)), names(independentVariables))
errorTrain = vector()
errorTest = vector()
for (i in 1:1000) {
model <- C5.0(independentVariables, targetVariable,
rules = TRUE, trials = 100,
control = C5.0Control(sample=sampleSize))
#summary(model)
# Only count model if attributes have been used (zero classifications don't count)
usageIndex <- grep("Attribute usage:", model$output,
fixed = TRUE)
if (length(usageIndex) != 0)
{
# parsing Boost Error Value
output <- strsplit(model[["output"]], "\n")[[1]]
#boostRow <- grep("^boost\t", output)
#boostTrain[i] <- gsub(".*\\(|\\).*", "", output[(boostRow[1])])
#boostTest[i] <- gsub(".*\\(|\\).*", "", output[(boostRow[2])])
errorRow <- grep("Errors", output)
errorTrain[i] <- gsub(".*\\(|\\).*", "", output[(errorRow[1]+2)])
errorTest[i] <- gsub(".*\\(|\\).*", "", output[(errorRow[2]+2)])
#print(boostTest[i])
# parsing Variable Importance
variableImportance <- C5imp(model,metric = typeOfImportance) # splits usage
for (var in model[["predictors"]])
{
sumVariableImportance[i,var] = variableImportance[var,]
}
}
}
orderOfImportance <- sort(colMeans(sumVariableImportance, na.rm = TRUE), decreasing = TRUE)
errorTrain <- as.numeric(sub("%", "", errorTrain[!is.na(errorTrain)]))
errorTest  <- as.numeric(sub("%", "", errorTest[!is.na(errorTest)]))
meanErrorTrain <- mean(errorTrain)
meanErrorTest  <- mean(errorTest)
tTestTest <- t.test(errorTest, mu = 50)
impSDDir  <- sumVariableImportance[,"SDdomBanksdir"][!is.na(sumVariableImportance[,"SDdomBanksdir"])]
impSD     <- sumVariableImportance[,"SDofDomBanks"][!is.na(sumVariableImportance[,"SDofDomBanks"])]
results <- list(trainError = meanErrorTrain, testError = meanErrorTest,
varImp = orderOfImportance, tTestTestSet = tTestTest["p.value"],
ImpSDDir = impSDDir, ImpSD = impSD)
attr(results, "class") <- "samplingC5"
results
}
# Run C5.0 Sampling
interventionResults   <- samplingC5(intervention,interventionTarget, sampleSize, typeOfImportance)
interventionResults
interventionResults$va
interventionResults$varImp
periodsC5 <- function(inputData, dependentVariable, sampleSize, typeOfImportance) {
# Variable to be determined by C5.0
preTarget <- inputData[1:185, dependentVariable]
capTarget <- inputData[186:361, dependentVariable]
postTarget <- inputData[361:567, dependentVariable]
# Delete Target variable from input Data
inputData[,dependentVariable] <- NULL
# Define input Data for C5.0
preData <- inputData[1:185,]
capData <- inputData[186:361,]
postData <- inputData[361:567,]
if (sampleSize == 0)
{
# Run C5.0
preCap <- C5.0(preData, preTarget, rules = TRUE, trials = 100, metric=typeOfImportance)
cap <- C5.0(capData, capTarget, rules = TRUE, trials = 100, metric=typeOfImportance)
postCap <- C5.0(postData, postTarget, rules = TRUE, trials = 100, metric=typeOfImportance)
print(summary(preCap))
print(C5imp(preCap,metric = typeOfImportance))
print(summary(cap))
print(C5imp(cap,metric = typeOfImportance))
print(summary(postCap))
print(C5imp(postCap,metric = typeOfImportance))
}
else
{
# Run C5.0 Sampling for different Periods
preCap <- samplingC5(preData,preTarget, sampleSize, typeOfImportance)
cap <- samplingC5(capData, capTarget, sampleSize, typeOfImportance)
postCap <- samplingC5(postData, postTarget, sampleSize, typeOfImportance)
welchPreCapSDDir  <- t.test(preCap$ImpSDDir, cap$ImpSDDir)
welchPostCapSDDir <- t.test(postCap$ImpSDDir, cap$ImpSDDir)
welchPreCapSD  <- t.test(preCap$ImpSD, cap$ImpSD)
welchPostCapSD <- t.test(postCap$ImpSD, cap$ImpSD)
}
# Output of Object
results <- c(preCapTrainError = preCap$trainError, preCapTestError = preCap$testError, preCapTestPValue = preCap$tTestTestSet, preCapVarImp = preCap$varImp,
capTrainError = cap$trainError, capTestError = cap$testError, capTestPValue = cap$tTestTestSet, capVarImp = cap$varImp,
postCapTrainError = postCap$trainError, postCapTestError = postCap$testError, postCapTestPValue = postCap$tTestTestSet, postCapVarImp = postCap$varImp,
WelchSDDirPValue = welchSDDir$p.value)
attr(results, "class") <- "allPeriodsC5"
results
}
interventionC5 <- function(inputData, dependentVariable, interventionThreshold, sampleSize, typeOfThreshold, typeOfImportance){
# Data set for Intervention & no Intervention weeks
if (typeOfThreshold == "relativeSD")
{
intervention  <- subset(inputData, abs(ChgSDdomBanks) > interventionThreshold)
noIntervention <- subset(inputData, abs(ChgSDdomBanks) <= interventionThreshold)
}
if (typeOfThreshold == "nominalSD")
{
intervention  <- subset(inputData, abs(ChgSDdomBanks*SDofDomBanks/(1+ChgSDdomBanks)) > interventionThreshold)
noIntervention <- subset(inputData, abs(ChgSDdomBanks*SDofDomBanks/(1+ChgSDdomBanks)) <= interventionThreshold)
}
if (typeOfThreshold == "FX")
{
if (dependentVariable == "CHFEURdir")
{
intervention  <- subset(inputData, CHFEURprev > interventionThreshold)
noIntervention <- subset(inputData, CHFEURprev <= interventionThreshold)
}
else
{
intervention  <- subset(inputData, CHFEUR > interventionThreshold)
noIntervention <- subset(inputData, CHFEUR <= interventionThreshold)
}
}
# Variable to be determined by C5.0
interventionTarget <- intervention[,dependentVariable]
noInterventionTarget <- noIntervention[,dependentVariable]
# Remove target variable from input set
intervention[,dependentVariable]   <- NULL
noIntervention[,dependentVariable] <- NULL
# Remove Chaange of Side deposits
intervention[,"ChgSDdomBanks"]   <- NULL
noIntervention[,"ChgSDdomBanks"] <- NULL
if (sampleSize == 0)
{
# Run C5.0
int <- C5.0(intervention, interventionTarget,
rules = TRUE, trials = 100)
noInt <- C5.0(noIntervention, noInterventionTarget,
rules = TRUE, trials = 100)
print(summary(interventionResults))
print(summary(noInterventionResults))
}
else
{
# Run C5.0 Sampling
int   <- samplingC5(intervention,interventionTarget, sampleSize, typeOfImportance)
noInt <- samplingC5(noIntervention, noInterventionTarget, sampleSize, typeOfImportance)
welchSDDir <- t.test(int$ImpSDDir, noInt$ImpSDDir)
welchSD    <- t.test(int$ImpSD, noInt$ImpSD)
}
# Output of Object
results <- c(IntTrainError = int$trainError, IntTestError = int$testError, IntTestPValue = int$tTestTestSet, IntVarImp = int$varImp,
NoIntTrainError = noInt$trainError, NoIntTestError = noInt$testError, NoIntTestPValue = noInt$tTestTestSet, NoIntVarImp = noInt$varImp,
WelchSDDirPValue = welchSDDir$p.value)
attr(results, "class") <- "interventionC5"
results
}
# Intervention
InterventionCurrentSMI_Fx1.20 <- interventionC5(allData[currentSMIColumns], dependentVariable, 0.8333, sampleSize, "FX", typeOfImportance)
InterventionCurrentSMI_Fx1.20
periodsC5 <- function(inputData, dependentVariable, sampleSize, typeOfImportance) {
# Variable to be determined by C5.0
preTarget <- inputData[1:185, dependentVariable]
capTarget <- inputData[186:361, dependentVariable]
postTarget <- inputData[361:567, dependentVariable]
# Delete Target variable from input Data
inputData[,dependentVariable] <- NULL
# Define input Data for C5.0
preData <- inputData[1:185,]
capData <- inputData[186:361,]
postData <- inputData[361:567,]
if (sampleSize == 0)
{
# Run C5.0
preCap <- C5.0(preData, preTarget, rules = TRUE, trials = 100, metric=typeOfImportance)
cap <- C5.0(capData, capTarget, rules = TRUE, trials = 100, metric=typeOfImportance)
postCap <- C5.0(postData, postTarget, rules = TRUE, trials = 100, metric=typeOfImportance)
print(summary(preCap))
print(C5imp(preCap,metric = typeOfImportance))
print(summary(cap))
print(C5imp(cap,metric = typeOfImportance))
print(summary(postCap))
print(C5imp(postCap,metric = typeOfImportance))
}
else
{
# Run C5.0 Sampling for different Periods
preCap <- samplingC5(preData,preTarget, sampleSize, typeOfImportance)
cap <- samplingC5(capData, capTarget, sampleSize, typeOfImportance)
postCap <- samplingC5(postData, postTarget, sampleSize, typeOfImportance)
welchPreCapSDDir  <- t.test(preCap$ImpSDDir, cap$ImpSDDir)
welchPostCapSDDir <- t.test(postCap$ImpSDDir, cap$ImpSDDir)
welchPreCapSD  <- t.test(preCap$ImpSD, cap$ImpSD)
welchPostCapSD <- t.test(postCap$ImpSD, cap$ImpSD)
}
# Output of Object
results <- c(preCapTrainError = preCap$trainError, preCapTestError = preCap$testError, preCapTestPValue = preCap$tTestTestSet, preCapVarImp = preCap$varImp,
capTrainError = cap$trainError, capTestError = cap$testError, capTestPValue = cap$tTestTestSet, capVarImp = cap$varImp,
postCapTrainError = postCap$trainError, postCapTestError = postCap$testError, postCapTestPValue = postCap$tTestTestSet, postCapVarImp = postCap$varImp,
WelchPreCapSDDirPValue = welchPreCapSDDir$p.value
WelchPostCapSDDirPValue = welchPostCapSDDir$p.value
WelchPreCapSDPValue = welchPreCapSD$p.value
WelchPostCapSDPValue = welchPostCapSD$p.value)
attr(results, "class") <- "allPeriodsC5"
results
}
interventionC5 <- function(inputData, dependentVariable, interventionThreshold, sampleSize, typeOfThreshold, typeOfImportance){
# Data set for Intervention & no Intervention weeks
if (typeOfThreshold == "relativeSD")
{
intervention  <- subset(inputData, abs(ChgSDdomBanks) > interventionThreshold)
noIntervention <- subset(inputData, abs(ChgSDdomBanks) <= interventionThreshold)
}
if (typeOfThreshold == "nominalSD")
{
intervention  <- subset(inputData, abs(ChgSDdomBanks*SDofDomBanks/(1+ChgSDdomBanks)) > interventionThreshold)
noIntervention <- subset(inputData, abs(ChgSDdomBanks*SDofDomBanks/(1+ChgSDdomBanks)) <= interventionThreshold)
}
if (typeOfThreshold == "FX")
{
if (dependentVariable == "CHFEURdir")
{
intervention  <- subset(inputData, CHFEURprev > interventionThreshold)
noIntervention <- subset(inputData, CHFEURprev <= interventionThreshold)
}
else
{
intervention  <- subset(inputData, CHFEUR > interventionThreshold)
noIntervention <- subset(inputData, CHFEUR <= interventionThreshold)
}
}
# Variable to be determined by C5.0
interventionTarget <- intervention[,dependentVariable]
noInterventionTarget <- noIntervention[,dependentVariable]
# Remove target variable from input set
intervention[,dependentVariable]   <- NULL
noIntervention[,dependentVariable] <- NULL
# Remove Chaange of Side deposits
intervention[,"ChgSDdomBanks"]   <- NULL
noIntervention[,"ChgSDdomBanks"] <- NULL
if (sampleSize == 0)
{
# Run C5.0
int <- C5.0(intervention, interventionTarget,
rules = TRUE, trials = 100)
noInt <- C5.0(noIntervention, noInterventionTarget,
rules = TRUE, trials = 100)
print(summary(interventionResults))
print(summary(noInterventionResults))
}
else
{
# Run C5.0 Sampling
int   <- samplingC5(intervention,interventionTarget, sampleSize, typeOfImportance)
noInt <- samplingC5(noIntervention, noInterventionTarget, sampleSize, typeOfImportance)
welchSDDir <- t.test(int$ImpSDDir, noInt$ImpSDDir)
welchSD    <- t.test(int$ImpSD, noInt$ImpSD)
}
# Output of Object
results <- c(IntTrainError = int$trainError, IntTestError = int$testError, IntTestPValue = int$tTestTestSet, IntVarImp = int$varImp,
NoIntTrainError = noInt$trainError, NoIntTestError = noInt$testError, NoIntTestPValue = noInt$tTestTestSet, NoIntVarImp = noInt$varImp,
WelchSDDirPValue = welchSDDir$p.value,
WelchSDPValue = welchSD$p.value)
attr(results, "class") <- "interventionC5"
results
}
periodsC5 <- function(inputData, dependentVariable, sampleSize, typeOfImportance) {
# Variable to be determined by C5.0
preTarget <- inputData[1:185, dependentVariable]
capTarget <- inputData[186:361, dependentVariable]
postTarget <- inputData[361:567, dependentVariable]
# Delete Target variable from input Data
inputData[,dependentVariable] <- NULL
# Define input Data for C5.0
preData <- inputData[1:185,]
capData <- inputData[186:361,]
postData <- inputData[361:567,]
if (sampleSize == 0)
{
# Run C5.0
preCap <- C5.0(preData, preTarget, rules = TRUE, trials = 100, metric=typeOfImportance)
cap <- C5.0(capData, capTarget, rules = TRUE, trials = 100, metric=typeOfImportance)
postCap <- C5.0(postData, postTarget, rules = TRUE, trials = 100, metric=typeOfImportance)
print(summary(preCap))
print(C5imp(preCap,metric = typeOfImportance))
print(summary(cap))
print(C5imp(cap,metric = typeOfImportance))
print(summary(postCap))
print(C5imp(postCap,metric = typeOfImportance))
}
else
{
# Run C5.0 Sampling for different Periods
preCap <- samplingC5(preData,preTarget, sampleSize, typeOfImportance)
cap <- samplingC5(capData, capTarget, sampleSize, typeOfImportance)
postCap <- samplingC5(postData, postTarget, sampleSize, typeOfImportance)
welchPreCapSDDir  <- t.test(preCap$ImpSDDir, cap$ImpSDDir)
welchPostCapSDDir <- t.test(postCap$ImpSDDir, cap$ImpSDDir)
welchPreCapSD  <- t.test(preCap$ImpSD, cap$ImpSD)
welchPostCapSD <- t.test(postCap$ImpSD, cap$ImpSD)
}
# Output of Object
results <- c(preCapTrainError = preCap$trainError, preCapTestError = preCap$testError, preCapTestPValue = preCap$tTestTestSet, preCapVarImp = preCap$varImp,
capTrainError = cap$trainError, capTestError = cap$testError, capTestPValue = cap$tTestTestSet, capVarImp = cap$varImp,
postCapTrainError = postCap$trainError, postCapTestError = postCap$testError, postCapTestPValue = postCap$tTestTestSet, postCapVarImp = postCap$varImp,
WelchPreCapSDDirPValue = welchPreCapSDDir$p.value,
WelchPostCapSDDirPValue = welchPostCapSDDir$p.value,
WelchPreCapSDPValue = welchPreCapSD$p.value,
WelchPostCapSDPValue = welchPostCapSD$p.value)
attr(results, "class") <- "allPeriodsC5"
results
}
# Intervention
InterventionCurrentSMI_Fx1.20 <- interventionC5(allData[currentSMIColumns], dependentVariable, 0.8333, sampleSize, "FX", typeOfImportance)
InterventionCurrentSMI_Fx1.20
forecastSMI   <- periodsC5(allData[forecastSMIColumns], "SMInext", sampleSize, typeOfImportance)
forecastSMI
currentSMI
# Periods
currentSMI   <- periodsC5(allData[currentSMIColumns], dependentVariable, sampleSize, typeOfImportance)
currentSMI
dependentVariable
sampleSize
typeOfImportance
typeOfImportance <- "usage" # splits usage
# Periods
currentSMI   <- periodsC5(allData[currentSMIColumns], dependentVariable, sampleSize, typeOfImportance)
currentSMI
forecastSMI   <- periodsC5(allData[forecastSMIColumns], "SMInext", sampleSize, typeOfImportance)
forecastSMI
interventionC5 <- function(inputData, dependentVariable, interventionThreshold, sampleSize, typeOfThreshold, typeOfImportance){
# Data set for Intervention & no Intervention weeks
if (typeOfThreshold == "relativeSD")
{
intervention  <- subset(inputData, abs(ChgSDdomBanks) > interventionThreshold)
noIntervention <- subset(inputData, abs(ChgSDdomBanks) <= interventionThreshold)
# Remove Chaange of Side deposits
intervention[,"ChgSDdomBanks"]   <- NULL
noIntervention[,"ChgSDdomBanks"] <- NULL
}
if (typeOfThreshold == "nominalSD")
{
intervention  <- subset(inputData, abs(ChgSDdomBanks*SDofDomBanks/(1+ChgSDdomBanks)) > interventionThreshold)
noIntervention <- subset(inputData, abs(ChgSDdomBanks*SDofDomBanks/(1+ChgSDdomBanks)) <= interventionThreshold)
# Remove Chaange of Side deposits
intervention[,"ChgSDdomBanks"]   <- NULL
noIntervention[,"ChgSDdomBanks"] <- NULL
}
if (typeOfThreshold == "FX")
{
if (dependentVariable == "CHFEURdir")
{
intervention  <- subset(inputData, CHFEURprev > interventionThreshold)
noIntervention <- subset(inputData, CHFEURprev <= interventionThreshold)
}
else
{
intervention  <- subset(inputData, CHFEUR > interventionThreshold)
noIntervention <- subset(inputData, CHFEUR <= interventionThreshold)
}
}
# Variable to be determined by C5.0
interventionTarget <- intervention[,dependentVariable]
noInterventionTarget <- noIntervention[,dependentVariable]
# Remove target variable from input set
intervention[,dependentVariable]   <- NULL
noIntervention[,dependentVariable] <- NULL
if (sampleSize == 0)
{
# Run C5.0
int <- C5.0(intervention, interventionTarget,
rules = TRUE, trials = 100)
noInt <- C5.0(noIntervention, noInterventionTarget,
rules = TRUE, trials = 100)
print(summary(interventionResults))
print(summary(noInterventionResults))
}
else
{
# Run C5.0 Sampling
int   <- samplingC5(intervention,interventionTarget, sampleSize, typeOfImportance)
noInt <- samplingC5(noIntervention, noInterventionTarget, sampleSize, typeOfImportance)
welchSDDir <- t.test(int$ImpSDDir, noInt$ImpSDDir)
welchSD    <- t.test(int$ImpSD, noInt$ImpSD)
}
# Output of Object
results <- c(IntTrainError = int$trainError, IntTestError = int$testError, IntTestPValue = int$tTestTestSet, IntVarImp = int$varImp,
NoIntTrainError = noInt$trainError, NoIntTestError = noInt$testError, NoIntTestPValue = noInt$tTestTestSet, NoIntVarImp = noInt$varImp,
WelchSDDirPValue = welchSDDir$p.value,
WelchSDPValue = welchSD$p.value)
attr(results, "class") <- "interventionC5"
results
}
dependentVariable
typeOfImportance
# Intervention
InterventionCurrentSMI_Fx1.20 <- interventionC5(allData[currentSMIColumns], dependentVariable, 0.8333, sampleSize, "FX", typeOfImportance)
InterventionCurrentSMI_Fx1.20
typeOfImportance <- "splits" # splits usage
# Intervention
InterventionCurrentSMI_Fx1.20 <- interventionC5(allData[currentSMIColumns], dependentVariable, 0.8333, sampleSize, "FX", typeOfImportance)
InterventionCurrentSMI_Fx1.20
currentSMIColumns
quantile(allData["SDofDomBanks"])
quantile(allData[,"SDofDomBanks"])
quantile(allData[,"SDofDomBanks"],3)
quantile(allData[,"SDofDomBanks"],0.75)
InterventionCurrentSMI_Sd75 <- interventionC5(allData[currentSMIColumns], dependentVariable, 3712, sampleSize, "nominalSD", typeOfImportance)
InterventionCurrentSMI_Sd75
typeOfImportance <- "usage" # splits usage
InterventionCurrentSMI_Sd75 <- interventionC5(allData[currentSMIColumns], dependentVariable, 3712, sampleSize, "nominalSD", typeOfImportance)
InterventionCurrentSMI_Sd75
