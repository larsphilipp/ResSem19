orderOfImportance <- sort(colMeans(sumVariableImportance), decreasing = TRUE)
orderOfImportance
sumVariableImportance
sumVariableImportance
colMeans(sumVariableImportance)
?colMeans
orderOfImportance <- sort(colMeans(sumVariableImportance, na.rm = TRUE), decreasing = TRUE)
orderOfImportance
samplingC5 <- function(independentVariables, targetVariable, sampleSize) {
sumVariableImportance = setNames(data.frame(matrix(ncol = length(names(independentVariables)), nrow = 1)), names(independentVariables))
boostTrain = vector()
boostTest = vector()
for (i in 1:100) {
model <- C5.0(independentVariables, targetVariable,
rules = TRUE, trials = 100,
control = C5.0Control(sample=sampleSize))
#summary(model)
# Only count model if attributes have been used (zero classifications don't count)
usageIndex <- grep("Attribute usage:", model$output,
fixed = TRUE)
if (length(usageIndex) != 0)
{
# parsing Boost Error Value
output <- strsplit(model[["output"]], "\n")[[1]]
boostRow <- grep("^boost\t", output)
boostTrain[i] <- gsub(".*\\(|\\).*", "", output[(boostRow[1])])
boostTest[i] <- gsub(".*\\(|\\).*", "", output[(boostRow[2])])
#print(boostTest[i])
# parsing Variable Importance
variableImportance <- C5imp(model,metric = "splits") # splits usage
for (var in model[["predictors"]])
{
sumVariableImportance[i,var] = variableImportance[var,]
}
}
}
orderOfImportance <- sort(colMeans(sumVariableImportance, na.rm = TRUE), decreasing = TRUE)
boostTrain <- as.numeric(sub("%", "", boostTrain[!is.na(boostTrain)]))
boostTest  <- as.numeric(sub("%", "", boostTest[!is.na(boostTest)]))
meanBoostTrain <- mean(boostTrain)
meanBoostTest  <- mean(boostTest)
tTestTest <- t.test(boostTest, mu = 50)
results <- c(trainError = meanBoostTrain, testError = meanBoostTest, varImp = orderOfImportance, tTestTestSet = tTestTest["p.value"]) # arr <- boostTest
attr(results, "class") <- "samplingC5"
results
}
fxInterventionCurrentSPIEX_1.20 <- interventionC5(allData[currentSPIEXColumns], dependentVariable, 0.83, sampleSize, "FX")
fxInterventionCurrentSPIEX_1.20
samplingC5 <- function(independentVariables, targetVariable, sampleSize) {
sumVariableImportance = setNames(data.frame(matrix(ncol = length(names(independentVariables)), nrow = 1)), names(independentVariables))
boostTrain = vector()
boostTest = vector()
for (i in 1:100) {
model <- C5.0(independentVariables, targetVariable,
rules = TRUE, trials = 100,
control = C5.0Control(sample=sampleSize))
#summary(model)
# Only count model if attributes have been used (zero classifications don't count)
usageIndex <- grep("Attribute usage:", model$output,
fixed = TRUE)
if (length(usageIndex) != 0)
{
# parsing Boost Error Value
output <- strsplit(model[["output"]], "\n")[[1]]
boostRow <- grep("^boost\t", output)
boostTrain[i] <- gsub(".*\\(|\\).*", "", output[(boostRow[1])])
boostTest[i] <- gsub(".*\\(|\\).*", "", output[(boostRow[2])])
#print(boostTest[i])
# parsing Variable Importance
variableImportance <- C5imp(model,metric = "usage") # splits usage
for (var in model[["predictors"]])
{
sumVariableImportance[i,var] = variableImportance[var,]
}
}
}
orderOfImportance <- sort(colMeans(sumVariableImportance, na.rm = TRUE), decreasing = TRUE)
boostTrain <- as.numeric(sub("%", "", boostTrain[!is.na(boostTrain)]))
boostTest  <- as.numeric(sub("%", "", boostTest[!is.na(boostTest)]))
meanBoostTrain <- mean(boostTrain)
meanBoostTest  <- mean(boostTest)
tTestTest <- t.test(boostTest, mu = 50)
results <- c(trainError = meanBoostTrain, testError = meanBoostTest, varImp = orderOfImportance, tTestTestSet = tTestTest["p.value"]) # arr <- boostTest
attr(results, "class") <- "samplingC5"
results
}
samplingC5 <- function(independentVariables, targetVariable, sampleSize, typeOfImportance) {
sumVariableImportance = setNames(data.frame(matrix(ncol = length(names(independentVariables)), nrow = 1)), names(independentVariables))
boostTrain = vector()
boostTest = vector()
for (i in 1:100) {
model <- C5.0(independentVariables, targetVariable,
rules = TRUE, trials = 100,
control = C5.0Control(sample=sampleSize))
#summary(model)
# Only count model if attributes have been used (zero classifications don't count)
usageIndex <- grep("Attribute usage:", model$output,
fixed = TRUE)
if (length(usageIndex) != 0)
{
# parsing Boost Error Value
output <- strsplit(model[["output"]], "\n")[[1]]
boostRow <- grep("^boost\t", output)
boostTrain[i] <- gsub(".*\\(|\\).*", "", output[(boostRow[1])])
boostTest[i] <- gsub(".*\\(|\\).*", "", output[(boostRow[2])])
#print(boostTest[i])
# parsing Variable Importance
variableImportance <- C5imp(model,metric = typeOfImportance) # splits usage
for (var in model[["predictors"]])
{
sumVariableImportance[i,var] = variableImportance[var,]
}
}
}
orderOfImportance <- sort(colMeans(sumVariableImportance, na.rm = TRUE), decreasing = TRUE)
boostTrain <- as.numeric(sub("%", "", boostTrain[!is.na(boostTrain)]))
boostTest  <- as.numeric(sub("%", "", boostTest[!is.na(boostTest)]))
meanBoostTrain <- mean(boostTrain)
meanBoostTest  <- mean(boostTest)
tTestTest <- t.test(boostTest, mu = 50)
results <- c(trainError = meanBoostTrain, testError = meanBoostTest, varImp = orderOfImportance, tTestTestSet = tTestTest["p.value"]) # arr <- boostTest
attr(results, "class") <- "samplingC5"
results
}
# -----------------------------------------------------------------
allPeriodsC5 <- function(inputData, dependentVariable, sampleSize) {
# Variable to be determined by C5.0
preTarget <- inputData[1:185, dependentVariable]
capTarget <- inputData[186:362, dependentVariable]
postTarget <- inputData[363:555, dependentVariable]
# Delete Target variable from input Data
inputData[,dependentVariable] <- NULL
# Define input Data for C5.0
preData <- inputData[1:185,]
capData <- inputData[186:362,]
postData <- inputData[363:555,]
# Run C5.0 Sampling for different Periods
preCap <- samplingC5(preData,preTarget, sampleSize)
cap <- samplingC5(capData, capTarget, sampleSize)
postCap <- samplingC5(postData, postTarget, sampleSize)
# Output of Object
results <- c(PreCap = preCap, Cap = cap, PostCap = postCap)
attr(results, "class") <- "allPeriodsC5"
results
}
allPeriodsC5 <- function(inputData, dependentVariable, sampleSize, typeOfImportance) {
# Variable to be determined by C5.0
preTarget <- inputData[1:185, dependentVariable]
capTarget <- inputData[186:362, dependentVariable]
postTarget <- inputData[363:555, dependentVariable]
# Delete Target variable from input Data
inputData[,dependentVariable] <- NULL
# Define input Data for C5.0
preData <- inputData[1:185,]
capData <- inputData[186:362,]
postData <- inputData[363:555,]
# Run C5.0 Sampling for different Periods
preCap <- samplingC5(preData,preTarget, sampleSize, typeOfImportance)
cap <- samplingC5(capData, capTarget, sampleSize, typeOfImportance)
postCap <- samplingC5(postData, postTarget, sampleSize, typeOfImportance)
# Output of Object
results <- c(PreCap = preCap, Cap = cap, PostCap = postCap)
attr(results, "class") <- "allPeriodsC5"
results
}
# -----------------------------------------------------------------
interventionC5 <- function(inputData, dependentVariable, interventionThreshold, sampleSize, typeOfThreshold, typeOfImportance){
# Data set for Intervention & no Intervention weeks
if (typeOfThreshold == "SD")
{
intervention  <- subset(inputData, abs(ChgSDdomBanks) > interventionThreshold)
noIntervention <- subset(inputData, abs(ChgSDdomBanks) <= interventionThreshold)
}
if (typeOfThreshold == "FX")
{
if (dependentVariable == "CHFEURdir")
{
intervention  <- subset(inputData, CHFEURprev > interventionThreshold)
noIntervention <- subset(inputData, CHFEURprev <= interventionThreshold)
}
else
{
intervention  <- subset(inputData, CHFEUR > interventionThreshold)
noIntervention <- subset(inputData, CHFEUR <= interventionThreshold)
}
}
# Variable to be determined by C5.0
interventionTarget <- intervention[,dependentVariable]
noInterventionTarget <- noIntervention[,dependentVariable]
# Remove target variable from input set
intervention[,dependentVariable]   <- NULL
noIntervention[,dependentVariable] <- NULL
if (sampleSize == 0)
{
# Run C5.0
interventionResults <- C5.0(intervention, interventionTarget,
rules = TRUE, trials = 100)
noInterventionResults <- C5.0(noIntervention, noInterventionTarget,
rules = TRUE, trials = 100)
print(summary(interventionResults))
print(summary(noInterventionResults))
}
else
{
# Run C5.0 Sampling
interventionResults   <- samplingC5(intervention,interventionTarget, sampleSize, typeOfImportance)
noInterventionResults <- samplingC5(noIntervention, noInterventionTarget, sampleSize, typeOfImportance)
}
# Output of Object
results <- c(Int = interventionResults, NoInt = noInterventionResults)
attr(results, "class") <- "interventionC5"
results
}
# ---------------------------------------------------------------------
outputPrint <- function(output) {
print(output[c("PreCap.trainError","Cap.trainError","PostCap.trainError")])
print(output[c("PreCap.testError","Cap.testError","PostCap.testError")])
print(output[c("PreCap.varImp.ChgSDdomBanks","Cap.varImp.ChgSDdomBanks","PostCap.varImp.ChgSDdomBanks")])
print(output[c("PreCap.varImp.SDdomBanksdir","Cap.varImp.SDdomBanksdir","PostCap.varImp.SDdomBanksdir")])
print(output[c("PreCap.varImp.SDofDomBanks","Cap.varImp.SDofDomBanks","PostCap.varImp.SDofDomBanks")])
}
# -----------------------------------------------------------------
interventionOutputPrint <- function(output) {
print(output[c("Int.trainError","NoInt.trainError")])
print(output[c("Int.testError","NoInt.testError")])
print(output[c("Int.tTestTestSet.p.value","NoInt.tTestTestSet.p.value")])
print(output[c("Int.varImp.ChgSDdomBanks","NoInt.varImp.ChgSDdomBanks")])
print(output[c("Int.varImp.SDdomBanksdir","NoInt.varImp.SDdomBanksdir")])
print(output[c("Int.varImp.SDofDomBanks","NoInt.varImp.SDofDomBanks")])
}
typeOfImportance <- "usage" # splits usage
fxInterventionCurrentSPIEX_1.20 <- interventionC5(allData[currentSPIEXColumns], dependentVariable, 0.83, sampleSize, "FX", typeOfImportance)
fxInterventionCurrentSPIEX_1.20
sdInterventionCurrentRestrictedSPIEX_2.5 <- interventionC5(allData[currentRestrictedSPIEXColumns], dependentVariable, 0.025, sampleSize, "SD", typeOfImportance)
typeOfImportance
sdInterventionCurrentRestrictedSPIEX_2.5
typeOfImportance <- "splits" # splits usage
sdInterventionCurrentRestrictedSMI_2.5 <- interventionC5(allData[currentRestrictedSMIColumns], dependentVariable, 0.025, sampleSize, "SD", typeOfImportance) # 0.05 0.025
sdInterventionCurrentRestrictedSPIEX_2.5 <- interventionC5(allData[currentRestrictedSPIEXColumns], dependentVariable, 0.025, sampleSize, "SD", typeOfImportance)
sdInterventionCurrentRestrictedSPIEX_2.5 <- interventionC5(allData[currentRestrictedSPIEXColumns], dependentVariable, 0.025, sampleSize, "SD", typeOfImportance)
sdInterventionCurrentRestrictedSPIEX_2.5
sdInterventionCurrentSPIEX_5 <- interventionC5(allData[currentSPIEXColumns], dependentVariable, 0.05, sampleSize, "SD", typeOfImportance)
sdInterventionCurrentSPIEX_5
typeOfImportance <- "usage" # splits usage
sdInterventionCurrentSPIEX_5 <- interventionC5(allData[currentSPIEXColumns], dependentVariable, 0.05, sampleSize, "SD", typeOfImportance)
sdInterventionCurrentSPIEX_5
fxInterventionCurrentRestrictedSPIEX_1.20 <- interventionC5(allData[currentRestrictedSPIEXColumns], dependentVariable, 0.83, sampleSize, "FX", typeOfImportance)
fxInterventionCurrentRestrictedSPIEX_1.20
typeOfImportance <- "splits" # splits usage
fxInterventionCurrentRestrictedSPIEX_1.20 <- interventionC5(allData[currentRestrictedSPIEXColumns], dependentVariable, 0.83, sampleSize, "FX", typeOfImportance)
fxInterventionCurrentRestrictedSPIEX_1.20
View(inputData)
View(inputData)
inputData
interventionC5 <- function(inputData, dependentVariable, interventionThreshold, sampleSize, typeOfThreshold, typeOfImportance){
# Data set for Intervention & no Intervention weeks
if (typeOfThreshold == "relativeSD")
{
intervention  <- subset(inputData, abs(ChgSDdomBanks) > interventionThreshold)
noIntervention <- subset(inputData, abs(ChgSDdomBanks) <= interventionThreshold)
}
if (typeOfThreshold == "nominalSD")
{
intervention  <- subset(inputData, abs(ChgSDdomBanks*SDofDomBanks/(1+ChgSDdomBanks)) > interventionThreshold)
noIntervention <- subset(inputData, abs(ChgSDdomBanks*SDofDomBanks/(1+ChgSDdomBanks)) <= interventionThreshold)
}
if (typeOfThreshold == "FX")
{
if (dependentVariable == "CHFEURdir")
{
intervention  <- subset(inputData, CHFEURprev > interventionThreshold)
noIntervention <- subset(inputData, CHFEURprev <= interventionThreshold)
}
else
{
intervention  <- subset(inputData, CHFEUR > interventionThreshold)
noIntervention <- subset(inputData, CHFEUR <= interventionThreshold)
}
}
# Variable to be determined by C5.0
interventionTarget <- intervention[,dependentVariable]
noInterventionTarget <- noIntervention[,dependentVariable]
# Remove target variable from input set
intervention[,dependentVariable]   <- NULL
noIntervention[,dependentVariable] <- NULL
if (sampleSize == 0)
{
# Run C5.0
interventionResults <- C5.0(intervention, interventionTarget,
rules = TRUE, trials = 100)
noInterventionResults <- C5.0(noIntervention, noInterventionTarget,
rules = TRUE, trials = 100)
print(summary(interventionResults))
print(summary(noInterventionResults))
}
else
{
# Run C5.0 Sampling
interventionResults   <- samplingC5(intervention,interventionTarget, sampleSize, typeOfImportance)
noInterventionResults <- samplingC5(noIntervention, noInterventionTarget, sampleSize, typeOfImportance)
}
# Output of Object
results <- c(Int = interventionResults, NoInt = noInterventionResults)
attr(results, "class") <- "interventionC5"
results
}
sdInterventionCurrentSMI_5 <- interventionC5(allData[currentSMIColumns], dependentVariable, 6516, sampleSize, "nominalSD", typeOfImportance)
allData[currentSMIColumns]
## Execution ---------------------------------------------------------------------------------------
sampleSize <- 0.7
typeOfImportance <- "splits" # splits usage
# SMI
dependentVariable <- "SMIdir"
## Execution ---------------------------------------------------------------------------------------
sampleSize <- 0.7
typeOfImportance <- "splits" # splits usage
# SMI
dependentVariable <- "SMIdir"
sdInterventionCurrentSMI_5 <- interventionC5(allData[currentSMIColumns], dependentVariable, 6516, sampleSize, "nominalSD", typeOfImportance)
sdInterventionCurrentSMI_5
sdInterventionCurrentSMI_75 <- interventionC5(allData[currentSMIColumns], dependentVariable, 3586, sampleSize, "nominalSD", typeOfImportance)
sdInterventionCurrentSMI_75
sdInterventionCurrentSMI_75 <- interventionC5(allData[currentSMIColumns], dependentVariable, 4234, sampleSize, "nominalSD", typeOfImportance)
sdInterventionCurrentSMI_80 <- interventionC5(allData[currentSMIColumns], dependentVariable, 4234, sampleSize, "nominalSD", typeOfImportance)
sdInterventionCurrentSMI_80
sdInterventionCurrentRestrictedSMI_75 <- interventionC5(allData[currentRestrictedSMIColumns], dependentVariable, 3586, sampleSize, "nominalSD", typeOfImportance) # 0.05 0.025
intervention  <- subset(allData[currentRestrictedSMIColumns], abs(ChgSDdomBanks*SDofDomBanks/(1+ChgSDdomBanks)) > interventionThreshold)
intervention
intervention[SDofDomBanks]
intervention["SDofDomBanks"]
intervention  <- subset(allData[currentRestrictedSMIColumns], abs(ChgSDdomBanks*SDofDomBanks/(1+ChgSDdomBanks)) > interventionThreshold)
intervention  <- subset(allData[currentSMIColumns], abs(ChgSDdomBanks*SDofDomBanks/(1+ChgSDdomBanks)) > interventionThreshold)
intervention
interventionThreshold
interventionThreshold <- 4234
subset(inputData, abs(ChgSDdomBanks*SDofDomBanks/(1+ChgSDdomBanks)) > interventionThreshold)
subset(allData[currentSMIColumns], abs(ChgSDdomBanks*SDofDomBanks/(1+ChgSDdomBanks)) > interventionThreshold)
interventionThreshold <- 3586
subset(allData[currentSMIColumns], abs(ChgSDdomBanks*SDofDomBanks/(1+ChgSDdomBanks)) > interventionThreshold)
interventionThreshold <- 10000
subset(allData[currentSMIColumns], abs(ChgSDdomBanks*SDofDomBanks/(1+ChgSDdomBanks)) > interventionThreshold)
subset(allData[currentSMIColumns], abs(SDofDomBanks-SDofDomBanks[,-1]) > interventionThreshold)
subset(allData[currentSMIColumns], abs(SDofDomBanks-SDofDomBanks[-1]) > interventionThreshold)
subset(allData[currentSMIColumns], abs(ChgSDdomBanks*SDofDomBanks/(1+ChgSDdomBanks)) > interventionThreshold)
currentSMIColumns
interventionC5 <- function(inputData, dependentVariable, interventionThreshold, sampleSize, typeOfThreshold, typeOfImportance){
# Data set for Intervention & no Intervention weeks
if (typeOfThreshold == "relativeSD")
{
intervention  <- subset(inputData, abs(ChgSDdomBanks) > interventionThreshold)
noIntervention <- subset(inputData, abs(ChgSDdomBanks) <= interventionThreshold)
}
if (typeOfThreshold == "nominalSD")
{
intervention  <- subset(inputData, abs(ChgSDdomBanks*SDofDomBanks/(1+ChgSDdomBanks)) > interventionThreshold)
noIntervention <- subset(inputData, abs(ChgSDdomBanks*SDofDomBanks/(1+ChgSDdomBanks)) <= interventionThreshold)
intervention[,ChgSDdomBanks]   <- NULL
noIntervention[,ChgSDdomBanks] <- NULL
}
if (typeOfThreshold == "FX")
{
if (dependentVariable == "CHFEURdir")
{
intervention  <- subset(inputData, CHFEURprev > interventionThreshold)
noIntervention <- subset(inputData, CHFEURprev <= interventionThreshold)
}
else
{
intervention  <- subset(inputData, CHFEUR > interventionThreshold)
noIntervention <- subset(inputData, CHFEUR <= interventionThreshold)
}
}
# Variable to be determined by C5.0
interventionTarget <- intervention[,dependentVariable]
noInterventionTarget <- noIntervention[,dependentVariable]
# Remove target variable from input set
intervention[,dependentVariable]   <- NULL
noIntervention[,dependentVariable] <- NULL
if (sampleSize == 0)
{
# Run C5.0
interventionResults <- C5.0(intervention, interventionTarget,
rules = TRUE, trials = 100)
noInterventionResults <- C5.0(noIntervention, noInterventionTarget,
rules = TRUE, trials = 100)
print(summary(interventionResults))
print(summary(noInterventionResults))
}
else
{
# Run C5.0 Sampling
interventionResults   <- samplingC5(intervention,interventionTarget, sampleSize, typeOfImportance)
noInterventionResults <- samplingC5(noIntervention, noInterventionTarget, sampleSize, typeOfImportance)
}
# Output of Object
results <- c(Int = interventionResults, NoInt = noInterventionResults)
attr(results, "class") <- "interventionC5"
results
}
sdInterventionCurrentSMI_75 <- interventionC5(allData[currentSMIColumns], dependentVariable, 3586, sampleSize, "nominalSD", typeOfImportance)
interventionC5 <- function(inputData, dependentVariable, interventionThreshold, sampleSize, typeOfThreshold, typeOfImportance){
# Data set for Intervention & no Intervention weeks
if (typeOfThreshold == "relativeSD")
{
intervention  <- subset(inputData, abs(ChgSDdomBanks) > interventionThreshold)
noIntervention <- subset(inputData, abs(ChgSDdomBanks) <= interventionThreshold)
}
if (typeOfThreshold == "nominalSD")
{
intervention  <- subset(inputData, abs(ChgSDdomBanks*SDofDomBanks/(1+ChgSDdomBanks)) > interventionThreshold)
noIntervention <- subset(inputData, abs(ChgSDdomBanks*SDofDomBanks/(1+ChgSDdomBanks)) <= interventionThreshold)
intervention[,"ChgSDdomBanks"]   <- NULL
noIntervention[,"ChgSDdomBanks"] <- NULL
}
if (typeOfThreshold == "FX")
{
if (dependentVariable == "CHFEURdir")
{
intervention  <- subset(inputData, CHFEURprev > interventionThreshold)
noIntervention <- subset(inputData, CHFEURprev <= interventionThreshold)
}
else
{
intervention  <- subset(inputData, CHFEUR > interventionThreshold)
noIntervention <- subset(inputData, CHFEUR <= interventionThreshold)
}
}
# Variable to be determined by C5.0
interventionTarget <- intervention[,dependentVariable]
noInterventionTarget <- noIntervention[,dependentVariable]
# Remove target variable from input set
intervention[,dependentVariable]   <- NULL
noIntervention[,dependentVariable] <- NULL
if (sampleSize == 0)
{
# Run C5.0
interventionResults <- C5.0(intervention, interventionTarget,
rules = TRUE, trials = 100)
noInterventionResults <- C5.0(noIntervention, noInterventionTarget,
rules = TRUE, trials = 100)
print(summary(interventionResults))
print(summary(noInterventionResults))
}
else
{
# Run C5.0 Sampling
interventionResults   <- samplingC5(intervention,interventionTarget, sampleSize, typeOfImportance)
noInterventionResults <- samplingC5(noIntervention, noInterventionTarget, sampleSize, typeOfImportance)
}
# Output of Object
results <- c(Int = interventionResults, NoInt = noInterventionResults)
attr(results, "class") <- "interventionC5"
results
}
interventionC5 <- function(inputData, dependentVariable, interventionThreshold, sampleSize, typeOfThreshold, typeOfImportance){
# Data set for Intervention & no Intervention weeks
if (typeOfThreshold == "relativeSD")
{
intervention  <- subset(inputData, abs(ChgSDdomBanks) > interventionThreshold)
noIntervention <- subset(inputData, abs(ChgSDdomBanks) <= interventionThreshold)
}
if (typeOfThreshold == "nominalSD")
{
intervention  <- subset(inputData, abs(ChgSDdomBanks*SDofDomBanks/(1+ChgSDdomBanks)) > interventionThreshold)
noIntervention <- subset(inputData, abs(ChgSDdomBanks*SDofDomBanks/(1+ChgSDdomBanks)) <= interventionThreshold)
intervention[,"ChgSDdomBanks"]   <- NULL
noIntervention[,"ChgSDdomBanks"] <- NULL
}
if (typeOfThreshold == "FX")
{
if (dependentVariable == "CHFEURdir")
{
intervention  <- subset(inputData, CHFEURprev > interventionThreshold)
noIntervention <- subset(inputData, CHFEURprev <= interventionThreshold)
}
else
{
intervention  <- subset(inputData, CHFEUR > interventionThreshold)
noIntervention <- subset(inputData, CHFEUR <= interventionThreshold)
}
}
# Variable to be determined by C5.0
interventionTarget <- intervention[,dependentVariable]
noInterventionTarget <- noIntervention[,dependentVariable]
# Remove target variable from input set
intervention[,dependentVariable]   <- NULL
noIntervention[,dependentVariable] <- NULL
if (sampleSize == 0)
{
# Run C5.0
interventionResults <- C5.0(intervention, interventionTarget,
rules = TRUE, trials = 100)
noInterventionResults <- C5.0(noIntervention, noInterventionTarget,
rules = TRUE, trials = 100)
print(summary(interventionResults))
print(summary(noInterventionResults))
}
else
{
# Run C5.0 Sampling
interventionResults   <- samplingC5(intervention,interventionTarget, sampleSize, typeOfImportance)
noInterventionResults <- samplingC5(noIntervention, noInterventionTarget, sampleSize, typeOfImportance)
}
# Output of Object
results <- c(Int = interventionResults, NoInt = noInterventionResults)
attr(results, "class") <- "interventionC5"
results
}
sdInterventionCurrentSMI_75 <- interventionC5(allData[currentSMIColumns], dependentVariable, 3586, sampleSize, "nominalSD", typeOfImportance)
sdInterventionCurrentSMI_75
sdInterventionCurrentSMI_80 <- interventionC5(allData[currentSMIColumns], dependentVariable, 4234, sampleSize, "nominalSD", typeOfImportance)
sdInterventionCurrentSMI_80
