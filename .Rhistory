}
}
orderOfImportance <- sort(colMeans(sumVariableImportance), decreasing = TRUE)
boostTrain <- as.numeric(sub("%", "", boostTrain[!is.na(boostTrain)]))
boostTest  <- as.numeric(sub("%", "", boostTest[!is.na(boostTest)]))
meanBoostTrain <- mean(boostTrain)
meanBoostTest  <- mean(boostTest)
tTestTest <- t.test(boostTest, mu = 50)
results <- c(trainError = meanBoostTrain, testError = meanBoostTest, varImp = orderOfImportance, tTestTestSet = tTestTest["p.value"]) # arr <- boostTest
attr(results, "class") <- "samplingC5"
results
}
fxInterventionCurrentRestrictedSMI_1.20 <- interventionC5(allData[currentRestrictedSMIColumns], dependentVariable, 0.83, sampleSize, "FX") # 0.86 0.83
fxInterventionCurrentRestrictedSMI_1.20
fxInterventionCurrentRestrictedSMI_1.15 <- interventionC5(allData[currentRestrictedSMIColumns], dependentVariable, 0.86, sampleSize, "FX") # 0.86 0.83
fxInterventionCurrentRestrictedSMI_1.15
restrictedbasicColumnsFX    <- c("SDofDomBanks","SDdomBanksdir","CHFUSD","Gov3yr","Gov10yr","Libor3M_CHF")
currentRestrictedSMIColumns   <- c(restrictedbasicColumnsFX,"RetSMI","SMI","SMIdir","CHFEURprev","CHFEURdir")
currentRestrictedSMIColumns   <- c(restrictedColumnsIndex,"SMIprev","SMIdir")
currentRestrictedFxSMIColumns   <- c(restrictedbasicColumnsFX,"RetSMI","SMI","SMIdir","CHFEURprev","CHFEURdir")
currentRestrictedSMIColumns   <- c(restrictedColumnsIndex,"SMIprev","SMIdir")
dependentVariable <- "CHFEURdir"
fxInterventionCurrentFxSMI <- interventionC5(allData[currentFxSMIColumns], dependentVariable, 0.83, sampleSize, "FX") # 0.86 0.83
interventionC5 <- function(inputData, dependentVariable, interventionThreshold, sampleSize, typeOfThreshold) {
# Data set for Intervention & no Intervention weeks
if (typeOfThreshold == "SD")
{
intervention  <- subset(inputData, abs(ChgSDdomBanks) > interventionThreshold)
noIntervention <- subset(inputData, abs(ChgSDdomBanks) <= interventionThreshold)
}
if (typeOfThreshold == "FX")
{
if (dependentVariable == "CHFEURdir")
{
intervention  <- subset(inputData, CHFEURprev > interventionThreshold)
noIntervention <- subset(inputData, CHFEURprev <= interventionThreshold)
}
else
{
intervention  <- subset(inputData, CHFEUR > interventionThreshold)
noIntervention <- subset(inputData, CHFEUR <= interventionThreshold)
}
}
# Variable to be determined by C5.0
interventionTarget <- intervention[,dependentVariable]
noInterventionTarget <- noIntervention[,dependentVariable]
# Remove target variable from input set
intervention[,dependentVariable]   <- NULL
noIntervention[,dependentVariable] <- NULL
if (sampleSize == 0)
{
# Run C5.0
interventionResults <- C5.0(intervention, interventionTarget,
rules = TRUE, trials = 100)
noInterventionResults <- C5.0(noIntervention, noInterventionTarget,
rules = TRUE, trials = 100)
print(summary(interventionResults))
print(summary(noInterventionResults))
}
else
{
# Run C5.0 Sampling
interventionResults   <- samplingC5(intervention,interventionTarget, sampleSize)
noInterventionResults <- samplingC5(noIntervention, noInterventionTarget, sampleSize)
}
# Output of Object
results <- c(Int = interventionResults, NoInt = noInterventionResults)
attr(results, "class") <- "interventionC5"
results
}
interventionC5 <- function(inputData, dependentVariable, interventionThreshold, sampleSize, typeOfThreshold) {
# Data set for Intervention & no Intervention weeks
if (typeOfThreshold == "SD")
{
intervention  <- subset(inputData, abs(ChgSDdomBanks) > interventionThreshold)
noIntervention <- subset(inputData, abs(ChgSDdomBanks) <= interventionThreshold)
}
if (typeOfThreshold == "FX")
{
if (dependentVariable == "CHFEURdir")
{
intervention  <- subset(inputData, CHFEURprev > interventionThreshold)
noIntervention <- subset(inputData, CHFEURprev <= interventionThreshold)
}
else
{
intervention  <- subset(inputData, CHFEUR > interventionThreshold)
noIntervention <- subset(inputData, CHFEUR <= interventionThreshold)
}
}
# Variable to be determined by C5.0
interventionTarget <- intervention[,dependentVariable]
noInterventionTarget <- noIntervention[,dependentVariable]
# Remove target variable from input set
intervention[,dependentVariable]   <- NULL
noIntervention[,dependentVariable] <- NULL
if (sampleSize == 0)
{
# Run C5.0
interventionResults <- C5.0(intervention, interventionTarget,
rules = TRUE, trials = 100)
noInterventionResults <- C5.0(noIntervention, noInterventionTarget,
rules = TRUE, trials = 100)
print(summary(interventionResults))
print(summary(noInterventionResults))
}
else
{
# Run C5.0 Sampling
interventionResults   <- samplingC5(intervention,interventionTarget, sampleSize)
noInterventionResults <- samplingC5(noIntervention, noInterventionTarget, sampleSize)
}
# Output of Object
results <- c(Int = interventionResults, NoInt = noInterventionResults)
attr(results, "class") <- "interventionC5"
results
}
fxInterventionCurrentFxSMI <- interventionC5(allData[currentFxSMIColumns], dependentVariable, 0.83, sampleSize, "FX") # 0.86 0.83
fxInterventionCurrentFxSMI
restrictedbasicColumnsFX    <- c("SDofDomBanks","SDdomBanksdir","CHFUSD","Gov3yr","Gov10yr","Libor3M_CHF")
currentRestrictedFxSMIColumns   <- c(restrictedbasicColumnsFX,"RetSMI","SMI","SMIdir","CHFEURprev","CHFEURdir")
fxInterventionCurrentFxSMI <- interventionC5(allData[currentFxSMIColumns], dependentVariable, 0.83, sampleSize, "FX") # 0.86 0.83
fxInterventionCurrentFxSMI
fxInterventionCurrentFxSMI
fxInterventionCurrentFxSMI
currentFxSMIColumns
fxInterventionCurrentRestrictedSMI_1.20 <- interventionC5(allData[currentRestrictedSMIColumns], dependentVariable, 0.83, sampleSize, "FX") # 0.86 0.83
fxInterventionCurrentRestrictedFxSMI_1.20 <- interventionC5(allData[currentRestrictedFxSMIColumns], dependentVariable, 0.83, sampleSize, "FX") # 0.86 0.83
fxInterventionCurrentRestrictedFxSMI_1.20 <- interventionC5(allData[currentRestrictedFxSMIColumns], dependentVariable, 0.83, sampleSize, "FX") # 0.86 0.83
fxInterventionCurrentRestrictedFxSMI_1.20
samplingC5 <- function(independentVariables, targetVariable, sampleSize) {
sumVariableImportance = setNames(data.frame(matrix(ncol = length(names(independentVariables)), nrow = 1)), names(independentVariables))
boostTrain = vector()
boostTest = vector()
for (i in 1:100) {
model <- C5.0(independentVariables, targetVariable,
rules = TRUE, trials = 100,
control = C5.0Control(sample=sampleSize))
#summary(model)
# Only count model if attributes have been used (zero classifications don't count)
usageIndex <- grep("Attribute usage:", model$output,
fixed = TRUE)
if (length(usageIndex) != 0)
{
# parsing Boost Error Value
output <- strsplit(model[["output"]], "\n")[[1]]
boostRow <- grep("^boost\t", output)
boostTrain[i] <- gsub(".*\\(|\\).*", "", output[(boostRow[1])])
boostTest[i] <- gsub(".*\\(|\\).*", "", output[(boostRow[2])])
#print(boostTest[i])
# parsing Variable Importance
variableImportance <- C5imp(model,metric = "usage") # splits
for (var in model[["predictors"]])
{
sumVariableImportance[i,var] = variableImportance[var,]
}
}
}
orderOfImportance <- sort(colMeans(sumVariableImportance), decreasing = TRUE)
boostTrain <- as.numeric(sub("%", "", boostTrain[!is.na(boostTrain)]))
boostTest  <- as.numeric(sub("%", "", boostTest[!is.na(boostTest)]))
meanBoostTrain <- mean(boostTrain)
meanBoostTest  <- mean(boostTest)
tTestTest <- t.test(boostTest, mu = 50)
results <- c(trainError = meanBoostTrain, testError = meanBoostTest, varImp = orderOfImportance, tTestTestSet = tTestTest["p.value"]) # arr <- boostTest
attr(results, "class") <- "samplingC5"
results
}
fxInterventionCurrentFxSMI <- interventionC5(allData[currentFxSMIColumns], dependentVariable, 0.83, sampleSize, "FX") # 0.86 0.83
fxInterventionCurrentFxSMI
fxInterventionCurrentRestrictedFxSMI_1.20 <- interventionC5(allData[currentRestrictedFxSMIColumns], dependentVariable, 0.83, sampleSize, "FX") # 0.86 0.83
fxInterventionCurrentRestrictedFxSMI_1.20
dataind04 <- read.csv2("Indices from 04.csv", header = TRUE , sep = ";") #reading in data
dataind04 <- transform(dataind04, Date = as.Date(Date, format = "%Y-%m-%d") ,SNBSD = as.numeric(as.character(SNBSD)), SMI = as.numeric(as.character(SMI)),
SPIEX = as.numeric(as.character(SPIEX)), SMI.Mid = as.numeric(as.character(SMI.Mid)), CHF.USD = as.numeric(as.character(CHF.USD)), CHF.EUR = as.numeric(as.character(CHF.EUR))) # Converting numbers into numeric format and date column to date format
dataind04 <- dataind04[-c(1:196),]
# SNB Data
dataind08 <- read.csv2("Data_for_import_Indices_from_08.csv", header = TRUE , sep = ";") #reading in data
## Data Cleaning --------------------------------------
# Transforming the columns of the data frame into numeric
dataind08 <- transform(dataind08, Date = as.Date(Date, format = "%Y-%m-%d") ,SMI = as.numeric(as.character(SMI)), SDofDomBanks = as.numeric(as.character(SDofDomBanks)),
SPIEX = as.numeric(as.character(SPIEX)), SMIMid = as.numeric(as.character(SMIMid)), Gov10yr = as.numeric(as.character(Gov10yr)),
Gov3yr = as.numeric(as.character(Gov3yr)), Libor3M_CHF = as.numeric(as.character(Libor3M_CHF)), CHFUSD = as.numeric(as.character(CHFUSD)),
CHFEUR = as.numeric(as.character(CHFEUR))) # Converting numbers into numeric format and date column to date format
dataind08[is.na(dataind08)] <- 0 # Replacing NA with 0, NA indruduced due to #DIV/0! Entry in excel.
str(dataind08)
## Return calculations --------------
# Stock data
RetSMI <-  diff(log(dataind08$SMI)) # Weekly returns of the SMI
RetSPIEX <- diff(log(dataind08$SPIEX)) # Weekly returns of the SPIEX
RetSMIMid <- diff(log(dataind08$SMIMid)) # Weekly returns of the SMIMid
RetCHFEUR <- diff(log(dataind08$CHFEUR)) # Weekly returns of the SMIMid
# SNB Data
ChgSDdomBanks <- diff(dataind08$SDofDomBanks)/dataind08$SDofDomBanks[-length(dataind08$SDofDomBanks)] # Sight deposits of dom. Banks
# Creating Returns data set
dataret <- dataind08[-1,]
dataret <- cbind(dataret, RetSMI, RetSPIEX, RetSMIMid, ChgSDdomBanks, RetCHFEUR) # adding percent changes to the data set
CHFEURdata <- dataret # including SMI and SMIM
## Data --------------------------------------
allData <- dataret
# Directions: Up / Down
allData$SMIdir <- as.factor(ifelse(allData$RetSMI > 0, "up", ifelse(allData$RetSMI < 0, "down", "no change" ))) # Including a column with up, down factors
allData$SMIMdir <- as.factor(ifelse(allData$RetSMIM > 0, "up", ifelse(allData$RetSMIM < 0, "down", "no change" ))) # Including a column with up, down factors
allData$SPIEXdir <- as.factor(ifelse(allData$RetSPIEX > 0, "up", ifelse(allData$RetSPIEX < 0, "down", "no change" ))) # Including a column with up, down factors
allData$SDdomBanksdir <- as.factor(ifelse(allData$ChgSDdomBanks > 0, "up", ifelse(allData$ChgSDdomBanks < 0, "down", "no change" )))
allData$CHFEURdir <- as.factor(ifelse(allData$RetCHFEUR > 0, "up", ifelse(allData$RetCHFEUR < 0, "down", "no change" ))) # Including a column with up, down factors
# Previous Week
allData$CHFEURprev <- allData$CHFEUR
allData$CHFEURprev[2:575] <- allData$CHFEURprev[1:574]
allData$SMIprev <- allData$SMI
allData$SMIprev[2:575] <- allData$SMIprev[1:574]
allData$SMIMprev <- allData$SMIMid
allData$SMIMprev[2:575] <- allData$SMIMprev[1:574]
allData$SPIEXprev <- allData$SPIEX
allData$SPIEXprev[2:575] <- allData$SPIEXprev[1:574]
# Next Week & Lag the series to produce forecasts
allData$SMInext <- allData$SMIdir
allData$SMInext[1:574] <- allData$SMInext[2:575]
allData$SMIMnext <- allData$SMIMdir
allData$SMIMnext[1:574] <- allData$SMIMnext[2:575]
allData$SPIEXnext <- allData$SPIEXdir
allData$SPIEXnext[1:574] <- allData$SPIEXnext[2:575]
allData$CHFEURnext <- allData$CHFEURdir
allData$CHFEURnext[1:574] <- allData$CHFEURdir[2:575] # CHFEURdata$CHFEURdir[1:574]
# delete first row and the last rows
allData <-allData[2:556,]
## List of Colums --------------------------------------------
basicColumnsIndex <- c("SDofDomBanks","ChgSDdomBanks","SDdomBanksdir","CHFUSD","RetCHFEUR","CHFEUR","CHFEURdir","Gov3yr","Gov10yr","Libor3M_CHF")
basicColumnsFX    <- c("SDofDomBanks","ChgSDdomBanks","SDdomBanksdir","CHFUSD","Gov3yr","Gov10yr","Libor3M_CHF")
restrictedColumnsIndex <- c("SDofDomBanks","SDdomBanksdir","CHFUSD","CHFEUR","CHFEURdir","Gov3yr","Gov10yr","Libor3M_CHF")
restrictedbasicColumnsFX    <- c("SDofDomBanks","SDdomBanksdir","CHFUSD","Gov3yr","Gov10yr","Libor3M_CHF")
# Indices
currentSMIColumns   <- c(basicColumnsIndex,"SMIprev","SMIdir")
currentSMIMColumns  <- c(basicColumnsIndex,"SMIMprev","SMIMdir")
currentSPIEXColumns <- c(basicColumnsIndex,"SPIEXprev","SPIEXdir")
currentRestrictedSMIColumns   <- c(restrictedColumnsIndex,"SMIprev","SMIdir")
forecastSMIColumns   <- c(basicColumnsIndex,"SMI","SMInext")
forecastSMIMColumns  <- c(basicColumnsIndex,"SMIMid","SMIMnext")
forecastSPIEXColumns <- c(basicColumnsIndex,"SPIEX","SPIEXnext")
# Fx
currentFxSMIColumns   <- c(basicColumnsFX,"RetSMI","SMI","SMIdir","CHFEURprev","CHFEURdir")
currentFxSMIMColumns  <- c(basicColumnsFX,"RetSMIMid","SMIMid","SMIMdir","CHFEURprev","CHFEURdir")
currentFxSPIEXColumns <- c(basicColumnsFX,"RetSPIEX","SPIEX","SPIEXdir","CHFEURprev","CHFEURdir")
currentRestrictedFxSMIColumns   <- c(restrictedbasicColumnsFX,"RetSMI","SMI","SMIdir","CHFEURprev","CHFEURdir")
forecastFxSMIColumns   <- c(basicColumnsFX,"RetSMI","SMI","SMIdir","CHFEUR","CHFEURnext")
forecastFxSMIMColumns  <- c(basicColumnsFX,"RetSMIMid","SMIMid","SMIMdir","CHFEUR","CHFEURnext")
forecastFxSPIEXColumns <- c(basicColumnsFX,"RetSPIEX","SPIEX","SPIEXdir","CHFEUR","CHFEURnext")
### ----- determining Fx movements
sampleSize <- 0.7
dependentVariable <- "CHFEURdir"
fxInterventionCurrentRestrictedFxSMI_1.20 <- interventionC5(allData[currentRestrictedFxSMIColumns], dependentVariable, 0.83, sampleSize, "FX") # 0.86 0.83
# Functions and Obejcts BEGIN ------------------------------------------
samplingC5 <- function(independentVariables, targetVariable, sampleSize) {
sumVariableImportance = setNames(data.frame(matrix(ncol = length(names(independentVariables)), nrow = 1)), names(independentVariables))
boostTrain = vector()
boostTest = vector()
for (i in 1:100) {
model <- C5.0(independentVariables, targetVariable,
rules = TRUE, trials = 100,
control = C5.0Control(sample=sampleSize))
#summary(model)
# Only count model if attributes have been used (zero classifications don't count)
usageIndex <- grep("Attribute usage:", model$output,
fixed = TRUE)
if (length(usageIndex) != 0)
{
# parsing Boost Error Value
output <- strsplit(model[["output"]], "\n")[[1]]
boostRow <- grep("^boost\t", output)
boostTrain[i] <- gsub(".*\\(|\\).*", "", output[(boostRow[1])])
boostTest[i] <- gsub(".*\\(|\\).*", "", output[(boostRow[2])])
#print(boostTest[i])
# parsing Variable Importance
variableImportance <- C5imp(model,metric = "usage") # splits
for (var in model[["predictors"]])
{
sumVariableImportance[i,var] = variableImportance[var,]
}
}
}
orderOfImportance <- sort(colMeans(sumVariableImportance), decreasing = TRUE)
boostTrain <- as.numeric(sub("%", "", boostTrain[!is.na(boostTrain)]))
boostTest  <- as.numeric(sub("%", "", boostTest[!is.na(boostTest)]))
meanBoostTrain <- mean(boostTrain)
meanBoostTest  <- mean(boostTest)
tTestTest <- t.test(boostTest, mu = 50)
results <- c(trainError = meanBoostTrain, testError = meanBoostTest, varImp = orderOfImportance, tTestTestSet = tTestTest["p.value"]) # arr <- boostTest
attr(results, "class") <- "samplingC5"
results
}
# -----------------------------------------------------------------
# -----------------------------------------------------------------
allPeriodsC5 <- function(inputData, dependentVariable, sampleSize) {
# Variable to be determined by C5.0
preTarget <- inputData[1:185, dependentVariable]
capTarget <- inputData[186:362, dependentVariable]
postTarget <- inputData[363:555, dependentVariable]
# Delete Target variable from input Data
inputData[,dependentVariable] <- NULL
# Define input Data for C5.0
preData <- inputData[1:185,]
capData <- inputData[186:362,]
postData <- inputData[363:555,]
# Run C5.0 Sampling for different Periods
preCap <- samplingC5(preData,preTarget, sampleSize)
cap <- samplingC5(capData, capTarget, sampleSize)
postCap <- samplingC5(postData, postTarget, sampleSize)
# Output of Object
results <- c(PreCap = preCap, Cap = cap, PostCap = postCap)
attr(results, "class") <- "allPeriodsC5"
results
}
interventionC5 <- function(inputData, dependentVariable, interventionThreshold, sampleSize, typeOfThreshold) {
# Data set for Intervention & no Intervention weeks
if (typeOfThreshold == "SD")
{
intervention  <- subset(inputData, abs(ChgSDdomBanks) > interventionThreshold)
noIntervention <- subset(inputData, abs(ChgSDdomBanks) <= interventionThreshold)
}
if (typeOfThreshold == "FX")
{
if (dependentVariable == "CHFEURdir")
{
intervention  <- subset(inputData, CHFEURprev > interventionThreshold)
noIntervention <- subset(inputData, CHFEURprev <= interventionThreshold)
}
else
{
intervention  <- subset(inputData, CHFEUR > interventionThreshold)
noIntervention <- subset(inputData, CHFEUR <= interventionThreshold)
}
}
# Variable to be determined by C5.0
interventionTarget <- intervention[,dependentVariable]
noInterventionTarget <- noIntervention[,dependentVariable]
# Remove target variable from input set
intervention[,dependentVariable]   <- NULL
noIntervention[,dependentVariable] <- NULL
if (sampleSize == 0)
{
# Run C5.0
interventionResults <- C5.0(intervention, interventionTarget,
rules = TRUE, trials = 100)
noInterventionResults <- C5.0(noIntervention, noInterventionTarget,
rules = TRUE, trials = 100)
print(summary(interventionResults))
print(summary(noInterventionResults))
}
else
{
# Run C5.0 Sampling
interventionResults   <- samplingC5(intervention,interventionTarget, sampleSize)
noInterventionResults <- samplingC5(noIntervention, noInterventionTarget, sampleSize)
}
# Output of Object
results <- c(Int = interventionResults, NoInt = noInterventionResults)
attr(results, "class") <- "interventionC5"
results
}
# ---------------------------------------------------------------------
outputPrint <- function(output) {
print(output[c("PreCap.trainError","Cap.trainError","PostCap.trainError")])
print(output[c("PreCap.testError","Cap.testError","PostCap.testError")])
print(output[c("PreCap.varImp.ChgSDdomBanks","Cap.varImp.ChgSDdomBanks","PostCap.varImp.ChgSDdomBanks")])
print(output[c("PreCap.varImp.SDdomBanksdir","Cap.varImp.SDdomBanksdir","PostCap.varImp.SDdomBanksdir")])
print(output[c("PreCap.varImp.SDofDomBanks","Cap.varImp.SDofDomBanks","PostCap.varImp.SDofDomBanks")])
}
interventionOutputPrint <- function(output) {
print(output[c("Int.trainError","NoInt.trainError")])
print(output[c("Int.testError","NoInt.testError")])
print(output[c("Int.tTestTestSet.p.value","NoInt.tTestTestSet.p.value")])
print(output[c("Int.varImp.ChgSDdomBanks","NoInt.varImp.ChgSDdomBanks")])
print(output[c("Int.varImp.SDdomBanksdir","NoInt.varImp.SDdomBanksdir")])
print(output[c("Int.varImp.SDofDomBanks","NoInt.varImp.SDofDomBanks")])
}
fxInterventionCurrentRestrictedFxSMI_1.20 <- interventionC5(allData[currentRestrictedFxSMIColumns], dependentVariable, 0.83, sampleSize, "FX") # 0.86 0.83
fxInterventionCurrentRestrictedFxSMI_1.20
sdInterventionCurrentFxSMI <- interventionC5(allData[currentFxSMIColumns], dependentVariable, 0.05, sampleSize, "SD") # 0.05 0.025
sdInterventionCurrentFxSMI
sdInterventionCurrentRestrictedSMI_5 <- interventionC5(allData[currentRestrictedSMIColumns], dependentVariable, 0.05, sampleSize, "SD") # 0.86 0.83
sdInterventionCurrentRestrictedSMI_2.5 <- interventionC5(allData[currentRestrictedSMIColumns], dependentVariable, 0.025, sampleSize, "SD") # 0.86 0.83
sdInterventionCurrentRestrictedSMI_2.5
sdInterventionCurrentRestrictedSMI_5 <- interventionC5(allData[currentRestrictedSMIColumns], dependentVariable, 0.05, sampleSize, "SD") # 0.86 0.83
sdInterventionCurrentRestrictedSMI_5
## Current -- Ok Test Errors, SD Variable Importance as expected (Int>NoInt) apart from SDDir -> rebalancing effect (since simulatenous change in SMI)
dependentVariable <- "SMIdir"
### ----- determining Fx movements
sampleSize <- 0.7
sdInterventionCurrentRestrictedSMI_5 <- interventionC5(allData[currentRestrictedSMIColumns], dependentVariable, 0.05, sampleSize, "SD") # 0.86 0.83
sdInterventionCurrentRestrictedSMI_5
test <- interventionC5(allData[currentRestrictedSMIColumns], dependentVariable, 0.05, sampleSize, "SD")
test
sdInterventionCurrentRestrictedSMI_5 <- interventionC5(allData[currentRestrictedSMIColumns], dependentVariable, 0.05, sampleSize, "SD") # 0.86 0.83
sdInterventionCurrentRestrictedSMI_5
sdInterventionCurrentRestrictedSMI_2.5 <- interventionC5(allData[currentRestrictedSMIColumns], dependentVariable, 0.025, sampleSize, "SD") # 0.05 0.025
sdInterventionCurrentRestrictedSMI_2.5
samplingC5 <- function(independentVariables, targetVariable, sampleSize) {
sumVariableImportance = setNames(data.frame(matrix(ncol = length(names(independentVariables)), nrow = 1)), names(independentVariables))
boostTrain = vector()
boostTest = vector()
for (i in 1:100) {
model <- C5.0(independentVariables, targetVariable,
rules = TRUE, trials = 100,
control = C5.0Control(sample=sampleSize))
#summary(model)
# Only count model if attributes have been used (zero classifications don't count)
usageIndex <- grep("Attribute usage:", model$output,
fixed = TRUE)
if (length(usageIndex) != 0)
{
# parsing Boost Error Value
output <- strsplit(model[["output"]], "\n")[[1]]
boostRow <- grep("^boost\t", output)
boostTrain[i] <- gsub(".*\\(|\\).*", "", output[(boostRow[1])])
boostTest[i] <- gsub(".*\\(|\\).*", "", output[(boostRow[2])])
#print(boostTest[i])
# parsing Variable Importance
variableImportance <- C5imp(model,metric = "splits") # splits usage
for (var in model[["predictors"]])
{
sumVariableImportance[i,var] = variableImportance[var,]
}
}
}
orderOfImportance <- sort(colMeans(sumVariableImportance), decreasing = TRUE)
boostTrain <- as.numeric(sub("%", "", boostTrain[!is.na(boostTrain)]))
boostTest  <- as.numeric(sub("%", "", boostTest[!is.na(boostTest)]))
meanBoostTrain <- mean(boostTrain)
meanBoostTest  <- mean(boostTest)
tTestTest <- t.test(boostTest, mu = 50)
results <- c(trainError = meanBoostTrain, testError = meanBoostTest, varImp = orderOfImportance, tTestTestSet = tTestTest["p.value"]) # arr <- boostTest
attr(results, "class") <- "samplingC5"
results
}
sdInterventionCurrentRestrictedSMI_5 <- interventionC5(allData[currentRestrictedSMIColumns], dependentVariable, 0.05, sampleSize, "SD") # 0.05 0.025
sdInterventionCurrentRestrictedSMI_5
sdInterventionCurrentRestrictedSMI_2.5 <- interventionC5(allData[currentRestrictedSMIColumns], dependentVariable, 0.025, sampleSize, "SD") # 0.05 0.025
sdInterventionCurrentRestrictedSMI_2.5
sdInterventionCurrentRestrictedSMI_5 <- interventionC5(allData[currentRestrictedSMIColumns], dependentVariable, 0.05, sampleSize, "SD") # 0.05 0.025
sdInterventionCurrentRestrictedSMI_5
sdInterventionCurrentRestrictedSMI_5 <- interventionC5(allData[currentRestrictedSMIColumns], dependentVariable, 0.05, sampleSize, "SD") # 0.05 0.025
sdInterventionCurrentRestrictedSMI_5
test <- interventionC5(allData[currentRestrictedSMIColumns], dependentVariable, 0.05, sampleSize, "SD") # 0.05 0.025
test
## List of Colums --------------------------------------------
basicColumnsIndex <- c("SDofDomBanks","ChgSDdomBanks","SDdomBanksdir","CHFUSD","RetCHFEUR","CHFEUR","CHFEURdir","Gov3yr","Gov10yr","Libor3M_CHF")
basicColumnsFX    <- c("SDofDomBanks","ChgSDdomBanks","SDdomBanksdir","CHFUSD","Gov3yr","Gov10yr","Libor3M_CHF")
restrictedColumnsIndex <- c("SDofDomBanks","SDdomBanksdir","CHFUSD","CHFEUR","CHFEURdir","Gov3yr","Gov10yr","Libor3M_CHF")
# Indices
currentSMIColumns   <- c(basicColumnsIndex,"SMIprev","SMIdir")
currentSPIEXColumns <- c(basicColumnsIndex,"SPIEXprev","SPIEXdir")
currentRestrictedSMIColumns   <- c(restrictedColumnsIndex,"SMIprev","SMIdir")
currentRestrictedSPIEXColumns   <- c(restrictedColumnsIndex,"SPIEXprev","SPIEXdir")
# SPIEX
fxInterventionCurrentSPIEX_1.20 <- interventionC5(allData[currentSPIEXColumns], dependentVariable, 0.83, sampleSize, "FX")
# SPIEX
dependentVariable <- "SPIEXdir"
fxInterventionCurrentSPIEX_1.20 <- interventionC5(allData[currentSPIEXColumns], dependentVariable, 0.83, sampleSize, "FX")
fxInterventionCurrentSPIEX_1.20
fxInterventionCurrentSPIEX_1.20 <- interventionC5(allData[currentSPIEXColumns], dependentVariable, 0.83, sampleSize, "FX")
fxInterventionCurrentSPIEX_1.20
fxInterventionCurrentSPIEX_1.20
fxInterventionCurrentSPIEX_1.20
fxInterventionCurrentRestrictedSPIEX_1.20 <- interventionC5(allData[currentRestrictedSPIEXColumns], dependentVariable, 0.83, sampleSize, "FX")
fxInterventionCurrentRestrictedSPIEX_1.20
test <- interventionC5(allData[currentRestrictedSPIEXColumns], dependentVariable, 0.83, sampleSize, "FX")
test
# Functions and Obejcts BEGIN ------------------------------------------
samplingC5 <- function(independentVariables, targetVariable, sampleSize) {
sumVariableImportance = setNames(data.frame(matrix(ncol = length(names(independentVariables)), nrow = 1)), names(independentVariables))
boostTrain = vector()
boostTest = vector()
for (i in 1:100) {
model <- C5.0(independentVariables, targetVariable,
rules = TRUE, trials = 100,
control = C5.0Control(sample=sampleSize))
#summary(model)
# Only count model if attributes have been used (zero classifications don't count)
usageIndex <- grep("Attribute usage:", model$output,
fixed = TRUE)
if (length(usageIndex) != 0)
{
# parsing Boost Error Value
output <- strsplit(model[["output"]], "\n")[[1]]
boostRow <- grep("^boost\t", output)
boostTrain[i] <- gsub(".*\\(|\\).*", "", output[(boostRow[1])])
boostTest[i] <- gsub(".*\\(|\\).*", "", output[(boostRow[2])])
#print(boostTest[i])
# parsing Variable Importance
variableImportance <- C5imp(model,metric = "usage") # splits usage
for (var in model[["predictors"]])
{
sumVariableImportance[i,var] = variableImportance[var,]
}
}
}
orderOfImportance <- sort(colMeans(sumVariableImportance), decreasing = TRUE)
boostTrain <- as.numeric(sub("%", "", boostTrain[!is.na(boostTrain)]))
boostTest  <- as.numeric(sub("%", "", boostTest[!is.na(boostTest)]))
meanBoostTrain <- mean(boostTrain)
meanBoostTest  <- mean(boostTest)
tTestTest <- t.test(boostTest, mu = 50)
results <- c(trainError = meanBoostTrain, testError = meanBoostTest, varImp = orderOfImportance, tTestTestSet = tTestTest["p.value"]) # arr <- boostTest
attr(results, "class") <- "samplingC5"
results
}
fxInterventionCurrentRestrictedSPIEX_1.20 <- interventionC5(allData[currentRestrictedSPIEXColumns], dependentVariable, 0.83, sampleSize, "FX")
fxInterventionCurrentRestrictedSPIEX_1.20
allData[currentRestrictedSPIEXColumns],
allData[currentRestrictedSPIEXColumns],
allData[currentRestrictedSPIEXColumns]
interventionC5(allData[currentRestrictedSPIEXColumns], dependentVariable, 0.83, sampleSize, "FX")
