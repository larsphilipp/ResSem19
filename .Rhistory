plot(data$Date, data$OtherSD,  type = "l", xlab = "Date", ylab = "Index", main = "SNB Ohter Sight Deposits") # SNB Other Sight Deposits
plot(data$Date, data$TotalSD,  type = "l", xlab = "Date", ylab = "Index", main = "SNB Total Sight Deposits") # SNB Total Sight Deposits
plot(data$Date, data$M1Switzerland,  type = "l", xlab = "Date", ylab = "Index", main = "M1 Switzerland") # SNB M1 Switzerland
plot(data$Date, data$SNBFXinv,  type = "l", xlab = "Date", ylab = "Index", main = "SNBFXinv") # SNB Investments in foreign currencies
plot(data$Date, data$Gov10yr,  type = "l", xlab = "Date", ylab = "Index", main = "10 year Treasury yield") # Ten year treasury yield
plot(data$Date, data$Gov3yr,  type = "l", xlab = "Date", ylab = "Index", main = "3 year Treasury yield") # Three year treasury yield
plot(data$Date, data$Libor3M_CHF,  type = "l", xlab = "Date", ylab = "Index", main = "LIBOR 3 M") # Three months LIBOR yield
plot(data$Date, data$OvernightLendingRate,  type = "l", xlab = "Date", ylab = "Index", main = "Overnight Lending Rate") # Overnight lending rate
plot(data$Date, data$CHFUSD,  type = "l", xlab = "Date", ylab = "Index", main = "CHF/USD Exchange rate") # CHF/USD Exchange rate
plot(data$Date, data$CHFEUR,  type = "l", xlab = "Date", ylab = "Index", main = "CHF/EUR Exchange rate") # CHF/EUR Exchange rate
dev.off()
# 3) Correlation analysis: Correlation matrix
corr.mat <- cor(dataret[,-1], method = "spearman")
# Splitting up the data in High and low intervention phase.
HighInt <- dataret[1:229,] # Data set from start to 01.01.2016
LowInt <- dataret[230:392,] # Data set from 08.01.2016 - end
# Correlation matrix in high intervention phase
corr.mat.high <- cor(HighInt[,-1], method = "spearman")
# Correlation phase in low intervention phase
corr.mat.low <- cor(LowInt[,-1], method = "spearman")
# Result corresponding to correlation: We see that the SMI, SPIEX and SMI Mid are generally strongly correlated with
# the sight deposits of domestic banks. If we split the data, we see that during the intervention phase, the correlation between
# stocks and the Sight deposits is much stronger than in the after phase.
## 4) Creating decision trees and prediction analysis
### Analyzing the SMI
SMIData <- dataret[, -c(1,7,9,17, 18, 25, 26, 31, 32)]
TrainingDataSMI <- SMIData[1:300,] # Defining the training data from beginnig to 01.01.2016
TestDataSMI <- SMIData[301:391,] # Defining the test data from 08.01.2016 - end
modelSMI <- C5.0(TrainingDataSMI[-23], TrainingDataSMI$SMIForCast, rules = TRUE)
summary(modelSMI)
predictSMI <- predict(modelSMI, newdata = TestDataSMI)
summary(predict)
summary(TestDataSMI$SMIForCast)
accuracySMI <- (sum( predictSMI == TestDataSMI$SMIForCast ) / length( predictSMI ))*100 # Calculating the accuracy of the predicitons.
accuracySMI
##
## Analyzing the SMI Mid
SMIMidData <- dataret[,-c(1,7,8,10, 11, 12, 13, 14, 15, 16,17,24,25,30,31)]
SMIMidData <- dataret[,-c(1:15, 16, 17,24, 25, 30, 31 )]
View(SMIMidData)
####### Data analyisis Financial Research Seminar ###################
# Author: Julian Woessner
# Date: 07.03.2019
# Version 5.0
# This File contains the statistical analysis of the monetary and return data for the research seminar in Financial Economics
setwd("/Users/julianwossner/Desktop/MBF/Vorlesungen_2._Semester/Research_Seminar_Financial_Economics/Daten/Daten used for analysis")
# setting working directory
# installing packages
library(PerformanceAnalytics)
library(AER)
library(C50)
library(Hmisc)
library(jtools)
library(huxtable)
library(zoo)
library(ggplot2)
######################################## Reading in indice data for the plots and indroduction ###############################################
dataind <- read.csv2("Indices from 04.csv", header = TRUE , sep = ";") #reading in data
dataind <- transform(dataind, Date = as.Date(Date, format = "%Y-%m-%d") ,SNBSD = as.numeric(as.character(SNBSD)), SMI = as.numeric(as.character(SMI)),
SPIEX = as.numeric(as.character(SPIEX)), SMI.Mid = as.numeric(as.character(SMI.Mid)), CHF.USD = as.numeric(as.character(CHF.USD)), CHF.EUR = as.numeric(as.character(CHF.EUR))) # Converting numbers into numeric format and date column to date format
########################################## Ploting the indices
par(mfrow = c(3,2))
plot(dataind$Date, dataind$SMI, type = "l", xlab = "Date", ylab = "Index", main = "SMI") # SMI
plot(dataind$Date, dataind$SPIEX,  type = "l", xlab = "Date", ylab = "Index", main = "SPI Extra") # SPI Extra
plot(dataind$Date, dataind$SMI.Mid,  type = "l", xlab = "Date", ylab = "Index", main = "SMI Mid") # SMI Mid
plot(dataind$Date, dataind$SNBSD,  type = "l", xlab = "Date", ylab = "Index", main = "SNB Sight Deposits") # SNB Sight Deposits
plot(dataind$Date, dataind$CHF.USD,  type = "l", xlab = "Date", ylab = "Index", main = "CHF/USD Exchange rate") # CHF/USD Exchange rate
plot(dataind$Date, dataind$CHF.EUR,  type = "l", xlab = "Date", ylab = "Index", main = "CHF/EUR Exchange rate") # CHF/EUR Exchange rate
dev.off()
######### Correlation of the indices with the SNB Sight Deposits
cor.ind <- cor(dataind[,-1], method = "spearman")
################### Reading in data and preparing for analysis ###############################
dataret <- read.csv2("More data test.csv", header = TRUE , sep = ";") #reading in data
# Transforming the columns of the data frame into numeric
dataret <- transform(dataret, Date = as.Date(Date, format = "%Y-%m-%d") ,SMI = as.numeric(as.character(SMI)), DomSD = as.numeric(as.character(DomSD)),
MinRes = as.numeric(as.character(MinRes)), TotalSD = as.numeric(as.character(TotalSD)), SDdomBanks = as.numeric(as.character(SDdomBanks)), OtherSDwkl = as.numeric(as.character(OtherSDwkl)),
SNBFXinv = as.numeric(as.character(SNBFXinv)), M1 = as.numeric(as.character(M1)), SPIEX = as.numeric(as.character(SPIEX)), SMIM = as.numeric(as.character(SMIM)), Gov10yr = as.numeric(as.character(Gov10yr)),
Gov3yr = as.numeric(as.character(Gov3yr)), Gov1yr = as.numeric(as.character(Gov1yr)), LIBOR3M = as.numeric(as.character(LIBOR3M)), BankIntchgrate = as.numeric(as.character(BankIntchgrate)), CHFUSD = as.numeric(as.character(CHFUSD)),
CHFEUR = as.numeric(as.character(CHFEUR))) # Converting numbers into numeric format and date column to date format
dataret[is.na(dataret)] <- 0 # Replacing NA with 0, NA indruduced due to #DIV/0! Entry in excel.
str(dataret)
SMIdata <- dataret[,-c(1,10,11)] # Includes SMI as only stock indice
SPIEXdata <- dataret[,-c(1,2,11)] # Includes SPI Extra as only stock indice
SMIMdata <- dataret[, -c(1,2,10)] # Includes the SMI Mid as only stock indice
SNBdata <- dataret[, -c(1,12:18)] # Includes all indices but only the SNB figures
SNB.SMIdata <- SNBdata[,-c(9,10)] # Includes only the SMI as stock indice and all SNB samples
SNB.SPIEXdata <- SNBdata[, -c(1,10)] #Includes only the SPI extra as stock indice and all SNB samples
SNB.SMIMdata <- SNBdata[, -c(1,9)] #Includes only the SMI Mid as stock indice and all SNB samples
############################ Creating extra columns with up and downmovements for the C5.0 algorithm ########################################
#################### SPIEX ####################################################################################################################
SNB.SMIMdata$SMIMdir <- as.factor(ifelse(SNB.SMIMdata$SMIM > 0, "up", ifelse(SNB.SMIMdata$SMIM < 0, "down", "no change" ))) # Including a column with up, down factors
SNB.SMIMdata$DomSDdir <- as.factor(ifelse(SNB.SMIMdata$DomSD > 0, "up", ifelse(SNB.SMIMdata$DomSD < 0, "down", "no change" ))) # Including a column with up, down factors
SNB.SMIMdata$MinResdir <- as.factor(ifelse(SNB.SMIMdata$MinRes > 0, "up", ifelse(SNB.SMIMdata$MinRes < 0, "down", "no change" ))) # Including a column with up, down factors
SNB.SMIMdata$TotalSDdir <- as.factor(ifelse(SNB.SMIMdata$TotalSD > 0, "up", ifelse(SNB.SMIMdata$TotalSD < 0, "down", "no change" ))) # Including a column with up, down factors
SNB.SMIMdata$SDdomBanksdir <- as.factor(ifelse(SNB.SMIMdata$SDdomBanks > 0, "up", ifelse(SNB.SMIMdata$SDdomBanks < 0, "down", "no change" ))) # Including a column with up, down factors
SNB.SMIMdata$OtherSDwkldir <- as.factor(ifelse(SNB.SMIMdata$OtherSDwkl > 0, "up", ifelse(SNB.SMIMdata$OtherSDwkl < 0, "down", "no change" ))) # Including a column with up, down factors
SNB.SMIMdata$SNBFXinvdir <- as.factor(ifelse(SNB.SMIMdata$SNBFXinv > 0, "up", ifelse(SNB.SMIMdata$SNBFXinv < 0, "down", "no change" ))) # Including a column with up, down factors
SNB.SMIMdata$SMIM.FC <- as.factor(ifelse(SNB.SMIMdata$SMIM > 0, "up", ifelse(SNB.SMIMdata$SMIM < 0, "down", "no change" ))) # Reproduce the column SMIM.Dir
SNB.SMIMdata$SMIM.FC[1:350] <- SNB.SMIMdata$SMIM.FC[2:351] # Lag the series to produce forecasts
SNB.SMIMdata <- SNB.SMIMdata[-351,] # delete the last row
########################################################### Data analysis ##################################################################################################################
####### Plotting the different timeseries
plot(dataret$Date, log(1+dataret$SMI), type = "l", main = "SMI weekly change", xlab = "Date", ylab = "LogReturns") # SMI
plot(dataret$Date, dataret$DomSD ,type = "l", main = "Sight Deposits weekly change", xlab = "Date", ylab = "Change") # Domestic Sight Deposits
plot(dataret$Date, dataret$MinRes ,type = "l", main = "Minimum Reserves weekly change", xlab = "Date", ylab = "Change") # Minimum Reserves
plot(dataret$Date, dataret$TotalSD ,type = "l", main = "Total Sight Deposits weekly change", xlab = "Date", ylab = "Change") # Total Sight Deposits
plot(dataret$Date, dataret$SDdomBanks ,type = "l", main = "Sight Deposits of Domestic Banks weekly change", xlab = "Date", ylab = "Change") # Sight Deposits of domestic Banks
plot(dataret$Date, dataret$OtherSDwkl ,type = "l", main = "Other Sight Deposits weekly change", xlab = "Date", ylab = "Change") # Ohter Sight Deposits of domestic Banks weekly
plot(dataret$Date, dataret$SNBFXinv ,type = "l", main = "Investment in Foreign Currencies weekly change", xlab = "Date", ylab = "Change") # Investments of the SNB into Foreign Currencies
plot(dataret$Date, dataret$M1 ,type = "l", main = "M1 Money amount weekly change", xlab = "Date", ylab = "Change") # M1 Money amount
plot(dataret$Date, log(1+dataret$SPIEX) ,type = "l", main = "SPI Extra weekly change", xlab = "Date", ylab = "LogReturns") # SPI Extra
plot(dataret$Date, log(1+dataret$SMIM) ,type = "l", main = "SMI Mid weekly change", xlab = "Date", ylab = "LogReturns") # SMI Mid
plot(dataret$Date, dataret$Gov10yr ,type = "l", main = "Treasuries Interest rate 10 years weekly change", xlab = "Date", ylab = "Change") # Long term interest rate on Swiss Government Bonds 10 years
plot(dataret$Date, dataret$Gov3yr ,type = "l", main = "Treasuries Interest rate 3 years weekly change", xlab = "Date", ylab = "Change") # Long term interest rate on Swiss Government Bonds 3 years
plot(dataret$Date, dataret$LIBOR3M ,type = "l", main = "Treasuries Interest rate 1 year weekly change", xlab = "Date", ylab = "Change") # LIBOR 3 Months
plot(dataret$Date, dataret$BankIntchgrate ,type = "l", main = "Bank Overnight Lending Interest rate weekly change", xlab = "Date", ylab = "Change") # Interest rate banks charge for lending overnight
plot(dataret$Date, dataret$CHFUSD ,type = "l", main = "CHF / USD weekly change", xlab = "Date", ylab = "Change") # CHF / USD exchange rate
plot(dataret$Date, dataret$CHFEUR ,type = "l", main = "CHF / EUR weekly change", xlab = "Date", ylab = "Change") # CHF/EUR exchange rate
#################################### Calculate correlation matrix
DataWoDates <- dataret[,-1] # Delete the Date column
Cor <- cor(DataWoDates, method = "spearman") # calculate the Correlation Matrix Spearman
############ Correlation during the interventions ###################
Before2016.cor <- cor(DataWoDates[1:187, ])
############ Correlation After interventions ###################
After2016.cor <- cor(DataWoDates[188:350,])
####################### Data extention & C50 algorithm #############################
######################################## Creating Two Data sets  #############################
Before2016 <- SNB.SMIMdata[1:187, ] # Data set from 2012 - 06 - 08 to 2016 - 01 - 01 (Intervention phase)
After2016 <- SNB.SMIMdata[188:350, ] # Data set from 2016 - 01 - 08 to 2019 - 02 - 22 (After Intervention phase)
######################################## Using C5.0 algorithm  #############################
# Implement the model for the intervention phase and the after intervention phase to see how much more the SNB variables are used to define rules
############################ Induce Decision Tree for the phase after the Interventions ######################
After.model <- C5.0(After2016[-16], After2016$SMIM.FC, rules = TRUE)
After.model
summary(After.model)
############################ Induce Decision Tree for the phase when the Interventions happened ######################
Before.model <- C5.0(Before2016[-16], Before2016$SMIM.FC, rules = TRUE)
Before.model
summary(Before.model)
######################### Predict up and down movements of SMIM during the intervention phase ################################
Intervention.train <- Before2016[1:81,] # Defining the training data set
Intervention.test <- Before2016[82:187,] # Defining the test data set
Intervention.model <- C5.0(Intervention.train[-16], Intervention.train$SMIM.FC, rules = TRUE, trials = 100) # Induce the decision tree from the training data, using rules and boosting
Intervention.predict <- predict(Intervention.model, newdata= Intervention.test[,-16]) # Predict the up/down movements of the SMIM with the induced decision tree
summary(Intervention.model)
summary(Intervention.predict)
summary(Intervention.test$SMIM.FC)
accuracy <- (sum( Intervention.predict == Intervention.test$SMIM.FC ) / length( Intervention.predict ))*100 # Calculating the accuracy of the predicitons.
accuracy #We obtain an accuracy of 50% for the predicted values.
######################### Predict up and down movements of SMIM during the after phase ################################
after.train <- After2016[1:81,] # Defining the training data set
after.test <- After2016[82:163,] # Defining the test data set
after.model <- C5.0(after.train[,-16], after.train$SMIM.FC, rules = TRUE, trials = 100) # Induce the decision tree from the training data, using rules and boosting
after.predict <- predict(after.model, newdata= after.test[,-16]) # Predict the up/down movements of the SMIM with the induced decision tree
summary(after.model)
summary(after.predict)
summary(after.test$SMIM.FC)
accuracy2 <- (sum( after.predict == after.test$SMIM.FC ) / length( after.predict ))*100 # Calculating the accuracy of the predicitons.
accuracy2 #We obtain an accuracy of 50% for the predicted values.
############################ Predict up and down movements for whole dataset #####################################
train <- SNB.SMIMdata[1:150,]
test <- SNB.SMIMdata[151:350,]
model <- C5.0(SNB.SMIMdata[-16], SNB.SMIMdata$SMIM.FC, rules = TRUE, trials = 100)
predict <- predict(model, newdata = test[,-16])
summary(predict)
summary(test$SMIM.FC)
accuracy3 <- (sum( predict == test$SMIM.FC ) / length( predict ))*100 # Calculating the accuracy of the predicitons.
accuracy3 #We obtain an accuracy of 96% for the predicted values. Quite nice.
View(SNB.SMIMdata)
# This File contains the statistical analysis of the monetary and return data for the research seminar in Financial Economics
getwd()
setwd("/Users/julianwossner/Desktop/MBF/Vorlesungen_2._Semester/Research_Seminar_Financial_Economics/ResSem19")
# installing packages
library(PerformanceAnalytics)
library(AER)
library(C50)
library(Hmisc)
library(jtools)
library(huxtable)
library(zoo)
library(ggplot2)
data <- read.csv2("Monetary_Data_Handcollected_and_Datastream.csv", header = TRUE , sep = ";") #reading in data
data <- transform(data, Date = as.Date(Date, format = "%Y-%m-%d") ,SDofDomBanks = as.numeric(as.character(SDofDomBanks)), OtherSD = as.numeric(as.character(OtherSD)),
TotalSD = as.numeric(as.character(TotalSD)), M1Switzerland = as.numeric(as.character(M1Switzerland)), SNBFXinv = as.numeric(as.character(SNBFXinv)), SPIEX = as.numeric(as.character(SPIEX)),
SMI = as.numeric(as.character(SMI)), SMIMid = as.numeric(as.character(SMIMid)), Gov10yr = as.numeric(as.character(Gov10yr)), Gov3yr = as.numeric(as.character(Gov3yr)), Libor3M_CHF = as.numeric(as.character(Libor3M_CHF)), OvernightLendingRate = as.numeric(as.character(OvernightLendingRate)), CHFUSD = as.numeric(as.character(CHFUSD)),
CHFEUR = as.numeric(as.character(CHFEUR)))# Converting numbers into numeric format and date column to date format
str(data)
## 1) Data cleaning and preparation: Creating percentage change columns for the indices and the SNB assets
# Stock data
RetSMI <-  diff(log(data$SMI)) # Weekly returns of the SMI
RetSPIEX <- diff(log(data$SPIEX)) # Weekly returns of the SPIEX
RetSMIMid <- diff(log(data$SMIMid)) # Weekly returns of the SMIMid
# SNB Data
ChgSDdomBanks <- diff(log(data$SDofDomBanks)) # Sight deposits of dom. Banks
ChgOtherSD <- diff(log(data$OtherSD)) # Other Sight Deposits
ChgTotalSD <- diff(log(data$TotalSD)) # Total Sight Deposits
ChgM1Switzerland <- diff(log(data$M1Switzerland)) # M1 Switzerland
ChgSNBFXinv <- diff(log(data$SNBFXinv)) # SNB investements in foreign currency
dataret <- data[-1,] # Deleting the first row
dataret <- cbind(dataret, RetSMI, RetSPIEX, RetSMIMid, ChgSDdomBanks, ChgOtherSD, ChgTotalSD, ChgM1Switzerland, ChgSNBFXinv)
# For the stock indices
dataret$SMIDir <- as.factor(ifelse(dataret$RetSMI > 0, "up", ifelse(dataret$RetSMI < 0, "down", "no change" ))) # Direction of the SMI in the respective week
dataret$SPIEXDir <- as.factor(ifelse(dataret$RetSPIEX > 0, "up", ifelse(dataret$RetSPIEX < 0, "down", "no change" ))) # Direction of the SPI Extra in the respective week
dataret$SMIMidDir <- as.factor(ifelse(dataret$RetSMIMid > 0, "up", ifelse(dataret$RetSMIMid < 0, "down", "no change" ))) # Direction of the SMI Mid in the respective week
# For the SNB data
dataret$SDofDomBanksDir <- as.factor(ifelse(dataret$ChgSDdomBanks > 0, "up", ifelse(dataret$ChgSDdomBanks < 0, "down", "no change" ))) # Direction of the Sight Deposits of dom. Banks in the respective week
# Author: Julian Woessner
# Date: 10.03.2019
# Version 6.0
# This File contains the statistical analysis of the monetary and return data for the research seminar in Financial Economics
getwd()
setwd("/Users/julianwossner/Desktop/MBF/Vorlesungen_2._Semester/Research_Seminar_Financial_Economics/ResSem19")
# setting working directory
# installing packages
library(PerformanceAnalytics)
library(AER)
library(C50)
library(Hmisc)
library(jtools)
library(huxtable)
library(zoo)
library(ggplot2)
#### Loading in the source data file
data <- read.csv2("Monetary_Data_Handcollected_and_Datastream.csv", header = TRUE , sep = ";") #reading in data
data <- transform(data, Date = as.Date(Date, format = "%Y-%m-%d") ,SDofDomBanks = as.numeric(as.character(SDofDomBanks)), OtherSD = as.numeric(as.character(OtherSD)),
TotalSD = as.numeric(as.character(TotalSD)), M1Switzerland = as.numeric(as.character(M1Switzerland)), SNBFXinv = as.numeric(as.character(SNBFXinv)), SPIEX = as.numeric(as.character(SPIEX)),
SMI = as.numeric(as.character(SMI)), SMIMid = as.numeric(as.character(SMIMid)), Gov10yr = as.numeric(as.character(Gov10yr)), Gov3yr = as.numeric(as.character(Gov3yr)), Libor3M_CHF = as.numeric(as.character(Libor3M_CHF)), OvernightLendingRate = as.numeric(as.character(OvernightLendingRate)), CHFUSD = as.numeric(as.character(CHFUSD)),
CHFEUR = as.numeric(as.character(CHFEUR)))# Converting numbers into numeric format and date column to date format
str(data)
## 1) Data cleaning and preparation: Creating percentage change columns for the indices and the SNB assets
# Stock data
RetSMI <-  diff(log(data$SMI)) # Weekly returns of the SMI
RetSPIEX <- diff(log(data$SPIEX)) # Weekly returns of the SPIEX
RetSMIMid <- diff(log(data$SMIMid)) # Weekly returns of the SMIMid
# SNB Data
ChgSDdomBanks <- diff(log(data$SDofDomBanks)) # Sight deposits of dom. Banks
ChgOtherSD <- diff(log(data$OtherSD)) # Other Sight Deposits
ChgTotalSD <- diff(log(data$TotalSD)) # Total Sight Deposits
ChgM1Switzerland <- diff(log(data$M1Switzerland)) # M1 Switzerland
ChgSNBFXinv <- diff(log(data$SNBFXinv)) # SNB investements in foreign currency
dataret <- data[-1,] # Deleting the first row
dataret <- cbind(dataret, RetSMI, RetSPIEX, RetSMIMid, ChgSDdomBanks, ChgOtherSD, ChgTotalSD, ChgM1Switzerland, ChgSNBFXinv)
# Creating the directions columns indicating whether the stocks or SNB data went up, down or stayed the same
# For the stock indices
dataret$SMIDir <- as.factor(ifelse(dataret$RetSMI > 0, "up", ifelse(dataret$RetSMI < 0, "down", "no change" ))) # Direction of the SMI in the respective week
dataret$SPIEXDir <- as.factor(ifelse(dataret$RetSPIEX > 0, "up", ifelse(dataret$RetSPIEX < 0, "down", "no change" ))) # Direction of the SPI Extra in the respective week
dataret$SMIMidDir <- as.factor(ifelse(dataret$RetSMIMid > 0, "up", ifelse(dataret$RetSMIMid < 0, "down", "no change" ))) # Direction of the SMI Mid in the respective week
# For the SNB data
dataret$SDofDomBanksDir <- as.factor(ifelse(dataret$ChgSDdomBanks > 0, "up", ifelse(dataret$ChgSDdomBanks < 0, "down", "no change" ))) # Direction of the Sight Deposits of dom. Banks in the respective week
dataret$OtherSDDir <- as.factor(ifelse(dataret$ChgOtherSD > 0, "up", ifelse(dataret$ChgOtherSD < 0, "down", "no change" ))) # Direction of the Ohter Sight Deposits in the respective week
dataret$TotalSDDir <- as.factor(ifelse(dataret$ChgTotalSD > 0, "up", ifelse(dataret$ChgTotalSD < 0, "down", "no change" ))) # Direction of the Total Sight Deposits in the respective week
# Creating the forcast columns for the SMI, SPIEX and SMIMid
# SMI
dataret$SMIForCast <- as.factor(ifelse(dataret$RetSMI > 0, "up", ifelse(dataret$RetSMI < 0, "down", "no change" ))) # Reproduce the column SMIM.Dir
dataret$SMIForCast[1:nrow(dataret)-1] <- dataret$SMIForCast[2:nrow(dataret)] # Lag the series to produce forecasts
# SPIEX
dataret$SPIEXForCast <- as.factor(ifelse(dataret$RetSPIEX > 0, "up", ifelse(dataret$RetSPIEX < 0, "down", "no change" ))) # Reproduce the column SMIM.Dir
dataret$SPIEXForCast[1:nrow(dataret)-1] <- dataret$SPIEXForCast[2:nrow(dataret)] # Lag the series to produce forecasts
# SMIMid
dataret$SMIMidForCast <- as.factor(ifelse(dataret$RetSMIMid > 0, "up", ifelse(dataret$RetSMIMid < 0, "down", "no change" ))) # Reproduce the column SMIM.Dir
dataret$SMIMidForCast[1:nrow(dataret)-1] <- dataret$SMIMidForCast[2:nrow(dataret)] # Lag the series to produce forecasts
dataret <- dataret[-nrow(dataret),] # delete the last row to remove the NAs in the last row
#### 2) Plotting the indices
par(mfrow = c(2,2))
plot(data$Date, data$SMI, type = "l", xlab = "Date", ylab = "Index", main = "SMI") # SMI
plot(data$Date, data$SPIEX,  type = "l", xlab = "Date", ylab = "Index", main = "SPI Extra") # SPI Extra
plot(data$Date, data$SMIMid,  type = "l", xlab = "Date", ylab = "Index", main = "SMI Mid") # SMI Mid
plot(data$Date, data$SDofDomBanks,  type = "l", xlab = "Date", ylab = "Index", main = "SNB Sight Deposits of Dom. Banks") # SNB Sight Deposits
plot(data$Date, data$OtherSD,  type = "l", xlab = "Date", ylab = "Index", main = "SNB Ohter Sight Deposits") # SNB Other Sight Deposits
plot(data$Date, data$TotalSD,  type = "l", xlab = "Date", ylab = "Index", main = "SNB Total Sight Deposits") # SNB Total Sight Deposits
plot(data$Date, data$M1Switzerland,  type = "l", xlab = "Date", ylab = "Index", main = "M1 Switzerland") # SNB M1 Switzerland
plot(data$Date, data$SNBFXinv,  type = "l", xlab = "Date", ylab = "Index", main = "SNBFXinv") # SNB Investments in foreign currencies
plot(data$Date, data$Gov10yr,  type = "l", xlab = "Date", ylab = "Index", main = "10 year Treasury yield") # Ten year treasury yield
plot(data$Date, data$Gov3yr,  type = "l", xlab = "Date", ylab = "Index", main = "3 year Treasury yield") # Three year treasury yield
plot(data$Date, data$Libor3M_CHF,  type = "l", xlab = "Date", ylab = "Index", main = "LIBOR 3 M") # Three months LIBOR yield
plot(data$Date, data$OvernightLendingRate,  type = "l", xlab = "Date", ylab = "Index", main = "Overnight Lending Rate") # Overnight lending rate
plot(data$Date, data$CHFUSD,  type = "l", xlab = "Date", ylab = "Index", main = "CHF/USD Exchange rate") # CHF/USD Exchange rate
plot(data$Date, data$CHFEUR,  type = "l", xlab = "Date", ylab = "Index", main = "CHF/EUR Exchange rate") # CHF/EUR Exchange rate
dev.off()
# 3) Correlation analysis: Correlation matrix
corr.mat <- cor(dataret[,-1], method = "spearman")
# Splitting up the data in High and low intervention phase.
HighInt <- dataret[1:229,] # Data set from start to 01.01.2016
LowInt <- dataret[230:392,] # Data set from 08.01.2016 - end
# Correlation matrix in high intervention phase
corr.mat.high <- cor(HighInt[,-1], method = "spearman")
# Correlation phase in low intervention phase
corr.mat.low <- cor(LowInt[,-1], method = "spearman")
# Result corresponding to correlation: We see that the SMI, SPIEX and SMI Mid are generally strongly correlated with
# the sight deposits of domestic banks. If we split the data, we see that during the intervention phase, the correlation between
# stocks and the Sight deposits is much stronger than in the after phase.
## 4) Creating decision trees and prediction analysis
### Analyzing the SMI
SMIData <- dataret[, -c(1,7,9,17, 18, 25, 26, 31, 32)]
TrainingDataSMI <- SMIData[1:300,] # Defining the training data from beginnig to 01.01.2016
TestDataSMI <- SMIData[301:391,] # Defining the test data from 08.01.2016 - end
modelSMI <- C5.0(TrainingDataSMI[-23], TrainingDataSMI$SMIForCast, rules = TRUE)
summary(modelSMI)
predictSMI <- predict(modelSMI, newdata = TestDataSMI)
summary(predict)
summary(TestDataSMI$SMIForCast)
accuracySMI <- (sum( predictSMI == TestDataSMI$SMIForCast ) / length( predictSMI ))*100 # Calculating the accuracy of the predicitons.
accuracySMI
## Analyzing the SMI Mid
SMIMidData <- dataret[,-c(1,7,8,10, 11, 12, 13, 14, 15, 16,17,24,25,30,31)]
SMIMidData <- dataret[,-c(1:15, 16, 17,24, 25, 30, 31 )]
TrainingDataSMIMid<- SMIMidData[1:300,] # Defining the training data from beginnig to 01.01.2016
TestDataSMIMid <- SMIMidData[301:391,] # Defining the test data from 08.01.2016 - end
modelSMIMid <- C5.0(TrainingDataSMIMid[-11], TrainingDataSMIMid$SMIMidForCast, rules = TRUE)
predictSMIMid <- predict(modelSMIMid, newdata = TestDataSMIMid)
summary(modelSMIMid)
summary(predictSMIMid)
summary(TestDataSMIMid$SMIMidForCast)
accuracySMIMid <- (sum( predict == TestDataSMIMid$SMIMidForCast ) / length( predictSMIMid ))*100 # Calculating the accuracy of the predicitons.
accuracySMIMid
# The strange thing is, when we compute the prediction only on the percentage changes for the SMI Mid, we get an accuracy of 96%,
# If we compute the precision on the basis
# Author: Julian Woessner
# Date: 10.03.2019
# Version 6.0
# This File contains the statistical analysis of the monetary and return data for the research seminar in Financial Economics
getwd()
setwd("/Users/julianwossner/Desktop/MBF/Vorlesungen_2._Semester/Research_Seminar_Financial_Economics/ResSem19")
# setting working directory
# installing packages
library(PerformanceAnalytics)
library(AER)
library(C50)
library(Hmisc)
library(jtools)
library(huxtable)
library(zoo)
library(ggplot2)
#### Loading in the source data file
data <- read.csv2("Monetary_Data_Handcollected_and_Datastream.csv", header = TRUE , sep = ";") #reading in data
data <- transform(data, Date = as.Date(Date, format = "%Y-%m-%d") ,SDofDomBanks = as.numeric(as.character(SDofDomBanks)), OtherSD = as.numeric(as.character(OtherSD)),
TotalSD = as.numeric(as.character(TotalSD)), M1Switzerland = as.numeric(as.character(M1Switzerland)), SNBFXinv = as.numeric(as.character(SNBFXinv)), SPIEX = as.numeric(as.character(SPIEX)),
SMI = as.numeric(as.character(SMI)), SMIMid = as.numeric(as.character(SMIMid)), Gov10yr = as.numeric(as.character(Gov10yr)), Gov3yr = as.numeric(as.character(Gov3yr)), Libor3M_CHF = as.numeric(as.character(Libor3M_CHF)), OvernightLendingRate = as.numeric(as.character(OvernightLendingRate)), CHFUSD = as.numeric(as.character(CHFUSD)),
CHFEUR = as.numeric(as.character(CHFEUR)))# Converting numbers into numeric format and date column to date format
str(data)
## 1) Data cleaning and preparation: Creating percentage change columns for the indices and the SNB assets
# Stock data
RetSMI <-  diff(log(data$SMI)) # Weekly returns of the SMI
RetSPIEX <- diff(log(data$SPIEX)) # Weekly returns of the SPIEX
RetSMIMid <- diff(log(data$SMIMid)) # Weekly returns of the SMIMid
# SNB Data
ChgSDdomBanks <- diff(log(data$SDofDomBanks)) # Sight deposits of dom. Banks
ChgOtherSD <- diff(log(data$OtherSD)) # Other Sight Deposits
ChgTotalSD <- diff(log(data$TotalSD)) # Total Sight Deposits
ChgM1Switzerland <- diff(log(data$M1Switzerland)) # M1 Switzerland
ChgSNBFXinv <- diff(log(data$SNBFXinv)) # SNB investements in foreign currency
dataret <- data[-1,] # Deleting the first row
dataret <- cbind(dataret, RetSMI, RetSPIEX, RetSMIMid, ChgSDdomBanks, ChgOtherSD, ChgTotalSD, ChgM1Switzerland, ChgSNBFXinv)
# Creating the directions columns indicating whether the stocks or SNB data went up, down or stayed the same
# For the stock indices
dataret$SMIDir <- as.factor(ifelse(dataret$RetSMI > 0, "up", ifelse(dataret$RetSMI < 0, "down", "no change" ))) # Direction of the SMI in the respective week
dataret$SPIEXDir <- as.factor(ifelse(dataret$RetSPIEX > 0, "up", ifelse(dataret$RetSPIEX < 0, "down", "no change" ))) # Direction of the SPI Extra in the respective week
dataret$SMIMidDir <- as.factor(ifelse(dataret$RetSMIMid > 0, "up", ifelse(dataret$RetSMIMid < 0, "down", "no change" ))) # Direction of the SMI Mid in the respective week
# For the SNB data
dataret$SDofDomBanksDir <- as.factor(ifelse(dataret$ChgSDdomBanks > 0, "up", ifelse(dataret$ChgSDdomBanks < 0, "down", "no change" ))) # Direction of the Sight Deposits of dom. Banks in the respective week
dataret$OtherSDDir <- as.factor(ifelse(dataret$ChgOtherSD > 0, "up", ifelse(dataret$ChgOtherSD < 0, "down", "no change" ))) # Direction of the Ohter Sight Deposits in the respective week
dataret$TotalSDDir <- as.factor(ifelse(dataret$ChgTotalSD > 0, "up", ifelse(dataret$ChgTotalSD < 0, "down", "no change" ))) # Direction of the Total Sight Deposits in the respective week
# Creating the forcast columns for the SMI, SPIEX and SMIMid
# SMI
dataret$SMIForCast <- as.factor(ifelse(dataret$RetSMI > 0, "up", ifelse(dataret$RetSMI < 0, "down", "no change" ))) # Reproduce the column SMIM.Dir
dataret$SMIForCast[1:nrow(dataret)-1] <- dataret$SMIForCast[2:nrow(dataret)] # Lag the series to produce forecasts
# SPIEX
dataret$SPIEXForCast <- as.factor(ifelse(dataret$RetSPIEX > 0, "up", ifelse(dataret$RetSPIEX < 0, "down", "no change" ))) # Reproduce the column SMIM.Dir
dataret$SPIEXForCast[1:nrow(dataret)-1] <- dataret$SPIEXForCast[2:nrow(dataret)] # Lag the series to produce forecasts
# SMIMid
dataret$SMIMidForCast <- as.factor(ifelse(dataret$RetSMIMid > 0, "up", ifelse(dataret$RetSMIMid < 0, "down", "no change" ))) # Reproduce the column SMIM.Dir
dataret$SMIMidForCast[1:nrow(dataret)-1] <- dataret$SMIMidForCast[2:nrow(dataret)] # Lag the series to produce forecasts
dataret <- dataret[-nrow(dataret),] # delete the last row to remove the NAs in the last row
#### 2) Plotting the indices
par(mfrow = c(2,2))
plot(data$Date, data$SMI, type = "l", xlab = "Date", ylab = "Index", main = "SMI") # SMI
plot(data$Date, data$SPIEX,  type = "l", xlab = "Date", ylab = "Index", main = "SPI Extra") # SPI Extra
plot(data$Date, data$SMIMid,  type = "l", xlab = "Date", ylab = "Index", main = "SMI Mid") # SMI Mid
plot(data$Date, data$SDofDomBanks,  type = "l", xlab = "Date", ylab = "Index", main = "SNB Sight Deposits of Dom. Banks") # SNB Sight Deposits
plot(data$Date, data$OtherSD,  type = "l", xlab = "Date", ylab = "Index", main = "SNB Ohter Sight Deposits") # SNB Other Sight Deposits
plot(data$Date, data$TotalSD,  type = "l", xlab = "Date", ylab = "Index", main = "SNB Total Sight Deposits") # SNB Total Sight Deposits
plot(data$Date, data$M1Switzerland,  type = "l", xlab = "Date", ylab = "Index", main = "M1 Switzerland") # SNB M1 Switzerland
plot(data$Date, data$SNBFXinv,  type = "l", xlab = "Date", ylab = "Index", main = "SNBFXinv") # SNB Investments in foreign currencies
plot(data$Date, data$Gov10yr,  type = "l", xlab = "Date", ylab = "Index", main = "10 year Treasury yield") # Ten year treasury yield
plot(data$Date, data$Gov3yr,  type = "l", xlab = "Date", ylab = "Index", main = "3 year Treasury yield") # Three year treasury yield
plot(data$Date, data$Libor3M_CHF,  type = "l", xlab = "Date", ylab = "Index", main = "LIBOR 3 M") # Three months LIBOR yield
plot(data$Date, data$OvernightLendingRate,  type = "l", xlab = "Date", ylab = "Index", main = "Overnight Lending Rate") # Overnight lending rate
plot(data$Date, data$CHFUSD,  type = "l", xlab = "Date", ylab = "Index", main = "CHF/USD Exchange rate") # CHF/USD Exchange rate
plot(data$Date, data$CHFEUR,  type = "l", xlab = "Date", ylab = "Index", main = "CHF/EUR Exchange rate") # CHF/EUR Exchange rate
dev.off()
# 3) Correlation analysis: Correlation matrix
corr.mat <- cor(dataret[,-1], method = "spearman")
# Splitting up the data in High and low intervention phase.
HighInt <- dataret[1:229,] # Data set from start to 01.01.2016
LowInt <- dataret[230:392,] # Data set from 08.01.2016 - end
# Correlation matrix in high intervention phase
corr.mat.high <- cor(HighInt[,-1], method = "spearman")
# Correlation phase in low intervention phase
corr.mat.low <- cor(LowInt[,-1], method = "spearman")
# Result corresponding to correlation: We see that the SMI, SPIEX and SMI Mid are generally strongly correlated with
# the sight deposits of domestic banks. If we split the data, we see that during the intervention phase, the correlation between
# stocks and the Sight deposits is much stronger than in the after phase.
## 4) Creating decision trees and prediction analysis
### Analyzing the SMI
SMIData <- dataret[, -c(1,7,9,17, 18, 25, 26, 31, 32)]
TrainingDataSMI <- SMIData[1:300,] # Defining the training data from beginnig to 01.01.2016
TestDataSMI <- SMIData[301:391,] # Defining the test data from 08.01.2016 - end
modelSMI <- C5.0(TrainingDataSMI[-23], TrainingDataSMI$SMIForCast, rules = TRUE)
summary(modelSMI)
predictSMI <- predict(modelSMI, newdata = TestDataSMI)
summary(predict)
summary(TestDataSMI$SMIForCast)
accuracySMI <- (sum( predictSMI == TestDataSMI$SMIForCast ) / length( predictSMI ))*100 # Calculating the accuracy of the predicitons.
accuracySMI
## Analyzing the SMI Mid
SMIMidData <- dataret[,-c(1,7,8,10, 11, 12, 13, 14, 15, 16,17,24,25,30,31)]
SMIMidData <- dataret[,-c(1:15, 16, 17,24, 25, 30, 31 )]
TrainingDataSMIMid<- SMIMidData[1:300,] # Defining the training data from beginnig to 01.01.2016
TestDataSMIMid <- SMIMidData[301:391,] # Defining the test data from 08.01.2016 - end
modelSMIMid <- C5.0(TrainingDataSMIMid[-11], TrainingDataSMIMid$SMIMidForCast, rules = TRUE)
predictSMIMid <- predict(modelSMIMid, newdata = TestDataSMIMid)
summary(modelSMIMid)
summary(predictSMIMid)
summary(TestDataSMIMid$SMIMidForCast)
accuracySMIMid <- (sum( predict == TestDataSMIMid$SMIMidForCast ) / length( predictSMIMid ))*100 # Calculating the accuracy of the predicitons.
accuracySMIMid
# The strange thing is, when we compute the prediction only on the percentage changes for the SMI Mid, we get an accuracy of 96%,
# If we compute the precision on the basis of the data in this version, we only get 50%
modelSMIMid <- C5.0(TrainingDataSMIMid[-11], TrainingDataSMIMid$SMIMidForCast, rules = TRUE)
predictSMIMid <- predict(modelSMIMid, newdata = TestDataSMIMid)
summary(modelSMIMid)
summary(predictSMIMid)
summary(TestDataSMIMid$SMIMidForCast)
accuracySMIMid <- (sum( predict == TestDataSMIMid$SMIMidForCast ) / length( predictSMIMid ))*100 # Calculating the accuracy of the predicitons.
SMIMidData <- dataret[,-c(1:15, 16, 17,24, 25, 30, 31 )]
TrainingDataSMIMid<- SMIMidData[1:300,] # Defining the training data from beginnig to 01.01.2016
TestDataSMIMid <- SMIMidData[301:391,] # Defining the test data from 08.01.2016 - end
modelSMIMid <- C5.0(TrainingDataSMIMid[-11], TrainingDataSMIMid$SMIMidForCast, rules = TRUE)
predictSMIMid <- predict(modelSMIMid, newdata = TestDataSMIMid)
summary(modelSMIMid)
summary(predictSMIMid)
summary(TestDataSMIMid$SMIMidForCast)
accuracySMIMid <- (sum( predict == TestDataSMIMid$SMIMidForCast ) / length( predictSMIMid ))*100 # Calculating the accuracy of the predicitons.
accuracySMIMid
## Analyzing the SMI Mid
SMIMidData <- dataret[,-c(1,7,8,10, 11, 12, 13, 14, 15, 16,17,24,25,30,31)]
SMIMidData <- dataret[,-c(1:15, 16, 17,24, 25, 30, 31 )]
TrainingDataSMIMid<- SMIMidData[1:300,] # Defining the training data from beginnig to 01.01.2016
TestDataSMIMid <- SMIMidData[301:391,] # Defining the test data from 08.01.2016 - end
modelSMIMid <- C5.0(TrainingDataSMIMid[-11], TrainingDataSMIMid$SMIMidForCast, rules = TRUE)
predictSMIMid <- predict(modelSMIMid, newdata = TestDataSMIMid)
summary(modelSMIMid)
summary(predictSMIMid)
summary(TestDataSMIMid$SMIMidForCast)
accuracySMIMid <- (sum( predictSMIMid == TestDataSMIMid$SMIMidForCast ) / length( predictSMIMid ))*100 # Calculating the accuracy of the predicitons.
accuracySMIMid
## Analyzing the SMI Mid
SMIMidData <- dataret[,-c(1,7,8,10, 11, 12, 13, 14, 15, 16,17,24,25,30,31)]
TrainingDataSMIMid<- SMIMidData[1:300,] # Defining the training data from beginnig to 01.01.2016
TestDataSMIMid <- SMIMidData[301:391,] # Defining the test data from 08.01.2016 - end
modelSMIMid <- C5.0(TrainingDataSMIMid[-11], TrainingDataSMIMid$SMIMidForCast, rules = TRUE)
predictSMIMid <- predict(modelSMIMid, newdata = TestDataSMIMid)
summary(modelSMIMid)
summary(predictSMIMid)
summary(TestDataSMIMid$SMIMidForCast)
accuracySMIMid <- (sum( predictSMIMid == TestDataSMIMid$SMIMidForCast ) / length( predictSMIMid ))*100 # Calculating the accuracy of the predicitons.
accuracySMIMid
# This File contains the statistical analysis of the monetary and return data for the research seminar in Financial Economics
getwd()
setwd("/Users/julianwossner/Desktop/MBF/Vorlesungen_2._Semester/Research_Seminar_Financial_Economics/ResSem19")
# installing packages
library(PerformanceAnalytics)
library(AER)
library(C50)
library(Hmisc)
library(jtools)
library(huxtable)
library(zoo)
library(ggplot2)
data <- read.csv2("Monetary_Data_Handcollected_and_Datastream.csv", header = TRUE , sep = ";") #reading in data
data <- transform(data, Date = as.Date(Date, format = "%Y-%m-%d") ,SDofDomBanks = as.numeric(as.character(SDofDomBanks)), OtherSD = as.numeric(as.character(OtherSD)),
TotalSD = as.numeric(as.character(TotalSD)), M1Switzerland = as.numeric(as.character(M1Switzerland)), SNBFXinv = as.numeric(as.character(SNBFXinv)), SPIEX = as.numeric(as.character(SPIEX)),
SMI = as.numeric(as.character(SMI)), SMIMid = as.numeric(as.character(SMIMid)), Gov10yr = as.numeric(as.character(Gov10yr)), Gov3yr = as.numeric(as.character(Gov3yr)), Libor3M_CHF = as.numeric(as.character(Libor3M_CHF)), OvernightLendingRate = as.numeric(as.character(OvernightLendingRate)), CHFUSD = as.numeric(as.character(CHFUSD)),
CHFEUR = as.numeric(as.character(CHFEUR)))# Converting numbers into numeric format and date column to date format
str(data)
## 1) Data cleaning and preparation: Creating percentage change columns for the indices and the SNB assets
# Stock data
RetSMI <-  diff(log(data$SMI)) # Weekly returns of the SMI
RetSPIEX <- diff(log(data$SPIEX)) # Weekly returns of the SPIEX
RetSMIMid <- diff(log(data$SMIMid)) # Weekly returns of the SMIMid
# SNB Data
ChgSDdomBanks <- diff(log(data$SDofDomBanks)) # Sight deposits of dom. Banks
ChgOtherSD <- diff(log(data$OtherSD)) # Other Sight Deposits
ChgTotalSD <- diff(log(data$TotalSD)) # Total Sight Deposits
ChgM1Switzerland <- diff(log(data$M1Switzerland)) # M1 Switzerland
ChgSNBFXinv <- diff(log(data$SNBFXinv)) # SNB investements in foreign currency
dataret <- data[-1,] # Deleting the first row
dataret <- cbind(dataret, RetSMI, RetSPIEX, RetSMIMid, ChgSDdomBanks, ChgOtherSD, ChgTotalSD, ChgM1Switzerland, ChgSNBFXinv)
# For the stock indices
dataret$SMIDir <- as.factor(ifelse(dataret$RetSMI > 0, "up", ifelse(dataret$RetSMI < 0, "down", "no change" ))) # Direction of the SMI in the respective week
dataret$SPIEXDir <- as.factor(ifelse(dataret$RetSPIEX > 0, "up", ifelse(dataret$RetSPIEX < 0, "down", "no change" ))) # Direction of the SPI Extra in the respective week
dataret$SMIMidDir <- as.factor(ifelse(dataret$RetSMIMid > 0, "up", ifelse(dataret$RetSMIMid < 0, "down", "no change" ))) # Direction of the SMI Mid in the respective week
# For the SNB data
dataret$SDofDomBanksDir <- as.factor(ifelse(dataret$ChgSDdomBanks > 0, "up", ifelse(dataret$ChgSDdomBanks < 0, "down", "no change" ))) # Direction of the Sight Deposits of dom. Banks in the respective week
dataret$OtherSDDir <- as.factor(ifelse(dataret$ChgOtherSD > 0, "up", ifelse(dataret$ChgOtherSD < 0, "down", "no change" ))) # Direction of the Ohter Sight Deposits in the respective week
dataret$TotalSDDir <- as.factor(ifelse(dataret$ChgTotalSD > 0, "up", ifelse(dataret$ChgTotalSD < 0, "down", "no change" ))) # Direction of the Total Sight Deposits in the respective week
# SMI
dataret$SMIForCast <- as.factor(ifelse(dataret$RetSMI > 0, "up", ifelse(dataret$RetSMI < 0, "down", "no change" ))) # Reproduce the column SMIM.Dir
dataret$SMIForCast[1:nrow(dataret)-1] <- dataret$SMIForCast[2:nrow(dataret)] # Lag the series to produce forecasts
# SPIEX
dataret$SPIEXForCast <- as.factor(ifelse(dataret$RetSPIEX > 0, "up", ifelse(dataret$RetSPIEX < 0, "down", "no change" ))) # Reproduce the column SMIM.Dir
dataret$SPIEXForCast[1:nrow(dataret)-1] <- dataret$SPIEXForCast[2:nrow(dataret)] # Lag the series to produce forecasts
