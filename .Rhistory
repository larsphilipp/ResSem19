# Delete Target variable from input Data
inputData[,dependentVariable] <- NULL
# Define input Data for C5.0
preData <- inputData[1:185,]
capData <- inputData[186:362,]
postData <- inputData[363:555,]
# Run C5.0 Sampling for different Periods
print(typeof(preTarget))
preCap <- samplingC5(preData,preTarget)
cap <- samplingC5(capData, capTarget)
postCap <- samplingC5(postData, postTarget)
# Output of Object
results <- c(PreCap = preCap, Cap = cap, PostCap = postCap)
attr(results, "class") <- "allPeriodsC5"
results
}
CHFEURSMIcurrent <- allPeriodsC5(allData[currentSMIColumns], "SMIDir")
allPeriodsC5 <- function(inputData, dependentVariable) {
# Variable to be determined by C5.0
print(dependentVariable)
print(inputData)
preTarget <- inputData[1:185, dependentVariable]
capTarget <- inputData[186:362, dependentVariable]
postTarget <- inputData[363:555, dependentVariable]
print(preTarget)
# Delete Target variable from input Data
inputData[,dependentVariable] <- NULL
# Define input Data for C5.0
preData <- inputData[1:185,]
capData <- inputData[186:362,]
postData <- inputData[363:555,]
# Run C5.0 Sampling for different Periods
print(typeof(preTarget))
preCap <- samplingC5(preData,preTarget)
cap <- samplingC5(capData, capTarget)
postCap <- samplingC5(postData, postTarget)
# Output of Object
results <- c(PreCap = preCap, Cap = cap, PostCap = postCap)
attr(results, "class") <- "allPeriodsC5"
results
}
CHFEURSMIcurrent <- allPeriodsC5(allData[currentSMIColumns], "SMIDir")
CHFEURSMIcurrent <- allPeriodsC5(allData[currentSMIColumns], "SMIdir")
# -----------------------------------------------------------------
allPeriodsC5 <- function(inputData, dependentVariable) {
# Variable to be determined by C5.0
preTarget <- inputData[1:185, dependentVariable]
capTarget <- inputData[186:362, dependentVariable]
postTarget <- inputData[363:555, dependentVariable]
# Delete Target variable from input Data
inputData[,dependentVariable] <- NULL
# Define input Data for C5.0
preData <- inputData[1:185,]
capData <- inputData[186:362,]
postData <- inputData[363:555,]
# Run C5.0 Sampling for different Periods
preCap <- samplingC5(preData,preTarget)
cap <- samplingC5(capData, capTarget)
postCap <- samplingC5(postData, postTarget)
# Output of Object
results <- c(PreCap = preCap, Cap = cap, PostCap = postCap)
attr(results, "class") <- "allPeriodsC5"
results
}
CHFEURSMIcurrent <- allPeriodsC5(allData[currentSMIColumns], "SMIdir")
SMIcurrent <- allPeriodsC5(allData[currentSMIColumns], "SMIdir")
currentSMI <- allPeriodsC5(allData[currentSMIColumns], "SMIdir")
currentSMI
outputPrint(currentSMI)
outputPrint <- function(output) {
print(output[c("PreCap.trainError","Cap.trainError","PostCap.trainError")])
print(output[c("PreCap.testError","Cap.testError","PostCap.testError")])
print(output[c("PreCap.varImp.ChgSDdomBanks","Cap.varImp.ChgSDdomBanks","PostCap.varImp.ChgSDdomBanks")])
print(output[c("PreCap.varImp.SDdomBanksdir","Cap.varImp.SDdomBanksdir","PostCap.varImp.SDdomBanksdir")])
print(output[c("PreCap.varImp.SDofDomBanks","Cap.varImp.SDofDomBanks","PostCap.varImp.SDofDomBanks")])
}
currentSMI   <- allPeriodsC5(allData[currentSMIColumns], "SMIdir")
outputPrint(currentSMI)
currentSMI   <- allPeriodsC5(allData[currentSMIColumns], "SMIdir")
currentSMI   <- allPeriodsC5(allData[currentSMIColumns], "SMIdir")
# installing packages
library(PerformanceAnalytics)
library(AER)
library(C50)
library(Hmisc)
library(jtools)
library(huxtable)
library(zoo)
library(ggplot2)
library(psych)
library(xtable)
# setting working directory
getwd()
setwd("C:/Users/Lars Stauffenegger/Documents/MBF Unisg/Research Seminar/ResSem19")
#setwd("/Users/julianwossner/Desktop/MBF/Vorlesungen_2._Semester/Research_Seminar_Financial_Economics/Daten/ResSem19")
#setwd("C:/Users/LST/Documents/Uni/Research Seminar/ResSem19")
# Data Import --------------------------------------
# Index Data
dataind04 <- read.csv2("Indices from 04.csv", header = TRUE , sep = ";") #reading in data
dataind04 <- transform(dataind04, Date = as.Date(Date, format = "%Y-%m-%d") ,SNBSD = as.numeric(as.character(SNBSD)), SMI = as.numeric(as.character(SMI)),
SPIEX = as.numeric(as.character(SPIEX)), SMI.Mid = as.numeric(as.character(SMI.Mid)), CHF.USD = as.numeric(as.character(CHF.USD)), CHF.EUR = as.numeric(as.character(CHF.EUR))) # Converting numbers into numeric format and date column to date format
dataind04 <- dataind04[-c(1:196),]
# SNB Data
dataind08 <- read.csv2("Data_for_import_Indices_from_08.csv", header = TRUE , sep = ";") #reading in data
## Data Cleaning --------------------------------------
# Transforming the columns of the data frame into numeric
dataind08 <- transform(dataind08, Date = as.Date(Date, format = "%Y-%m-%d") ,SMI = as.numeric(as.character(SMI)), SDofDomBanks = as.numeric(as.character(SDofDomBanks)),
SPIEX = as.numeric(as.character(SPIEX)), SMIMid = as.numeric(as.character(SMIMid)), Gov10yr = as.numeric(as.character(Gov10yr)),
Gov3yr = as.numeric(as.character(Gov3yr)), Libor3M_CHF = as.numeric(as.character(Libor3M_CHF)), CHFUSD = as.numeric(as.character(CHFUSD)),
CHFEUR = as.numeric(as.character(CHFEUR))) # Converting numbers into numeric format and date column to date format
dataind08[is.na(dataind08)] <- 0 # Replacing NA with 0, NA indruduced due to #DIV/0! Entry in excel.
str(dataind08)
## Return calculations --------------
# Stock data
RetSMI <-  diff(log(dataind08$SMI)) # Weekly returns of the SMI
RetSPIEX <- diff(log(dataind08$SPIEX)) # Weekly returns of the SPIEX
RetSMIMid <- diff(log(dataind08$SMIMid)) # Weekly returns of the SMIMid
RetCHFEUR <- diff(log(dataind08$CHFEUR)) # Weekly returns of the SMIMid
# SNB Data
ChgSDdomBanks <- diff(dataind08$SDofDomBanks)/dataind08$SDofDomBanks[-length(dataind08$SDofDomBanks)] # Sight deposits of dom. Banks
# Creating Returns data set
dataret <- dataind08[-1,]
dataret <- cbind(dataret, RetSMI, RetSPIEX, RetSMIMid, ChgSDdomBanks, RetCHFEUR) # adding percent changes to the data set
# Inclusions
SMIdata    <- dataret[,-c(3,5,12,13,15)]   # Includes SMI as only stock indice
SPIEXdata  <- dataret[,-c(4,5,11,13,15)] # Includes SPI Extra as only stock indice
SMIMdata   <- dataret[,-c(3,4,11,12,15)]  # Includes the SMI Mid as only stock indice
#CHFEURdata <- dataret[,-c(3,5,12,13)] # including SMI
#CHFEURdata <- dataret[,-c(3,4,11,12)] # including SMIM
CHFEURdata <- dataret # including SMI and SMIM
## Data --------------------------------------
allData <- dataret
# Directions: Up / Down
allData$SMIdir <- as.factor(ifelse(allData$RetSMI > 0, "up", ifelse(allData$RetSMI < 0, "down", "no change" ))) # Including a column with up, down factors
allData$SMIMdir <- as.factor(ifelse(allData$RetSMIM > 0, "up", ifelse(allData$RetSMIM < 0, "down", "no change" ))) # Including a column with up, down factors
allData$SPIEXdir <- as.factor(ifelse(allData$RetSPIEX > 0, "up", ifelse(allData$RetSPIEX < 0, "down", "no change" ))) # Including a column with up, down factors
allData$SDdomBanksdir <- as.factor(ifelse(allData$ChgSDdomBanks > 0, "up", ifelse(allData$ChgSDdomBanks < 0, "down", "no change" )))
allData$CHFEURdir <- as.factor(ifelse(allData$RetCHFEUR > 0, "up", ifelse(allData$RetCHFEUR < 0, "down", "no change" ))) # Including a column with up, down factors
# Previous Week
allData$CHFEURprev <- allData$CHFEUR
allData$CHFEURprev[2:575] <- allData$CHFEURprev[1:574]
allData$SMIprev <- allData$SMI
allData$SMIprev[2:575] <- allData$SMIprev[1:574]
allData$SMIMprev <- allData$SMIMid
allData$SMIMprev[2:575] <- allData$SMIMprev[1:574]
allData$SPIEXprev <- allData$SPIEX
allData$SPIEXprev[2:575] <- allData$SPIEXprev[1:574]
# Next Week & Lag the series to produce forecasts
allData$SMInext <- allData$SMIdir
allData$SMInext[1:574] <- allData$SMInext[2:575]
allData$SMIMnext <- allData$SMIMdir
allData$SMIMnext[1:574] <- allData$SMIMnext[2:575]
allData$SPIEXnext <- allData$SPIEXdir
allData$SPIEXnext[1:574] <- allData$SPIEXnext[2:575]
allData$CHFEURnext <- allData$CHFEURdir
allData$CHFEURnext[1:574] <- allData$CHFEURdir[2:575] # CHFEURdata$CHFEURdir[1:574]
# delete first row and the last rows
allData <-allData[2:556,]
samplingC5 <- function(independentVariables, targetVariable) {
sumVariableImportance = setNames(data.frame(matrix(ncol = length(names(independentVariables)), nrow = 1)), names(independentVariables))
boostTrain = vector()
boostTest = vector()
for (i in 1:100) {
model <- C5.0(independentVariables, targetVariable,
rules = TRUE, trials = 10,
control = C5.0Control(sample=0.7))
#summary(model)
# parsing Boost Error Value
output <- strsplit(model[["output"]], "\n")[[1]]
boostRow <- grep("^boost\t", output)
boostTrain[i] <- gsub(".*\\(|\\).*", "", output[(boostRow[1])])
boostTest[i] <- gsub(".*\\(|\\).*", "", output[(boostRow[2])])
#print(boostTrain[i])
# parsing Variable Importance
variableImportance <- C5imp(model)
for (var in model[["predictors"]]) {
sumVariableImportance[i,var] = variableImportance[var,]
}
}
orderOfImportance <- sort(colMeans(sumVariableImportance), decreasing = TRUE)
boostTrain <- as.numeric(sub("%", "", boostTrain[!is.na(boostTrain)]))
boostTest  <- as.numeric(sub("%", "", boostTest[!is.na(boostTest)]))
meanBoostTrain <- mean(boostTrain)
meanBoostTest  <- mean(boostTest)
results <- c(trainError = meanBoostTrain, testError = meanBoostTest, varImp = orderOfImportance)
attr(results, "class") <- "samplingC5"
results
}
# -----------------------------------------------------------------
allPeriodsC5 <- function(inputData, dependentVariable) {
# Variable to be determined by C5.0
preTarget <- inputData[1:185, dependentVariable]
capTarget <- inputData[186:362, dependentVariable]
postTarget <- inputData[363:555, dependentVariable]
# Delete Target variable from input Data
inputData[,dependentVariable] <- NULL
# Define input Data for C5.0
preData <- inputData[1:185,]
capData <- inputData[186:362,]
postData <- inputData[363:555,]
# Run C5.0 Sampling for different Periods
preCap <- samplingC5(preData,preTarget)
cap <- samplingC5(capData, capTarget)
postCap <- samplingC5(postData, postTarget)
# Output of Object
results <- c(PreCap = preCap, Cap = cap, PostCap = postCap)
attr(results, "class") <- "allPeriodsC5"
results
}
# ---------------------------------------------------------------------
outputPrint <- function(output) {
print(output[c("PreCap.trainError","Cap.trainError","PostCap.trainError")])
print(output[c("PreCap.testError","Cap.testError","PostCap.testError")])
print(output[c("PreCap.varImp.ChgSDdomBanks","Cap.varImp.ChgSDdomBanks","PostCap.varImp.ChgSDdomBanks")])
print(output[c("PreCap.varImp.SDdomBanksdir","Cap.varImp.SDdomBanksdir","PostCap.varImp.SDdomBanksdir")])
print(output[c("PreCap.varImp.SDofDomBanks","Cap.varImp.SDofDomBanks","PostCap.varImp.SDofDomBanks")])
}
currentSMI   <- allPeriodsC5(allData[currentSMIColumns], "SMIdir")
allData
currentSMI   <- allPeriodsC5(allData[currentSMIColumns], "SMIdir")
# List of Colums
basicColumnsIndex <- c("SDofDomBanks","ChgSDdomBanks","SDdomBanksdir","CHFUSD","RetCHFEUR","CHFEUR","CHFEURdir","Gov3yr","Gov10yr","Libor3M_CHF")
basicColumnsFX    <- c("SDofDomBanks","ChgSDdomBanks","SDdomBanksdir","CHFUSD","Gov3yr","Gov10yr","Libor3M_CHF")
# Indices
currentSMIColumns   <- c(basicColumnsIndex,"SMIprev","SMIdir")
currentSMIMColumns  <- c(basicColumnsIndex,"SMIMprev","SMIMdir")
currentSPIEXColumns <- c(basicColumnsIndex,"SPIEXprev","SPIEXdir")
forecastSMIColumns   <- c(basicColumnsIndex,"SMI","SMInext")
forecastSMIMColumns  <- c(basicColumnsIndex,"SMIM","SMIMnext")
forecastSPIEXColumns <- c(basicColumnsIndex,"SPIEX","SPIEXnext")
# Fx
currentFxSMIColumns   <- c(basicColumnsFX,"RetSMI","SMI","SMIdir","CHFEURprev","CHFEURdir")
currentFxSMIMColumns  <- c(basicColumnsFX,"RetSMIMid","SMIMid","SMIMdir","CHFEURprev","CHFEURdir")
currentFxSPIEXColumns <- c(basicColumnsFX,"RetSPIEX","SPIEX","SPIEXdir","CHFEURprev","CHFEURdir")
forecastFxSMIColumns   <- c(basicColumnsFX,"RetSMI","SMI","SMIdir","CHFEUR","CHFEURnext")
forecastFxSMIMColumns  <- c(basicColumnsFX,"RetSMIMid","SMIMid","SMIMdir","CHFEUR","CHFEURnext")
forecastFxSPIEXColumns <- c(basicColumnsFX,"RetSPIEX","SPIEX","SPIEXdir","CHFEUR","CHFEURnext")
# List of Colums
basicColumnsIndex <- c("SDofDomBanks","ChgSDdomBanks","SDdomBanksdir","CHFUSD","RetCHFEUR","CHFEUR","CHFEURdir","Gov3yr","Gov10yr","Libor3M_CHF")
basicColumnsFX    <- c("SDofDomBanks","ChgSDdomBanks","SDdomBanksdir","CHFUSD","Gov3yr","Gov10yr","Libor3M_CHF")
# Indices
currentSMIColumns   <- c(basicColumnsIndex,"SMIprev","SMIdir")
currentSMIMColumns  <- c(basicColumnsIndex,"SMIMprev","SMIMdir")
currentSPIEXColumns <- c(basicColumnsIndex,"SPIEXprev","SPIEXdir")
forecastSMIColumns   <- c(basicColumnsIndex,"SMI","SMInext")
forecastSMIMColumns  <- c(basicColumnsIndex,"SMIM","SMIMnext")
forecastSPIEXColumns <- c(basicColumnsIndex,"SPIEX","SPIEXnext")
# Fx
currentFxSMIColumns   <- c(basicColumnsFX,"RetSMI","SMI","SMIdir","CHFEURprev","CHFEURdir")
currentFxSMIMColumns  <- c(basicColumnsFX,"RetSMIMid","SMIMid","SMIMdir","CHFEURprev","CHFEURdir")
currentFxSPIEXColumns <- c(basicColumnsFX,"RetSPIEX","SPIEX","SPIEXdir","CHFEURprev","CHFEURdir")
forecastFxSMIColumns   <- c(basicColumnsFX,"RetSMI","SMI","SMIdir","CHFEUR","CHFEURnext")
forecastFxSPIEXColumns <- c(basicColumnsFX,"RetSPIEX","SPIEX","SPIEXdir","CHFEUR","CHFEURnext")
forecastFxSMIMColumns  <- c(basicColumnsFX,"RetSMIMid","SMIMid","SMIMdir","CHFEUR","CHFEURnext")
currentSMI   <- allPeriodsC5(allData[currentSMIColumns], "SMIdir")
currentSMI   <- allPeriodsC5(allData[currentSMIColumns], "SMIdir")
currentSMIM  <- allPeriodsC5(allData[currentSMIMColumns], "SMIMDir")
forecastSMI   <- allPeriodsC5(allData[forecastSMIColumns]), "SMInext")
currentSPIEX <- allPeriodsC5(allData[currentSPIEXColumns], "SPIEXdir")
forecastSPIEX <- allPeriodsC5(allData[forecastSMIColumns], "SPIEXnext")
allData
forecastSPIEX <- allPeriodsC5(allData[forecastSPIEXColumns], "SPIEXnext")
currentSPIEX <- allPeriodsC5(allData[currentSPIEXColumns], "SPIEXdir")
forecastSPIEX <- allPeriodsC5(allData[forecastSPIEXColumns], "SPIEXnext")
forecastSPIEX <- allPeriodsC5(allData[forecastSPIEXColumns], "SPIEXnext")
forecastSPIEX <- allPeriodsC5(allData[forecastSPIEXColumns], "SPIEXnext")
forecastSMIM  <- allPeriodsC5(allData[forecastSMIMColumns], "SMIMnext")
allData[forecastSMIMColumns]
forecastSPIEXColumns
forecastSMIMColumns
allData
allData[forecastSMIMColumns]
forecastSMIMColumns
# Indices
currentSMIColumns   <- c(basicColumnsIndex,"SMIprev","SMIdir")
currentSMIMColumns  <- c(basicColumnsIndex,"SMIMprev","SMIMdir")
currentSPIEXColumns <- c(basicColumnsIndex,"SPIEXprev","SPIEXdir")
forecastSMIColumns   <- c(basicColumnsIndex,"SMI","SMInext")
forecastSMIMColumns  <- c(basicColumnsIndex,"SMIMid","SMIMnext")
forecastSPIEXColumns <- c(basicColumnsIndex,"SPIEX","SPIEXnext")
# Fx
currentFxSMIColumns   <- c(basicColumnsFX,"RetSMI","SMI","SMIdir","CHFEURprev","CHFEURdir")
currentFxSMIMColumns  <- c(basicColumnsFX,"RetSMIMid","SMIMid","SMIMdir","CHFEURprev","CHFEURdir")
currentFxSPIEXColumns <- c(basicColumnsFX,"RetSPIEX","SPIEX","SPIEXdir","CHFEURprev","CHFEURdir")
forecastFxSMIColumns   <- c(basicColumnsFX,"RetSMI","SMI","SMIdir","CHFEUR","CHFEURnext")
forecastFxSMIMColumns  <- c(basicColumnsFX,"RetSMIMid","SMIMid","SMIMdir","CHFEUR","CHFEURnext")
forecastFxSPIEXColumns <- c(basicColumnsFX,"RetSPIEX","SPIEX","SPIEXdir","CHFEUR","CHFEURnext")
currentSMIM  <- allPeriodsC5(allData[currentSMIMColumns], "SMIMdir")
currentSMIM  <- allPeriodsC5(allData[currentSMIMColumns], "SMIMdir")
# Functions and Obejcts BEGIN ------------------------------------------
samplingC5 <- function(independentVariables, targetVariable) {
sumVariableImportance = setNames(data.frame(matrix(ncol = length(names(independentVariables)), nrow = 1)), names(independentVariables))
boostTrain = vector()
boostTest = vector()
for (i in 1:100) {
model <- C5.0(independentVariables, targetVariable,
rules = TRUE, trials = 10,
control = C5.0Control(sample=0.7))
#summary(model)
# parsing Boost Error Value
output <- strsplit(model[["output"]], "\n")[[1]]
boostRow <- grep("^boost\t", output)
boostTrain[i] <- gsub(".*\\(|\\).*", "", output[(boostRow[1])])
boostTest[i] <- gsub(".*\\(|\\).*", "", output[(boostRow[2])])
print(boostTrain[i])
# parsing Variable Importance
variableImportance <- C5imp(model)
for (var in model[["predictors"]]) {
sumVariableImportance[i,var] = variableImportance[var,]
}
}
orderOfImportance <- sort(colMeans(sumVariableImportance), decreasing = TRUE)
boostTrain <- as.numeric(sub("%", "", boostTrain[!is.na(boostTrain)]))
boostTest  <- as.numeric(sub("%", "", boostTest[!is.na(boostTest)]))
meanBoostTrain <- mean(boostTrain)
meanBoostTest  <- mean(boostTest)
results <- c(trainError = meanBoostTrain, testError = meanBoostTest, varImp = orderOfImportance)
attr(results, "class") <- "samplingC5"
results
}
currentSMIM  <- allPeriodsC5(allData[currentSMIMColumns], "SMIMdir")
boostTrain[i])
boostTrain[i]
b = NA
b
if b != NA
if b != NA
if b isnot NA
if b is not NA
if b is.not NA
if is.not.na(b)
is.not.na(b)
b
is.na(b)
is.not.na(b)
if is.na(b) == False
if is.na(b) == FALSE
if is.na(b) = FALSE
if (is.na(b) = FALSE)
if (is.na(b) == FALSE)
print(1)
# Functions and Obejcts BEGIN ------------------------------------------
samplingC5 <- function(independentVariables, targetVariable) {
sumVariableImportance = setNames(data.frame(matrix(ncol = length(names(independentVariables)), nrow = 1)), names(independentVariables))
boostTrain = vector()
boostTest = vector()
for (i in 1:100) {
model <- C5.0(independentVariables, targetVariable,
rules = TRUE, trials = 10,
control = C5.0Control(sample=0.7))
#summary(model)
# parsing Boost Error Value
output <- strsplit(model[["output"]], "\n")[[1]]
boostRow <- grep("^boost\t", output)
boostTrain[i] <- gsub(".*\\(|\\).*", "", output[(boostRow[1])])
boostTest[i] <- gsub(".*\\(|\\).*", "", output[(boostRow[2])])
print(boostTrain[i])
# parsing Variable Importance
if (is.na(b) == FALSE) {
variableImportance <- C5imp(model)
}
for (var in model[["predictors"]]) {
sumVariableImportance[i,var] = variableImportance[var,]
}
}
orderOfImportance <- sort(colMeans(sumVariableImportance), decreasing = TRUE)
boostTrain <- as.numeric(sub("%", "", boostTrain[!is.na(boostTrain)]))
boostTest  <- as.numeric(sub("%", "", boostTest[!is.na(boostTest)]))
meanBoostTrain <- mean(boostTrain)
meanBoostTest  <- mean(boostTest)
results <- c(trainError = meanBoostTrain, testError = meanBoostTest, varImp = orderOfImportance)
attr(results, "class") <- "samplingC5"
results
}
currentSMIM  <- allPeriodsC5(allData[currentSMIMColumns], "SMIMdir")
samplingC5 <- function(independentVariables, targetVariable) {
sumVariableImportance = setNames(data.frame(matrix(ncol = length(names(independentVariables)), nrow = 1)), names(independentVariables))
boostTrain = vector()
boostTest = vector()
for (i in 1:100) {
model <- C5.0(independentVariables, targetVariable,
rules = TRUE, trials = 10,
control = C5.0Control(sample=0.7))
#summary(model)
# parsing Boost Error Value
output <- strsplit(model[["output"]], "\n")[[1]]
boostRow <- grep("^boost\t", output)
boostTrain[i] <- gsub(".*\\(|\\).*", "", output[(boostRow[1])])
boostTest[i] <- gsub(".*\\(|\\).*", "", output[(boostRow[2])])
print(boostTrain[i])
# parsing Variable Importance
if (is.na(b) == FALSE) {
variableImportance <- C5imp(model)
for (var in model[["predictors"]]) {
sumVariableImportance[i,var] = variableImportance[var,]
}
}
}
orderOfImportance <- sort(colMeans(sumVariableImportance), decreasing = TRUE)
boostTrain <- as.numeric(sub("%", "", boostTrain[!is.na(boostTrain)]))
boostTest  <- as.numeric(sub("%", "", boostTest[!is.na(boostTest)]))
meanBoostTrain <- mean(boostTrain)
meanBoostTest  <- mean(boostTest)
results <- c(trainError = meanBoostTrain, testError = meanBoostTest, varImp = orderOfImportance)
attr(results, "class") <- "samplingC5"
results
}
print(1)
samplingC5 <- function(independentVariables, targetVariable) {
sumVariableImportance = setNames(data.frame(matrix(ncol = length(names(independentVariables)), nrow = 1)), names(independentVariables))
boostTrain = vector()
boostTest = vector()
for (i in 1:100) {
model <- C5.0(independentVariables, targetVariable,
rules = TRUE, trials = 10,
control = C5.0Control(sample=0.7))
#summary(model)
# parsing Boost Error Value
output <- strsplit(model[["output"]], "\n")[[1]]
boostRow <- grep("^boost\t", output)
boostTrain[i] <- gsub(".*\\(|\\).*", "", output[(boostRow[1])])
boostTest[i] <- gsub(".*\\(|\\).*", "", output[(boostRow[2])])
print(boostTrain[i])
# parsing Variable Importance
if (is.na(b) == FALSE) {
variableImportance <- C5imp(model)
for (var in model[["predictors"]]) {
sumVariableImportance[i,var] = variableImportance[var,]
}
}
}
orderOfImportance <- sort(colMeans(sumVariableImportance), decreasing = TRUE)
boostTrain <- as.numeric(sub("%", "", boostTrain[!is.na(boostTrain)]))
boostTest  <- as.numeric(sub("%", "", boostTest[!is.na(boostTest)]))
meanBoostTrain <- mean(boostTrain)
meanBoostTest  <- mean(boostTest)
results <- c(trainError = meanBoostTrain, testError = meanBoostTest, varImp = orderOfImportance)
attr(results, "class") <- "samplingC5"
results
}
# --
currentSMIM  <- allPeriodsC5(allData[currentSMIMColumns], "SMIMdir")
outputPrint(currentSMIM)
samplingC5 <- function(independentVariables, targetVariable) {
sumVariableImportance = setNames(data.frame(matrix(ncol = length(names(independentVariables)), nrow = 1)), names(independentVariables))
boostTrain = vector()
boostTest = vector()
for (i in 1:100) {
model <- C5.0(independentVariables, targetVariable,
rules = TRUE, trials = 10,
control = C5.0Control(sample=0.7))
#summary(model)
# parsing Boost Error Value
output <- strsplit(model[["output"]], "\n")[[1]]
boostRow <- grep("^boost\t", output)
boostTrain[i] <- gsub(".*\\(|\\).*", "", output[(boostRow[1])])
boostTest[i] <- gsub(".*\\(|\\).*", "", output[(boostRow[2])])
print(boostTrain[i])
# parsing Variable Importance
#      if (is.na(b) == FALSE) {
variableImportance <- C5imp(model)
for (var in model[["predictors"]]) {
sumVariableImportance[i,var] = variableImportance[var,]
}
#      }
}
orderOfImportance <- sort(colMeans(sumVariableImportance), decreasing = TRUE)
boostTrain <- as.numeric(sub("%", "", boostTrain[!is.na(boostTrain)]))
boostTest  <- as.numeric(sub("%", "", boostTest[!is.na(boostTest)]))
meanBoostTrain <- mean(boostTrain)
meanBoostTest  <- mean(boostTest)
results <- c(trainError = meanBoostTrain, testError = meanBoostTest, varImp = orderOfImportance)
attr(results, "class") <- "samplingC5"
results
}
currentSMIM  <- allPeriodsC5(allData[currentSMIMColumns], "SMIMdir")
samplingC5 <- function(independentVariables, targetVariable) {
sumVariableImportance = setNames(data.frame(matrix(ncol = length(names(independentVariables)), nrow = 1)), names(independentVariables))
boostTrain = vector()
boostTest = vector()
for (i in 1:10) {
model <- C5.0(independentVariables, targetVariable,
rules = TRUE, trials = 10,
control = C5.0Control(sample=0.7))
#summary(model)
# parsing Boost Error Value
output <- strsplit(model[["output"]], "\n")[[1]]
boostRow <- grep("^boost\t", output)
boostTrain[i] <- gsub(".*\\(|\\).*", "", output[(boostRow[1])])
boostTest[i] <- gsub(".*\\(|\\).*", "", output[(boostRow[2])])
print(boostTrain[i])
# parsing Variable Importance
#      if (is.na(b) == FALSE) {
variableImportance <- C5imp(model)
for (var in model[["predictors"]]) {
sumVariableImportance[i,var] = variableImportance[var,]
}
#      }
}
orderOfImportance <- sort(colMeans(sumVariableImportance), decreasing = TRUE)
boostTrain <- as.numeric(sub("%", "", boostTrain[!is.na(boostTrain)]))
boostTest  <- as.numeric(sub("%", "", boostTest[!is.na(boostTest)]))
meanBoostTrain <- mean(boostTrain)
meanBoostTest  <- mean(boostTest)
results <- c(trainError = meanBoostTrain, testError = meanBoostTest, varImp = orderOfImportance)
attr(results, "class") <- "samplingC5"
results
}
currentSMIM  <- allPeriodsC5(allData[currentSMIMColumns], "SMIMdir")
currentSMIM  <- allPeriodsC5(allData[currentSMIMColumns], "SMIMdir")
currentSMIM  <- allPeriodsC5(allData[currentSMIMColumns], "SMIMdir")
outputPrint(currentSMIM)
